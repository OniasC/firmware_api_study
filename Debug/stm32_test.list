
stm32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ff8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800a108  0800a108  0001a108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1bc  0800a1bc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1bc  0800a1bc  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1bc  0800a1bc  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1bc  0800a1bc  0001a1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1c0  0800a1c0  0001a1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a1c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a54  200001d8  0800a39c  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000c2c  0800a39c  00020c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf8f  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041b4  00000000  00000000  0003c190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00040348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00041370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001baa5  00000000  00000000  000421c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b85  00000000  00000000  0005dc6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d023  00000000  00000000  000757f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102815  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004338  00000000  00000000  00102868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a0f0 	.word	0x0800a0f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800a0f0 	.word	0x0800a0f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001040:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <MX_ADC1_Init+0x94>)
 8001042:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001044:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_ADC1_Init+0x94>)
 8001048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_ADC1_Init+0x94>)
 8001050:	2201      	movs	r2, #1
 8001052:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_ADC1_Init+0x94>)
 8001056:	2200      	movs	r2, #0
 8001058:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_ADC1_Init+0x94>)
 800105c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001060:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_ADC1_Init+0x94>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_ADC1_Init+0x94>)
 800106a:	2202      	movs	r2, #2
 800106c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106e:	4815      	ldr	r0, [pc, #84]	; (80010c4 <MX_ADC1_Init+0x94>)
 8001070:	f001 f92c 	bl	80022cc <HAL_ADC_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800107a:	f000 fab6 	bl	80015ea <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001082:	2301      	movs	r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4619      	mov	r1, r3
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_ADC1_Init+0x94>)
 8001090:	f001 f9f4 	bl	800247c <HAL_ADC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 faa6 	bl	80015ea <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800109e:	2301      	movs	r3, #1
 80010a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_ADC1_Init+0x94>)
 80010ac:	f001 f9e6 	bl	800247c <HAL_ADC_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010b6:	f000 fa98 	bl	80015ea <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000020c 	.word	0x2000020c
 80010c8:	40012400 	.word	0x40012400

080010cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a28      	ldr	r2, [pc, #160]	; (8001188 <HAL_ADC_MspInit+0xbc>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d149      	bne.n	8001180 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <HAL_ADC_MspInit+0xc0>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a26      	ldr	r2, [pc, #152]	; (800118c <HAL_ADC_MspInit+0xc0>)
 80010f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <HAL_ADC_MspInit+0xc0>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <HAL_ADC_MspInit+0xc0>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a20      	ldr	r2, [pc, #128]	; (800118c <HAL_ADC_MspInit+0xc0>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <HAL_ADC_MspInit+0xc0>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800111c:	2303      	movs	r3, #3
 800111e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001120:	2303      	movs	r3, #3
 8001122:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4619      	mov	r1, r3
 800112a:	4819      	ldr	r0, [pc, #100]	; (8001190 <HAL_ADC_MspInit+0xc4>)
 800112c:	f001 fd46 	bl	8002bbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_ADC_MspInit+0xc8>)
 8001132:	4a19      	ldr	r2, [pc, #100]	; (8001198 <HAL_ADC_MspInit+0xcc>)
 8001134:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_ADC_MspInit+0xc8>)
 8001138:	2200      	movs	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_ADC_MspInit+0xc8>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_ADC_MspInit+0xc8>)
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_ADC_MspInit+0xc8>)
 800114a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HAL_ADC_MspInit+0xc8>)
 8001152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001156:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_ADC_MspInit+0xc8>)
 800115a:	2220      	movs	r2, #32
 800115c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_ADC_MspInit+0xc8>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <HAL_ADC_MspInit+0xc8>)
 8001166:	f001 fbc9 	bl	80028fc <HAL_DMA_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001170:	f000 fa3b 	bl	80015ea <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_ADC_MspInit+0xc8>)
 8001178:	621a      	str	r2, [r3, #32]
 800117a:	4a06      	ldr	r2, [pc, #24]	; (8001194 <HAL_ADC_MspInit+0xc8>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40012400 	.word	0x40012400
 800118c:	40021000 	.word	0x40021000
 8001190:	40010800 	.word	0x40010800
 8001194:	2000023c 	.word	0x2000023c
 8001198:	40020008 	.word	0x40020008

0800119c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_DMA_Init+0x38>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <MX_DMA_Init+0x38>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6153      	str	r3, [r2, #20]
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_DMA_Init+0x38>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	200b      	movs	r0, #11
 80011c0:	f001 fb65 	bl	800288e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011c4:	200b      	movs	r0, #11
 80011c6:	f001 fb7e 	bl	80028c6 <HAL_NVIC_EnableIRQ>

}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000

080011d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ec:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <MX_GPIO_Init+0xc0>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a29      	ldr	r2, [pc, #164]	; (8001298 <MX_GPIO_Init+0xc0>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <MX_GPIO_Init+0xc0>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <MX_GPIO_Init+0xc0>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a23      	ldr	r2, [pc, #140]	; (8001298 <MX_GPIO_Init+0xc0>)
 800120a:	f043 0320 	orr.w	r3, r3, #32
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <MX_GPIO_Init+0xc0>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0320 	and.w	r3, r3, #32
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MX_GPIO_Init+0xc0>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <MX_GPIO_Init+0xc0>)
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_GPIO_Init+0xc0>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_GPIO_Init+0xc0>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4a17      	ldr	r2, [pc, #92]	; (8001298 <MX_GPIO_Init+0xc0>)
 800123a:	f043 0308 	orr.w	r3, r3, #8
 800123e:	6193      	str	r3, [r2, #24]
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_GPIO_Init+0xc0>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001252:	4812      	ldr	r0, [pc, #72]	; (800129c <MX_GPIO_Init+0xc4>)
 8001254:	f001 fe36 	bl	8002ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8001258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125e:	2301      	movs	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2302      	movs	r3, #2
 8001268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	4619      	mov	r1, r3
 8001270:	480a      	ldr	r0, [pc, #40]	; (800129c <MX_GPIO_Init+0xc4>)
 8001272:	f001 fca3 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_GPIO_Init+0xc8>)
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4619      	mov	r1, r3
 8001288:	4806      	ldr	r0, [pc, #24]	; (80012a4 <MX_GPIO_Init+0xcc>)
 800128a:	f001 fc97 	bl	8002bbc <HAL_GPIO_Init>

}
 800128e:	bf00      	nop
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	40011000 	.word	0x40011000
 80012a0:	10210000 	.word	0x10210000
 80012a4:	40010800 	.word	0x40010800

080012a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012ae:	4a13      	ldr	r2, [pc, #76]	; (80012fc <MX_I2C1_Init+0x54>)
 80012b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <MX_I2C1_Init+0x58>)
 80012b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012e6:	f001 fe1f 	bl	8002f28 <HAL_I2C_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f0:	f000 f97b 	bl	80015ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000280 	.word	0x20000280
 80012fc:	40005400 	.word	0x40005400
 8001300:	00061a80 	.word	0x00061a80

08001304 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_I2C_MspInit+0x90>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d132      	bne.n	800138a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_I2C_MspInit+0x94>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_I2C_MspInit+0x94>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_I2C_MspInit+0x94>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800133c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001342:	2312      	movs	r3, #18
 8001344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4619      	mov	r1, r3
 8001350:	4812      	ldr	r0, [pc, #72]	; (800139c <HAL_I2C_MspInit+0x98>)
 8001352:	f001 fc33 	bl	8002bbc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_I2C_MspInit+0x9c>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <HAL_I2C_MspInit+0x9c>)
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_I2C_MspInit+0x94>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_I2C_MspInit+0x94>)
 8001378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137c:	61d3      	str	r3, [r2, #28]
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_I2C_MspInit+0x94>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40005400 	.word	0x40005400
 8001398:	40021000 	.word	0x40021000
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	40010000 	.word	0x40010000

080013a4 <IMU_readAllI2C>:
imu_status IMU_I2C_ctor(imu_t * const imu, I2C_HandleTypeDef *hi2c, uint8_t i2c_address_mask);
imu_status IMU_complementaryFilter(imu_t *imu);

/*virtual calls (late bindings) */
static inline imu_status IMU_readAllI2C(imu_t *imu, I2C_HandleTypeDef *hi2c)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
	return (*imu->vptr->IMU_readAllI2CVCall)(imu, hi2c);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6839      	ldr	r1, [r7, #0]
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	4798      	blx	r3
 80013ba:	4603      	mov	r3, r0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <eeprom_Read>:

eeprom_status eeprom_ctor(eeprom_t * const me, eeprom_chip eeprom, I2C_HandleTypeDef *hi2c, uint8_t i2c_address_mask);

/* virtual call (late binding) */
static inline eeprom_status eeprom_Read(eeprom_t * const me, uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	817b      	strh	r3, [r7, #10]
 80013d2:	4613      	mov	r3, r2
 80013d4:	813b      	strh	r3, [r7, #8]
	return (*me->vptr->eeprom_ReadVCall)(me, page, offset, data, size);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681c      	ldr	r4, [r3, #0]
 80013dc:	893a      	ldrh	r2, [r7, #8]
 80013de:	8979      	ldrh	r1, [r7, #10]
 80013e0:	8c3b      	ldrh	r3, [r7, #32]
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	47a0      	blx	r4
 80013ea:	4603      	mov	r3, r0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd90      	pop	{r4, r7, pc}

080013f4 <eeprom_Write>:

static inline eeprom_status eeprom_Write(eeprom_t * const me, uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	817b      	strh	r3, [r7, #10]
 8001402:	4613      	mov	r3, r2
 8001404:	813b      	strh	r3, [r7, #8]
	return (*me->vptr->eeprom_WriteVCall)(me, page, offset, data, size);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685c      	ldr	r4, [r3, #4]
 800140c:	893a      	ldrh	r2, [r7, #8]
 800140e:	8979      	ldrh	r1, [r7, #10]
 8001410:	8c3b      	ldrh	r3, [r7, #32]
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	47a0      	blx	r4
 800141a:	4603      	mov	r3, r0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	bd90      	pop	{r4, r7, pc}

08001424 <eeprom_PageErase>:

static inline eeprom_status eeprom_PageErase(eeprom_t * const me, uint16_t page)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
	return (*me->vptr->eeprom_PageEraseVCall)(me, page);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	4611      	mov	r1, r2
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	4798      	blx	r3
 800143e:	4603      	mov	r3, r0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144e:	f000 feb7 	bl	80021c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001452:	f000 f86d 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001456:	f7ff febf 	bl	80011d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800145a:	f7ff fe9f 	bl	800119c <MX_DMA_Init>
  MX_ADC1_Init();
 800145e:	f7ff fde7 	bl	8001030 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001462:	f008 f85f 	bl	8009524 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001466:	f7ff ff1f 	bl	80012a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  BSP_EEPROM_Init();
 800146a:	f000 fe83 	bl	8002174 <BSP_EEPROM_Init>
  BSP_IMU_Init();
 800146e:	f000 fe99 	bl	80021a4 <BSP_IMU_Init>

  //HAL_ADC_Start_DMA(&hadc1, values, 2); //start the adc in dma mode
  //here "values" is the buffer, where the adc values are going to store
  //2 is the number of values going to store == no. of channels we are using

  int val_x = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  int val_y = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  //int MAX = 200;
  int polarity=1;
 800147a:	2301      	movs	r3, #1
 800147c:	60bb      	str	r3, [r7, #8]
  int step = 1;
 800147e:	2301      	movs	r3, #1
 8001480:	607b      	str	r3, [r7, #4]

  //char txBuf[8];
  //uint8_t count = 1;

  for (int i=0; i<eeprom3.super.number_pages; i++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e008      	b.n	800149a <main+0x52>
    {
	  eeprom_PageErase((eeprom_t *)&eeprom3, i);
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4619      	mov	r1, r3
 800148e:	4821      	ldr	r0, [pc, #132]	; (8001514 <main+0xcc>)
 8001490:	f7ff ffc8 	bl	8001424 <eeprom_PageErase>
  for (int i=0; i<eeprom3.super.number_pages; i++)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3301      	adds	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <main+0xcc>)
 800149c:	7adb      	ldrb	r3, [r3, #11]
 800149e:	461a      	mov	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	4293      	cmp	r3, r2
 80014a4:	dbf0      	blt.n	8001488 <main+0x40>
    }

    eeprom_Write((eeprom_t *)&eeprom3, 0, 0, dataw1, strlen((char *)dataw1));
 80014a6:	481c      	ldr	r0, [pc, #112]	; (8001518 <main+0xd0>)
 80014a8:	f7fe fe52 	bl	8000150 <strlen>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <main+0xd0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	4816      	ldr	r0, [pc, #88]	; (8001514 <main+0xcc>)
 80014ba:	f7ff ff9b 	bl	80013f4 <eeprom_Write>
    eeprom_Read((eeprom_t *)&eeprom3, 0, 0, data_r, strlen((char *)dataw1));
 80014be:	4816      	ldr	r0, [pc, #88]	; (8001518 <main+0xd0>)
 80014c0:	f7fe fe46 	bl	8000150 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <main+0xd4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	4810      	ldr	r0, [pc, #64]	; (8001514 <main+0xcc>)
 80014d2:	f7ff ff77 	bl	80013c4 <eeprom_Read>
	  val_y += step*polarity;

	  updateCursor(hUsbDeviceFS, mousehid, val_x, val_y);
	  mousehid.testFunc = testFunc2;
	  mousehid.testFunc(mousehid.button);*/
	  IMU_readAllI2C((imu_t *)&imu1, &hi2c1);
 80014d6:	4912      	ldr	r1, [pc, #72]	; (8001520 <main+0xd8>)
 80014d8:	4812      	ldr	r0, [pc, #72]	; (8001524 <main+0xdc>)
 80014da:	f7ff ff63 	bl	80013a4 <IMU_readAllI2C>

	  if (imu1.imu.pitch > 90.0 || imu1.imu.roll > 90.0)
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <main+0xdc>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	4911      	ldr	r1, [pc, #68]	; (8001528 <main+0xe0>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fd99 	bl	800101c <__aeabi_fcmpgt>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d108      	bne.n	8001502 <main+0xba>
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <main+0xdc>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <main+0xe0>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fd90 	bl	800101c <__aeabi_fcmpgt>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d004      	beq.n	800150c <main+0xc4>
	  {
		  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8001502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001506:	4809      	ldr	r0, [pc, #36]	; (800152c <main+0xe4>)
 8001508:	f001 fcf4 	bl	8002ef4 <HAL_GPIO_TogglePin>
	  }

	  HAL_Delay (100);
 800150c:	2064      	movs	r0, #100	; 0x64
 800150e:	f000 feb9 	bl	8002284 <HAL_Delay>
	  IMU_readAllI2C((imu_t *)&imu1, &hi2c1);
 8001512:	e7e0      	b.n	80014d6 <main+0x8e>
 8001514:	200003f8 	.word	0x200003f8
 8001518:	20000000 	.word	0x20000000
 800151c:	200002e0 	.word	0x200002e0
 8001520:	20000280 	.word	0x20000280
 8001524:	20000408 	.word	0x20000408
 8001528:	42b40000 	.word	0x42b40000
 800152c:	40011000 	.word	0x40011000

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b094      	sub	sp, #80	; 0x50
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153a:	2228      	movs	r2, #40	; 0x28
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f008 fbdc 	bl	8009cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001560:	2301      	movs	r3, #1
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156e:	2301      	movs	r3, #1
 8001570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001572:	2302      	movs	r3, #2
 8001574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800157a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800157c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001586:	4618      	mov	r0, r3
 8001588:	f004 f848 	bl	800561c <HAL_RCC_OscConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001592:	f000 f82a 	bl	80015ea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001596:	230f      	movs	r3, #15
 8001598:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2102      	movs	r1, #2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f004 fab2 	bl	8005b1c <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80015be:	f000 f814 	bl	80015ea <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80015c2:	2312      	movs	r3, #18
 80015c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4618      	mov	r0, r3
 80015d4:	f004 fc28 	bl	8005e28 <HAL_RCCEx_PeriphCLKConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80015de:	f000 f804 	bl	80015ea <Error_Handler>
  }
}
 80015e2:	bf00      	nop
 80015e4:	3750      	adds	r7, #80	; 0x50
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ee:	b672      	cpsid	i
}
 80015f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <Error_Handler+0x8>

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_MspInit+0x5c>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	4a14      	ldr	r2, [pc, #80]	; (8001650 <HAL_MspInit+0x5c>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6193      	str	r3, [r2, #24]
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_MspInit+0x5c>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_MspInit+0x5c>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <HAL_MspInit+0x5c>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	61d3      	str	r3, [r2, #28]
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_MspInit+0x5c>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_MspInit+0x60>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_MspInit+0x60>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	40021000 	.word	0x40021000
 8001654:	40010000 	.word	0x40010000

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169e:	f000 fdd5 	bl	800224c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <DMA1_Channel1_IRQHandler+0x10>)
 80016ae:	f001 f97f 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000023c 	.word	0x2000023c

080016bc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80016c2:	f002 fd62 	bl	800418a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000940 	.word	0x20000940

080016d0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80016d6:	f002 fd58 	bl	800418a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000940 	.word	0x20000940

080016e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80016f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80016f2:	e003      	b.n	80016fc <LoopCopyDataInit>

080016f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80016f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016fa:	3104      	adds	r1, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016fc:	480a      	ldr	r0, [pc, #40]	; (8001728 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001700:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001702:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001704:	d3f6      	bcc.n	80016f4 <CopyDataInit>
  ldr r2, =_sbss
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001708:	e002      	b.n	8001710 <LoopFillZerobss>

0800170a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800170c:	f842 3b04 	str.w	r3, [r2], #4

08001710 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001712:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001714:	d3f9      	bcc.n	800170a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001716:	f7ff ffe5 	bl	80016e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800171a:	f008 facb 	bl	8009cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800171e:	f7ff fe93 	bl	8001448 <main>
  bx lr
 8001722:	4770      	bx	lr
  ldr r3, =_sidata
 8001724:	0800a1c4 	.word	0x0800a1c4
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800172c:	200001d8 	.word	0x200001d8
  ldr r2, =_sbss
 8001730:	200001d8 	.word	0x200001d8
  ldr r3, = _ebss
 8001734:	20000c2c 	.word	0x20000c2c

08001738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC1_2_IRQHandler>
	...

0800173c <eeprom_at24c_ctor>:
#include "string.h"

#include "at24c.h"

eeprom_status eeprom_at24c_ctor(eeprom_at24c * const me, eeprom_chip eeprom, I2C_HandleTypeDef *hi2c, uint8_t i2c_address_mask)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	461a      	mov	r2, r3
 8001748:	460b      	mov	r3, r1
 800174a:	72fb      	strb	r3, [r7, #11]
 800174c:	4613      	mov	r3, r2
 800174e:	72bb      	strb	r3, [r7, #10]
		(eeprom_status (*)(eeprom_t const * const me,
							uint16_t page,
							uint16_t offset,
							float *fdata))&eeprom_at24c_readNumVTable
	};
	eeprom_status eeprom_ctor_status = eeprom_ctor(&(me->super),
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	7abb      	ldrb	r3, [r7, #10]
 8001754:	7af9      	ldrb	r1, [r7, #11]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	f000 fa34 	bl	8001bc4 <eeprom_ctor>
 800175c:	4603      	mov	r3, r0
 800175e:	75fb      	strb	r3, [r7, #23]
					eeprom,
					hi2c,
					i2c_address_mask);
	me->super.vptr = &vtable;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4a03      	ldr	r2, [pc, #12]	; (8001770 <eeprom_at24c_ctor+0x34>)
 8001764:	601a      	str	r2, [r3, #0]
	return eeprom_ctor_status;
 8001766:	7dfb      	ldrb	r3, [r7, #23]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	0800a170 	.word	0x0800a170

08001774 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (eeprom_at24c const * const me, uint16_t size, uint16_t offset)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	803b      	strh	r3, [r7, #0]
	if ((size+offset) < me->super.page_size_bytes) return size;
 8001784:	887a      	ldrh	r2, [r7, #2]
 8001786:	883b      	ldrh	r3, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	7b12      	ldrb	r2, [r2, #12]
 800178e:	4293      	cmp	r3, r2
 8001790:	da01      	bge.n	8001796 <bytestowrite+0x22>
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	e005      	b.n	80017a2 <bytestowrite+0x2e>
	else return me->super.page_size_bytes-offset;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7b1b      	ldrb	r3, [r3, #12]
 800179a:	b29a      	uxth	r2, r3
 800179c:	883b      	ldrh	r3, [r7, #0]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	b29b      	uxth	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e00c      	b.n	80017da <float2Bytes+0x2e>
      ftoa_bytes_temp[i] = thing.bytes[i];
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	440b      	add	r3, r1
 80017c8:	f107 0110 	add.w	r1, r7, #16
 80017cc:	440a      	add	r2, r1
 80017ce:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80017d2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	3301      	adds	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d9ef      	bls.n	80017c0 <float2Bytes+0x14>
    }

}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	75fb      	strb	r3, [r7, #23]
 80017f8:	e00c      	b.n	8001814 <Bytes2float+0x28>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	441a      	add	r2, r3
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	7812      	ldrb	r2, [r2, #0]
 8001804:	f107 0118 	add.w	r1, r7, #24
 8001808:	440b      	add	r3, r1
 800180a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800180e:	7dfb      	ldrb	r3, [r7, #23]
 8001810:	3301      	adds	r3, #1
 8001812:	75fb      	strb	r3, [r7, #23]
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	2b03      	cmp	r3, #3
 8001818:	d9ef      	bls.n	80017fa <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	613b      	str	r3, [r7, #16]
   return float_variable;
 800181e:	693b      	ldr	r3, [r7, #16]
}
 8001820:	4618      	mov	r0, r3
 8001822:	371c      	adds	r7, #28
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	0000      	movs	r0, r0
 800182c:	0000      	movs	r0, r0
	...

08001830 <eeprom_at24c_readVTable>:

eeprom_status eeprom_at24c_readVTable (eeprom_at24c const * const me, uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b08e      	sub	sp, #56	; 0x38
 8001834:	af04      	add	r7, sp, #16
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	817b      	strh	r3, [r7, #10]
 800183e:	4613      	mov	r3, r2
 8001840:	813b      	strh	r3, [r7, #8]
	int paddrposition = log(me->super.page_size_bytes)/log(2);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	7b1b      	ldrb	r3, [r3, #12]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fdcc 	bl	80003e4 <__aeabi_ui2d>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f008 fa5a 	bl	8009d0c <log>
 8001858:	a337      	add	r3, pc, #220	; (adr r3, 8001938 <eeprom_at24c_readVTable+0x108>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe ff65 	bl	800072c <__aeabi_ddiv>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff f8e5 	bl	8000a38 <__aeabi_d2iz>
 800186e:	4603      	mov	r3, r0
 8001870:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8001872:	897b      	ldrh	r3, [r7, #10]
 8001874:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/me->super.page_size_bytes);
 8001876:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001878:	893b      	ldrh	r3, [r7, #8]
 800187a:	4413      	add	r3, r2
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	7b12      	ldrb	r2, [r2, #12]
 8001880:	fb93 f3f2 	sdiv	r3, r3, r2
 8001884:	b29a      	uxth	r2, r3
 8001886:	897b      	ldrh	r3, [r7, #10]
 8001888:	4413      	add	r3, r2
 800188a:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 800188c:	8b7a      	ldrh	r2, [r7, #26]
 800188e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	b29b      	uxth	r3, r3
 8001894:	3301      	adds	r3, #1
 8001896:	833b      	strh	r3, [r7, #24]
	if (endPage > me->super.number_pages-1)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	7adb      	ldrb	r3, [r3, #11]
 800189c:	461a      	mov	r2, r3
 800189e:	8b7b      	ldrh	r3, [r7, #26]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dc01      	bgt.n	80018a8 <eeprom_at24c_readVTable+0x78>
		return EEPROM_ERROR_OVERFLW_PAGS;
 80018a4:	2302      	movs	r3, #2
 80018a6:	e040      	b.n	800192a <eeprom_at24c_readVTable+0xfa>

	uint16_t pos=0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
 80018b0:	e036      	b.n	8001920 <eeprom_at24c_readVTable+0xf0>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80018b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b21b      	sxth	r3, r3
 80018c4:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(me, size, offset);
 80018c6:	893a      	ldrh	r2, [r7, #8]
 80018c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018ca:	4619      	mov	r1, r3
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f7ff ff51 	bl	8001774 <bytestowrite>
 80018d2:	4603      	mov	r3, r0
 80018d4:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(me->super.hi2c, me->super.i2c_address, MemAddress, me->super.memAddSize, &data[pos], bytesremaining, 1000);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6858      	ldr	r0, [r3, #4]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	7a5b      	ldrb	r3, [r3, #9]
 80018de:	b299      	uxth	r1, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	89dd      	ldrh	r5, [r3, #14]
 80018e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	8afc      	ldrh	r4, [r7, #22]
 80018ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f0:	9202      	str	r2, [sp, #8]
 80018f2:	8aba      	ldrh	r2, [r7, #20]
 80018f4:	9201      	str	r2, [sp, #4]
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	462b      	mov	r3, r5
 80018fa:	4622      	mov	r2, r4
 80018fc:	f001 fd52 	bl	80033a4 <HAL_I2C_Mem_Read>
		startPage += 1;
 8001900:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001902:	3301      	adds	r3, #1
 8001904:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8001906:	2300      	movs	r3, #0
 8001908:	813b      	strh	r3, [r7, #8]
		size = size-bytesremaining;
 800190a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800190c:	8abb      	ldrh	r3, [r7, #20]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	873b      	strh	r3, [r7, #56]	; 0x38
		pos += bytesremaining;
 8001912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001914:	8abb      	ldrh	r3, [r7, #20]
 8001916:	4413      	add	r3, r2
 8001918:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	3301      	adds	r3, #1
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	8b3b      	ldrh	r3, [r7, #24]
 8001922:	6a3a      	ldr	r2, [r7, #32]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbc4      	blt.n	80018b2 <eeprom_at24c_readVTable+0x82>
	}
	return EEPROM_NO_ERROR;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bdb0      	pop	{r4, r5, r7, pc}
 8001932:	bf00      	nop
 8001934:	f3af 8000 	nop.w
 8001938:	fefa39ef 	.word	0xfefa39ef
 800193c:	3fe62e42 	.word	0x3fe62e42

08001940 <eeprom_at24c_writeVTable>:

eeprom_status eeprom_at24c_writeVTable(eeprom_at24c const * const me, uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b08e      	sub	sp, #56	; 0x38
 8001944:	af04      	add	r7, sp, #16
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	817b      	strh	r3, [r7, #10]
 800194e:	4613      	mov	r3, r2
 8001950:	813b      	strh	r3, [r7, #8]
	if (offset > me->super.number_pages-1)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	7adb      	ldrb	r3, [r3, #11]
 8001956:	461a      	mov	r2, r3
 8001958:	893b      	ldrh	r3, [r7, #8]
 800195a:	429a      	cmp	r2, r3
 800195c:	dc01      	bgt.n	8001962 <eeprom_at24c_writeVTable+0x22>
		return EEPROM_ERROR_OVERFLW_PAGS;
 800195e:	2302      	movs	r3, #2
 8001960:	e076      	b.n	8001a50 <eeprom_at24c_writeVTable+0x110>
	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(me->super.page_size_bytes)/log(2);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	7b1b      	ldrb	r3, [r3, #12]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fd3c 	bl	80003e4 <__aeabi_ui2d>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f008 f9ca 	bl	8009d0c <log>
 8001978:	a337      	add	r3, pc, #220	; (adr r3, 8001a58 <eeprom_at24c_writeVTable+0x118>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fed5 	bl	800072c <__aeabi_ddiv>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff f855 	bl	8000a38 <__aeabi_d2iz>
 800198e:	4603      	mov	r3, r0
 8001990:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8001992:	897b      	ldrh	r3, [r7, #10]
 8001994:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/me->super.page_size_bytes);
 8001996:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001998:	893b      	ldrh	r3, [r7, #8]
 800199a:	4413      	add	r3, r2
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	7b12      	ldrb	r2, [r2, #12]
 80019a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	897b      	ldrh	r3, [r7, #10]
 80019a8:	4413      	add	r3, r2
 80019aa:	837b      	strh	r3, [r7, #26]
	if (endPage > me->super.number_pages-1)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	7adb      	ldrb	r3, [r3, #11]
 80019b0:	461a      	mov	r2, r3
 80019b2:	8b7b      	ldrh	r3, [r7, #26]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	dc01      	bgt.n	80019bc <eeprom_at24c_writeVTable+0x7c>
		return EEPROM_ERROR_OVERFLW_PAGS;
 80019b8:	2302      	movs	r3, #2
 80019ba:	e049      	b.n	8001a50 <eeprom_at24c_writeVTable+0x110>
	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80019bc:	8b7a      	ldrh	r2, [r7, #26]
 80019be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
 80019d0:	e039      	b.n	8001a46 <eeprom_at24c_writeVTable+0x106>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80019d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	b21a      	sxth	r2, r3
 80019dc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(me, size, offset);  // calculate the remaining bytes to be written
 80019e6:	893a      	ldrh	r2, [r7, #8]
 80019e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80019ea:	4619      	mov	r1, r3
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f7ff fec1 	bl	8001774 <bytestowrite>
 80019f2:	4603      	mov	r3, r0
 80019f4:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Write(me->super.hi2c, me->super.i2c_address, MemAddress, me->super.memAddSize, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6858      	ldr	r0, [r3, #4]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	7a5b      	ldrb	r3, [r3, #9]
 80019fe:	b299      	uxth	r1, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	89dd      	ldrh	r5, [r3, #14]
 8001a04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	8afc      	ldrh	r4, [r7, #22]
 8001a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a10:	9202      	str	r2, [sp, #8]
 8001a12:	8aba      	ldrh	r2, [r7, #20]
 8001a14:	9201      	str	r2, [sp, #4]
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	462b      	mov	r3, r5
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	f001 fbc8 	bl	80031b0 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8001a20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a22:	3301      	adds	r3, #1
 8001a24:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8001a26:	2300      	movs	r3, #0
 8001a28:	813b      	strh	r3, [r7, #8]
		size = size-bytesremaining;  // reduce the size of the bytes
 8001a2a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001a2c:	8abb      	ldrh	r3, [r7, #20]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	873b      	strh	r3, [r7, #56]	; 0x38
		pos += bytesremaining;  // update the position for the data buffer
 8001a32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a34:	8abb      	ldrh	r3, [r7, #20]
 8001a36:	4413      	add	r3, r2
 8001a38:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8001a3a:	2005      	movs	r0, #5
 8001a3c:	f000 fc22 	bl	8002284 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	3301      	adds	r3, #1
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	8b3b      	ldrh	r3, [r7, #24]
 8001a48:	6a3a      	ldr	r2, [r7, #32]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dbc1      	blt.n	80019d2 <eeprom_at24c_writeVTable+0x92>
	}
	return EEPROM_NO_ERROR;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3728      	adds	r7, #40	; 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bdb0      	pop	{r4, r5, r7, pc}
 8001a58:	fefa39ef 	.word	0xfefa39ef
 8001a5c:	3fe62e42 	.word	0x3fe62e42

08001a60 <eeprom_at24c_pageEraseVTable>:

eeprom_status eeprom_at24c_pageEraseVTable(eeprom_at24c const * const me, uint16_t page)
{
 8001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a62:	b08b      	sub	sp, #44	; 0x2c
 8001a64:	af04      	add	r7, sp, #16
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
 8001a6c:	466b      	mov	r3, sp
 8001a6e:	461e      	mov	r6, r3
	// calculate the memory address based on the page number
	int paddrposition = log(me->super.page_size_bytes)/log(2);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	7b1b      	ldrb	r3, [r3, #12]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fcb5 	bl	80003e4 <__aeabi_ui2d>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f008 f943 	bl	8009d0c <log>
 8001a86:	a32e      	add	r3, pc, #184	; (adr r3, 8001b40 <eeprom_at24c_pageEraseVTable+0xe0>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fe4e 	bl	800072c <__aeabi_ddiv>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7fe ffce 	bl	8000a38 <__aeabi_d2iz>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	617b      	str	r3, [r7, #20]
	uint16_t MemAddress = page<<paddrposition;
 8001aa0:	887a      	ldrh	r2, [r7, #2]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	827b      	strh	r3, [r7, #18]

	// create a buffer to store the reset values
	uint8_t data[me->super.page_size_bytes];
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7b1b      	ldrb	r3, [r3, #12]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7b1b      	ldrb	r3, [r3, #12]
 8001ab6:	b2d8      	uxtb	r0, r3
 8001ab8:	f04f 0100 	mov.w	r1, #0
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	00cb      	lsls	r3, r1, #3
 8001ac6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001aca:	00c2      	lsls	r2, r0, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7b1b      	ldrb	r3, [r3, #12]
 8001ad0:	b2d8      	uxtb	r0, r3
 8001ad2:	f04f 0100 	mov.w	r1, #0
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	00cb      	lsls	r3, r1, #3
 8001ae0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ae4:	00c2      	lsls	r2, r0, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	7b1b      	ldrb	r3, [r3, #12]
 8001aea:	3307      	adds	r3, #7
 8001aec:	08db      	lsrs	r3, r3, #3
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	ebad 0d03 	sub.w	sp, sp, r3
 8001af4:	ab04      	add	r3, sp, #16
 8001af6:	3300      	adds	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
	memset(data,0xff, me->super.page_size_bytes);
 8001afa:	68b8      	ldr	r0, [r7, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7b1b      	ldrb	r3, [r3, #12]
 8001b00:	461a      	mov	r2, r3
 8001b02:	21ff      	movs	r1, #255	; 0xff
 8001b04:	f008 f8fa 	bl	8009cfc <memset>

	// write the data to the EEPROM
	//HAL_I2C_Mem_Write(me->super.hi2c, me->super.i2c_address, MemAddress, me->super.memAddSize, data, me->super.page_size_bytes, 1000);
	HAL_I2C_Mem_Write(me->super.hi2c, me->super.i2c_address, MemAddress, 1, data, me->super.page_size_bytes, 1000);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6858      	ldr	r0, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	7a5b      	ldrb	r3, [r3, #9]
 8001b10:	b299      	uxth	r1, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	7b12      	ldrb	r2, [r2, #12]
 8001b18:	b292      	uxth	r2, r2
 8001b1a:	8a7c      	ldrh	r4, [r7, #18]
 8001b1c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001b20:	9502      	str	r5, [sp, #8]
 8001b22:	9201      	str	r2, [sp, #4]
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2301      	movs	r3, #1
 8001b28:	4622      	mov	r2, r4
 8001b2a:	f001 fb41 	bl	80031b0 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay
 8001b2e:	2005      	movs	r0, #5
 8001b30:	f000 fba8 	bl	8002284 <HAL_Delay>

	return EEPROM_NO_ERROR;
 8001b34:	2300      	movs	r3, #0
 8001b36:	46b5      	mov	sp, r6
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b40:	fefa39ef 	.word	0xfefa39ef
 8001b44:	3fe62e42 	.word	0x3fe62e42

08001b48 <eeprom_at24c_writeNumVTable>:

eeprom_status eeprom_at24c_writeNumVTable(eeprom_at24c const * const me, uint16_t page, uint16_t offset, float fdata)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	817b      	strh	r3, [r7, #10]
 8001b56:	4613      	mov	r3, r2
 8001b58:	813b      	strh	r3, [r7, #8]
	float2Bytes(bytes_temp, fdata);
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4807      	ldr	r0, [pc, #28]	; (8001b7c <eeprom_at24c_writeNumVTable+0x34>)
 8001b5e:	f7ff fe25 	bl	80017ac <float2Bytes>

	return eeprom_at24c_writeVTable(me, page, offset, bytes_temp, 4);
 8001b62:	893a      	ldrh	r2, [r7, #8]
 8001b64:	8979      	ldrh	r1, [r7, #10]
 8001b66:	2304      	movs	r3, #4
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <eeprom_at24c_writeNumVTable+0x34>)
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7ff fee7 	bl	8001940 <eeprom_at24c_writeVTable>
 8001b72:	4603      	mov	r3, r0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200003e0 	.word	0x200003e0

08001b80 <eeprom_at24c_readNumVTable>:

eeprom_status eeprom_at24c_readNumVTable(eeprom_at24c const * const me, uint16_t page, uint16_t offset, float *fdata)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	817b      	strh	r3, [r7, #10]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	813b      	strh	r3, [r7, #8]
	uint8_t buffer[4];

	eeprom_status status = eeprom_at24c_readVTable(me, page, offset, buffer, 4);
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	893a      	ldrh	r2, [r7, #8]
 8001b98:	8979      	ldrh	r1, [r7, #10]
 8001b9a:	2004      	movs	r0, #4
 8001b9c:	9000      	str	r0, [sp, #0]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7ff fe46 	bl	8001830 <eeprom_at24c_readVTable>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	75fb      	strb	r3, [r7, #23]

	*fdata = (Bytes2float(buffer));
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fe1d 	bl	80017ec <Bytes2float>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	601a      	str	r2, [r3, #0]

	return status;
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <eeprom_ctor>:
static eeprom_status eeprom_WriteNumberVTable(eeprom_t const * const me, uint16_t page, uint16_t offset, float fdata);

static eeprom_status eeprom_ReadNumberVTable(eeprom_t const * const me, uint16_t page, uint16_t offset, float *fdata);

eeprom_status eeprom_ctor(eeprom_t * const me, eeprom_chip eeprom, I2C_HandleTypeDef *hi2c, uint8_t i2c_address_mask)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	72fb      	strb	r3, [r7, #11]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	72bb      	strb	r3, [r7, #10]
		&eeprom_WriteVTable,
		&eeprom_PageEraseVTable,
		&eeprom_WriteNumberVTable,
		&eeprom_ReadNumberVTable
	};
	me->vptr = &vtable;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <eeprom_ctor+0x58>)
 8001bdc:	601a      	str	r2, [r3, #0]
	me->hi2c = hi2c;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	605a      	str	r2, [r3, #4]
	me->i2c_address = (0b1010 << 4) | i2c_address_mask; /*0xA0*/
 8001be4:	7abb      	ldrb	r3, [r7, #10]
 8001be6:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	725a      	strb	r2, [r3, #9]

	if (me->eeprom_chip == EEPROM_AT24C02C)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	7a1b      	ldrb	r3, [r3, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <eeprom_ctor+0x4a>
	{
		me->number_pages = 32;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	72da      	strb	r2, [r3, #11]
		me->page_size_bytes = 8;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2208      	movs	r2, #8
 8001c02:	731a      	strb	r2, [r3, #12]
		me->memAddSize = 1;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	81da      	strh	r2, [r3, #14]
	}
	else return EEPROM_ERROR;

	return EEPROM_NO_ERROR;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <eeprom_ctor+0x4c>
	else return EEPROM_ERROR;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	0800a184 	.word	0x0800a184

08001c20 <eeprom_ReadVTable>:

static eeprom_status eeprom_ReadVTable(eeprom_t const * const me, uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	817b      	strh	r3, [r7, #10]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	813b      	strh	r3, [r7, #8]
	(void)me; /* unused parameter */
	return EEPROM_NO_ERROR;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <eeprom_WriteVTable>:

static eeprom_status eeprom_WriteVTable(eeprom_t const * const me, uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	817b      	strh	r3, [r7, #10]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	813b      	strh	r3, [r7, #8]
	(void)me; /* unused parameter */
	return EEPROM_NO_ERROR;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <eeprom_PageEraseVTable>:

static eeprom_status eeprom_PageEraseVTable(eeprom_t const * const me, uint16_t page)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
	(void)me; /* unused parameter */
	return EEPROM_NO_ERROR;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <eeprom_WriteNumberVTable>:

static eeprom_status eeprom_WriteNumberVTable(eeprom_t const * const me, uint16_t page, uint16_t offset, float fdata)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	817b      	strh	r3, [r7, #10]
 8001c82:	4613      	mov	r3, r2
 8001c84:	813b      	strh	r3, [r7, #8]
	(void)me; /* unused parameter */
	return EEPROM_NO_ERROR;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <eeprom_ReadNumberVTable>:

static eeprom_status eeprom_ReadNumberVTable(eeprom_t const * const me, uint16_t page, uint16_t offset, float *fdata)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b085      	sub	sp, #20
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	817b      	strh	r3, [r7, #10]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	813b      	strh	r3, [r7, #8]
	(void)me; /* unused parameter */
	return EEPROM_NO_ERROR;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <IMU_I2C_ctor>:
static imu_status IMU_readAccelI2C_VTable(imu_t *imu, I2C_HandleTypeDef *hi2c);
static imu_status IMU_readGyroI2C_VTable(imu_t *imu, I2C_HandleTypeDef *I2Cx);
static imu_status IMU_readTempI2C_VTable(imu_t *imu, I2C_HandleTypeDef *I2Cx);

imu_status IMU_I2C_ctor(imu_t * const imu, I2C_HandleTypeDef *hi2c, uint8_t i2c_address_mask)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	71fb      	strb	r3, [r7, #7]
			&IMU_readAllI2C_VTable,
			&IMU_readAccelI2C_VTable,
			&IMU_readGyroI2C_VTable,
			&IMU_readTempI2C_VTable
	};
	imu->vptr = &vtable;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <IMU_I2C_ctor+0x3c>)
 8001cc2:	601a      	str	r2, [r3, #0]

	/* Initializing angle values*/
	imu->pitch = 0.0;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
	imu->roll = 0.0;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	60da      	str	r2, [r3, #12]

	/* Initializing sensor */
	if (imu->sensor != IMU_MPU_6050)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	791b      	ldrb	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <IMU_I2C_ctor+0x30>
	{
		return IMU_INIT_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <IMU_I2C_ctor+0x32>
	}
	return IMU_NO_ERROR;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	0800a198 	.word	0x0800a198

08001cf0 <IMU_readAllI2C_VTable>:
	}
	return IMU_NO_ERROR;
}

static imu_status IMU_readAllI2C_VTable(imu_t *imu, I2C_HandleTypeDef *hi2c)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
	(void)imu;
	return IMU_NO_ERROR;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <IMU_readAccelI2C_VTable>:

static imu_status IMU_readAccelI2C_VTable(imu_t *imu, I2C_HandleTypeDef *hi2c)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
	(void)imu;
	return IMU_NO_ERROR;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <IMU_readGyroI2C_VTable>:

imu_status IMU_readGyroI2C_VTable(imu_t * const imu, I2C_HandleTypeDef *I2Cx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
	(void)imu;
	return IMU_NO_ERROR;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <IMU_readTempI2C_VTable>:

imu_status IMU_readTempI2C_VTable(imu_t * const imu, I2C_HandleTypeDef *I2Cx)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
	(void)imu;
	return IMU_NO_ERROR;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <imu_mpu6050_ctor>:

#include "mpu_6050.h"


imu_status imu_mpu6050_ctor(imu_mpu6050 * const mpu6050, I2C_HandleTypeDef *hi2c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
			(imu_status (*)(	imu_t * const mpu6050,
								I2C_HandleTypeDef *I2Cx))&imu_mpu6050_readTempVTable,
			(imu_status (*)(	imu_t * const mpu6050,
								I2C_HandleTypeDef *I2Cx))&imu_mpu6050_readAllVTable,
		};
		imu_status imu_ctor_status = IMU_I2C_ctor(&(mpu6050->imu),
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	22d0      	movs	r2, #208	; 0xd0
 8001d56:	6839      	ldr	r1, [r7, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ffa9 	bl	8001cb0 <IMU_I2C_ctor>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	73fb      	strb	r3, [r7, #15]
						hi2c,
						MPU6050_ADDR);
		mpu6050->imu.vptr = &vtable;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <imu_mpu6050_ctor+0x48>)
 8001d66:	601a      	str	r2, [r3, #0]
		mpu6050->i2c_timeout = 100;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2264      	movs	r2, #100	; 0x64
 8001d6c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		mpu6050->Accel_Z_corrector = 14418.0;
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	a305      	add	r3, pc, #20	; (adr r3, 8001d88 <imu_mpu6050_ctor+0x40>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		return imu_ctor_status;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	00000000 	.word	0x00000000
 8001d8c:	40cc2900 	.word	0x40cc2900
 8001d90:	0800a1a8 	.word	0x0800a1a8

08001d94 <imu_mpu6050_readAccelVTable>:

imu_status imu_mpu6050_readAccelVTable(imu_mpu6050 * const mpu6050, I2C_HandleTypeDef *I2Cx)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af04      	add	r7, sp, #16
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, mpu6050->i2c_address, MPU6050_ACCEL_XOUT_H_REG, 1, Rec_Data, 6, mpu6050->i2c_timeout);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001da4:	b299      	uxth	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001dac:	9302      	str	r3, [sp, #8]
 8001dae:	2306      	movs	r3, #6
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2301      	movs	r3, #1
 8001dba:	223b      	movs	r2, #59	; 0x3b
 8001dbc:	6838      	ldr	r0, [r7, #0]
 8001dbe:	f001 faf1 	bl	80033a4 <HAL_I2C_Mem_Read>
	HAL_Delay(50);
 8001dc2:	2032      	movs	r0, #50	; 0x32
 8001dc4:	f000 fa5e 	bl	8002284 <HAL_Delay>

	mpu6050->imu.Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001dc8:	7a3b      	ldrb	r3, [r7, #8]
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	7a7b      	ldrb	r3, [r7, #9]
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	b21a      	sxth	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	821a      	strh	r2, [r3, #16]
	mpu6050->imu.Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001dda:	7abb      	ldrb	r3, [r7, #10]
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	7afb      	ldrb	r3, [r7, #11]
 8001de2:	b21b      	sxth	r3, r3
 8001de4:	4313      	orrs	r3, r2
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	825a      	strh	r2, [r3, #18]
	mpu6050->imu.Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001dec:	7b3b      	ldrb	r3, [r7, #12]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	b21a      	sxth	r2, r3
 8001df2:	7b7b      	ldrb	r3, [r7, #13]
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	4313      	orrs	r3, r2
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	829a      	strh	r2, [r3, #20]
	/*** convert the RAW values into acceleration in 'g'
		 we have to divide according to the Full scale value set in FS_SEL
		 I have configured FS_SEL = 0. So I am dividing by 16384.0
		 for more details check ACCEL_CONFIG Register              ****/

	mpu6050->imu.Ax = mpu6050->imu.Accel_X_RAW / 16384.0;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fafd 	bl	8000404 <__aeabi_i2d>
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <imu_mpu6050_readAccelVTable+0xd4>)
 8001e10:	f7fe fc8c 	bl	800072c <__aeabi_ddiv>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	mpu6050->imu.Ay = mpu6050->imu.Accel_Y_RAW / 16384.0;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe faed 	bl	8000404 <__aeabi_i2d>
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <imu_mpu6050_readAccelVTable+0xd4>)
 8001e30:	f7fe fc7c 	bl	800072c <__aeabi_ddiv>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	mpu6050->imu.Az = mpu6050->imu.Accel_Z_RAW / mpu6050->Accel_Z_corrector;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fadd 	bl	8000404 <__aeabi_i2d>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001e50:	f7fe fc6c 	bl	800072c <__aeabi_ddiv>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	return IMU_NO_ERROR;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40d00000 	.word	0x40d00000
 8001e6c:	00000000 	.word	0x00000000

08001e70 <imu_mpu6050_readGyroVTable>:

imu_status imu_mpu6050_readGyroVTable(imu_mpu6050 * const mpu6050, I2C_HandleTypeDef *I2Cx)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af04      	add	r7, sp, #16
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, mpu6050->i2c_address, MPU6050_GYRO_XOUT_H_REG, 1, Rec_Data, 6, mpu6050->i2c_timeout);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001e80:	b299      	uxth	r1, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001e88:	9302      	str	r3, [sp, #8]
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2301      	movs	r3, #1
 8001e96:	2243      	movs	r2, #67	; 0x43
 8001e98:	6838      	ldr	r0, [r7, #0]
 8001e9a:	f001 fa83 	bl	80033a4 <HAL_I2C_Mem_Read>
	HAL_Delay(50);
 8001e9e:	2032      	movs	r0, #50	; 0x32
 8001ea0:	f000 f9f0 	bl	8002284 <HAL_Delay>

	mpu6050->imu.Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001ea4:	7a3b      	ldrb	r3, [r7, #8]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	b21a      	sxth	r2, r3
 8001eaa:	7a7b      	ldrb	r3, [r7, #9]
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	b21a      	sxth	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	861a      	strh	r2, [r3, #48]	; 0x30
	mpu6050->imu.Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001eb6:	7abb      	ldrb	r3, [r7, #10]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	b21a      	sxth	r2, r3
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
 8001ebe:	b21b      	sxth	r3, r3
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	b21a      	sxth	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	865a      	strh	r2, [r3, #50]	; 0x32
	mpu6050->imu.Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001ec8:	7b3b      	ldrb	r3, [r7, #12]
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	7b7b      	ldrb	r3, [r7, #13]
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b21a      	sxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	869a      	strh	r2, [r3, #52]	; 0x34
	/*** convert the RAW values into dps (degrees/s)
			 we have to divide according to the Full scale value set in FS_SEL
			 I have configured FS_SEL = 0. So I am dividing by 131.0
			 for more details check GYRO_CONFIG Register                 ****/

	mpu6050->imu.Gx = mpu6050->imu.Gyro_X_RAW / 131.0;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fa8f 	bl	8000404 <__aeabi_i2d>
 8001ee6:	a318      	add	r3, pc, #96	; (adr r3, 8001f48 <imu_mpu6050_readGyroVTable+0xd8>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	f7fe fc1e 	bl	800072c <__aeabi_ddiv>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	mpu6050->imu.Gy = mpu6050->imu.Gyro_Y_RAW / 131.0;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fa7f 	bl	8000404 <__aeabi_i2d>
 8001f06:	a310      	add	r3, pc, #64	; (adr r3, 8001f48 <imu_mpu6050_readGyroVTable+0xd8>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fc0e 	bl	800072c <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	mpu6050->imu.Gz = mpu6050->imu.Gyro_Z_RAW / 131.0;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fa6f 	bl	8000404 <__aeabi_i2d>
 8001f26:	a308      	add	r3, pc, #32	; (adr r3, 8001f48 <imu_mpu6050_readGyroVTable+0xd8>)
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	f7fe fbfe 	bl	800072c <__aeabi_ddiv>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	return IMU_NO_ERROR;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	f3af 8000 	nop.w
 8001f48:	00000000 	.word	0x00000000
 8001f4c:	40606000 	.word	0x40606000

08001f50 <imu_mpu6050_readTempVTable>:

imu_status imu_mpu6050_readTempVTable(imu_mpu6050 * const mpu6050, I2C_HandleTypeDef *I2Cx)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af04      	add	r7, sp, #16
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[2];
	int16_t temp;

	// Read 2 BYTES of data starting from TEMP_OUT_H_REG register

	HAL_I2C_Mem_Read(I2Cx, mpu6050->i2c_address, MPU6050_TEMP_OUT_H_REG, 1, Rec_Data, 2, mpu6050->i2c_timeout);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001f60:	b299      	uxth	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001f68:	9302      	str	r3, [sp, #8]
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2301      	movs	r3, #1
 8001f76:	2241      	movs	r2, #65	; 0x41
 8001f78:	6838      	ldr	r0, [r7, #0]
 8001f7a:	f001 fa13 	bl	80033a4 <HAL_I2C_Mem_Read>

	temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001f7e:	7b3b      	ldrb	r3, [r7, #12]
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	7b7b      	ldrb	r3, [r7, #13]
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	81fb      	strh	r3, [r7, #14]
	mpu6050->imu.Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001f8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fe33 	bl	8000bfc <__aeabi_i2f>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4908      	ldr	r1, [pc, #32]	; (8001fbc <imu_mpu6050_readTempVTable+0x6c>)
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe ff36 	bl	8000e0c <__aeabi_fdiv>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4907      	ldr	r1, [pc, #28]	; (8001fc0 <imu_mpu6050_readTempVTable+0x70>)
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fd75 	bl	8000a94 <__addsf3>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	651a      	str	r2, [r3, #80]	; 0x50

	return IMU_NO_ERROR;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	43aa0000 	.word	0x43aa0000
 8001fc0:	42121eb8 	.word	0x42121eb8
 8001fc4:	00000000 	.word	0x00000000

08001fc8 <imu_mpu6050_readAllVTable>:

imu_status imu_mpu6050_readAllVTable(imu_mpu6050 * const mpu6050, I2C_HandleTypeDef *I2Cx)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af04      	add	r7, sp, #16
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[14];
		int16_t temp;

		// Read 14 BYTES of data starting from ACCEL_XOUT_H register

		HAL_I2C_Mem_Read(I2Cx, mpu6050->i2c_address, MPU6050_ACCEL_XOUT_H_REG, 1, Rec_Data, 14, mpu6050->i2c_timeout);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001fd8:	b299      	uxth	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001fe0:	9302      	str	r3, [sp, #8]
 8001fe2:	230e      	movs	r3, #14
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	f107 0308 	add.w	r3, r7, #8
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2301      	movs	r3, #1
 8001fee:	223b      	movs	r2, #59	; 0x3b
 8001ff0:	6838      	ldr	r0, [r7, #0]
 8001ff2:	f001 f9d7 	bl	80033a4 <HAL_I2C_Mem_Read>

		mpu6050->imu.Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001ff6:	7a3b      	ldrb	r3, [r7, #8]
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	7a7b      	ldrb	r3, [r7, #9]
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	4313      	orrs	r3, r2
 8002002:	b21a      	sxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	821a      	strh	r2, [r3, #16]
		mpu6050->imu.Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002008:	7abb      	ldrb	r3, [r7, #10]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	b21a      	sxth	r2, r3
 800200e:	7afb      	ldrb	r3, [r7, #11]
 8002010:	b21b      	sxth	r3, r3
 8002012:	4313      	orrs	r3, r2
 8002014:	b21a      	sxth	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	825a      	strh	r2, [r3, #18]
		mpu6050->imu.Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800201a:	7b3b      	ldrb	r3, [r7, #12]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	b21a      	sxth	r2, r3
 8002020:	7b7b      	ldrb	r3, [r7, #13]
 8002022:	b21b      	sxth	r3, r3
 8002024:	4313      	orrs	r3, r2
 8002026:	b21a      	sxth	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	829a      	strh	r2, [r3, #20]
		temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800202c:	7bbb      	ldrb	r3, [r7, #14]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	b21a      	sxth	r2, r3
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	b21b      	sxth	r3, r3
 8002036:	4313      	orrs	r3, r2
 8002038:	82fb      	strh	r3, [r7, #22]
		mpu6050->imu.Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800203a:	7c3b      	ldrb	r3, [r7, #16]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	b21a      	sxth	r2, r3
 8002040:	7c7b      	ldrb	r3, [r7, #17]
 8002042:	b21b      	sxth	r3, r3
 8002044:	4313      	orrs	r3, r2
 8002046:	b21a      	sxth	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	861a      	strh	r2, [r3, #48]	; 0x30
		mpu6050->imu.Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800204c:	7cbb      	ldrb	r3, [r7, #18]
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	b21a      	sxth	r2, r3
 8002052:	7cfb      	ldrb	r3, [r7, #19]
 8002054:	b21b      	sxth	r3, r3
 8002056:	4313      	orrs	r3, r2
 8002058:	b21a      	sxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	865a      	strh	r2, [r3, #50]	; 0x32
		mpu6050->imu.Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800205e:	7d3b      	ldrb	r3, [r7, #20]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	b21a      	sxth	r2, r3
 8002064:	7d7b      	ldrb	r3, [r7, #21]
 8002066:	b21b      	sxth	r3, r3
 8002068:	4313      	orrs	r3, r2
 800206a:	b21a      	sxth	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	869a      	strh	r2, [r3, #52]	; 0x34

		mpu6050->imu.Ax = mpu6050->imu.Accel_X_RAW / 16384.0;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe f9c4 	bl	8000404 <__aeabi_i2d>
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	4b39      	ldr	r3, [pc, #228]	; (8002168 <imu_mpu6050_readAllVTable+0x1a0>)
 8002082:	f7fe fb53 	bl	800072c <__aeabi_ddiv>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		mpu6050->imu.Ay = mpu6050->imu.Accel_Y_RAW / 16384.0;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe f9b4 	bl	8000404 <__aeabi_i2d>
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	4b31      	ldr	r3, [pc, #196]	; (8002168 <imu_mpu6050_readAllVTable+0x1a0>)
 80020a2:	f7fe fb43 	bl	800072c <__aeabi_ddiv>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	e9c1 2308 	strd	r2, r3, [r1, #32]
		mpu6050->imu.Az = mpu6050->imu.Accel_Z_RAW / mpu6050->Accel_Z_corrector;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe f9a4 	bl	8000404 <__aeabi_i2d>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80020c2:	f7fe fb33 	bl	800072c <__aeabi_ddiv>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		mpu6050->imu.Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80020d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fd91 	bl	8000bfc <__aeabi_i2f>
 80020da:	4603      	mov	r3, r0
 80020dc:	4923      	ldr	r1, [pc, #140]	; (800216c <imu_mpu6050_readAllVTable+0x1a4>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fe94 	bl	8000e0c <__aeabi_fdiv>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4922      	ldr	r1, [pc, #136]	; (8002170 <imu_mpu6050_readAllVTable+0x1a8>)
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fcd3 	bl	8000a94 <__addsf3>
 80020ee:	4603      	mov	r3, r0
 80020f0:	461a      	mov	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	651a      	str	r2, [r3, #80]	; 0x50
		mpu6050->imu.Gx = mpu6050->imu.Gyro_X_RAW / 131.0;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe f981 	bl	8000404 <__aeabi_i2d>
 8002102:	a317      	add	r3, pc, #92	; (adr r3, 8002160 <imu_mpu6050_readAllVTable+0x198>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe fb10 	bl	800072c <__aeabi_ddiv>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		mpu6050->imu.Gy = mpu6050->imu.Gyro_Y_RAW / 131.0;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f971 	bl	8000404 <__aeabi_i2d>
 8002122:	a30f      	add	r3, pc, #60	; (adr r3, 8002160 <imu_mpu6050_readAllVTable+0x198>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fb00 	bl	800072c <__aeabi_ddiv>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		mpu6050->imu.Gz = mpu6050->imu.Gyro_Z_RAW / 131.0;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe f961 	bl	8000404 <__aeabi_i2d>
 8002142:	a307      	add	r3, pc, #28	; (adr r3, 8002160 <imu_mpu6050_readAllVTable+0x198>)
 8002144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002148:	f7fe faf0 	bl	800072c <__aeabi_ddiv>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8002156:	bf00      	nop
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	00000000 	.word	0x00000000
 8002164:	40606000 	.word	0x40606000
 8002168:	40d00000 	.word	0x40d00000
 800216c:	43aa0000 	.word	0x43aa0000
 8002170:	42121eb8 	.word	0x42121eb8

08002174 <BSP_EEPROM_Init>:
imu_mpu6050 imu1;

extern I2C_HandleTypeDef hi2c1;

eeprom_status BSP_EEPROM_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0

	eeprom_at24c_ctor(&eeprom3,  EEPROM_AT24C02C, &hi2c1, 0);
 8002178:	2300      	movs	r3, #0
 800217a:	4a07      	ldr	r2, [pc, #28]	; (8002198 <BSP_EEPROM_Init+0x24>)
 800217c:	2100      	movs	r1, #0
 800217e:	4807      	ldr	r0, [pc, #28]	; (800219c <BSP_EEPROM_Init+0x28>)
 8002180:	f7ff fadc 	bl	800173c <eeprom_at24c_ctor>
	eeprom_ctor(&eeprom2, EEPROM_AT24C02C, &hi2c1, 1);
 8002184:	2301      	movs	r3, #1
 8002186:	4a04      	ldr	r2, [pc, #16]	; (8002198 <BSP_EEPROM_Init+0x24>)
 8002188:	2100      	movs	r1, #0
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <BSP_EEPROM_Init+0x2c>)
 800218c:	f7ff fd1a 	bl	8001bc4 <eeprom_ctor>
	return EEPROM_NO_ERROR;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000280 	.word	0x20000280
 800219c:	200003f8 	.word	0x200003f8
 80021a0:	200003e8 	.word	0x200003e8

080021a4 <BSP_IMU_Init>:

imu_status BSP_IMU_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	return imu_mpu6050_ctor(&imu1, &hi2c1);
 80021a8:	4903      	ldr	r1, [pc, #12]	; (80021b8 <BSP_IMU_Init+0x14>)
 80021aa:	4804      	ldr	r0, [pc, #16]	; (80021bc <BSP_IMU_Init+0x18>)
 80021ac:	f7ff fdcc 	bl	8001d48 <imu_mpu6050_ctor>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000280 	.word	0x20000280
 80021bc:	20000408 	.word	0x20000408

080021c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_Init+0x28>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <HAL_Init+0x28>)
 80021ca:	f043 0310 	orr.w	r3, r3, #16
 80021ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d0:	2003      	movs	r0, #3
 80021d2:	f000 fb51 	bl	8002878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f000 f808 	bl	80021ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021dc:	f7ff fa0a 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40022000 	.word	0x40022000

080021ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_InitTick+0x54>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_InitTick+0x58>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002202:	fbb3 f3f1 	udiv	r3, r3, r1
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fb69 	bl	80028e2 <HAL_SYSTICK_Config>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e00e      	b.n	8002238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b0f      	cmp	r3, #15
 800221e:	d80a      	bhi.n	8002236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002220:	2200      	movs	r2, #0
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	f000 fb31 	bl	800288e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800222c:	4a06      	ldr	r2, [pc, #24]	; (8002248 <HAL_InitTick+0x5c>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e000      	b.n	8002238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	2000000c 	.word	0x2000000c
 8002244:	20000014 	.word	0x20000014
 8002248:	20000010 	.word	0x20000010

0800224c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_IncTick+0x1c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_IncTick+0x20>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4413      	add	r3, r2
 800225c:	4a03      	ldr	r2, [pc, #12]	; (800226c <HAL_IncTick+0x20>)
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000014 	.word	0x20000014
 800226c:	20000478 	.word	0x20000478

08002270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b02      	ldr	r3, [pc, #8]	; (8002280 <HAL_GetTick+0x10>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	20000478 	.word	0x20000478

08002284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800228c:	f7ff fff0 	bl	8002270 <HAL_GetTick>
 8002290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d005      	beq.n	80022aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_Delay+0x44>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022aa:	bf00      	nop
 80022ac:	f7ff ffe0 	bl	8002270 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d8f7      	bhi.n	80022ac <HAL_Delay+0x28>
  {
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000014 	.word	0x20000014

080022cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e0be      	b.n	800246c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fede 	bl	80010cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f9ab 	bl	800266c <ADC_ConversionStop_Disable>
 8002316:	4603      	mov	r3, r0
 8002318:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 8099 	bne.w	800245a <HAL_ADC_Init+0x18e>
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 8095 	bne.w	800245a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002338:	f023 0302 	bic.w	r3, r3, #2
 800233c:	f043 0202 	orr.w	r2, r3, #2
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800234c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7b1b      	ldrb	r3, [r3, #12]
 8002352:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002354:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	4313      	orrs	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002364:	d003      	beq.n	800236e <HAL_ADC_Init+0xa2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d102      	bne.n	8002374 <HAL_ADC_Init+0xa8>
 800236e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002372:	e000      	b.n	8002376 <HAL_ADC_Init+0xaa>
 8002374:	2300      	movs	r3, #0
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7d1b      	ldrb	r3, [r3, #20]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d119      	bne.n	80023b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	7b1b      	ldrb	r3, [r3, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	3b01      	subs	r3, #1
 8002392:	035a      	lsls	r2, r3, #13
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	e00b      	b.n	80023b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	f043 0220 	orr.w	r2, r3, #32
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	4b28      	ldr	r3, [pc, #160]	; (8002474 <HAL_ADC_Init+0x1a8>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	430b      	orrs	r3, r1
 80023de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e8:	d003      	beq.n	80023f2 <HAL_ADC_Init+0x126>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d104      	bne.n	80023fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	051b      	lsls	r3, r3, #20
 80023fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	430a      	orrs	r2, r1
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_ADC_Init+0x1ac>)
 8002418:	4013      	ands	r3, r2
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	429a      	cmp	r2, r3
 800241e:	d10b      	bne.n	8002438 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002436:	e018      	b.n	800246a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243c:	f023 0312 	bic.w	r3, r3, #18
 8002440:	f043 0210 	orr.w	r2, r3, #16
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002458:	e007      	b.n	800246a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	f043 0210 	orr.w	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800246a:	7dfb      	ldrb	r3, [r7, #23]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	ffe1f7fd 	.word	0xffe1f7fd
 8002478:	ff1f0efe 	.word	0xff1f0efe

0800247c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x20>
 8002498:	2302      	movs	r3, #2
 800249a:	e0dc      	b.n	8002656 <HAL_ADC_ConfigChannel+0x1da>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b06      	cmp	r3, #6
 80024aa:	d81c      	bhi.n	80024e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	3b05      	subs	r3, #5
 80024be:	221f      	movs	r2, #31
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	4019      	ands	r1, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	3b05      	subs	r3, #5
 80024d8:	fa00 f203 	lsl.w	r2, r0, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	635a      	str	r2, [r3, #52]	; 0x34
 80024e4:	e03c      	b.n	8002560 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d81c      	bhi.n	8002528 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	3b23      	subs	r3, #35	; 0x23
 8002500:	221f      	movs	r2, #31
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	4019      	ands	r1, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	3b23      	subs	r3, #35	; 0x23
 800251a:	fa00 f203 	lsl.w	r2, r0, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
 8002526:	e01b      	b.n	8002560 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b41      	subs	r3, #65	; 0x41
 800253a:	221f      	movs	r2, #31
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	4019      	ands	r1, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	3b41      	subs	r3, #65	; 0x41
 8002554:	fa00 f203 	lsl.w	r2, r0, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b09      	cmp	r3, #9
 8002566:	d91c      	bls.n	80025a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68d9      	ldr	r1, [r3, #12]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	3b1e      	subs	r3, #30
 800257a:	2207      	movs	r2, #7
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	4019      	ands	r1, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6898      	ldr	r0, [r3, #8]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	3b1e      	subs	r3, #30
 8002594:	fa00 f203 	lsl.w	r2, r0, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	60da      	str	r2, [r3, #12]
 80025a0:	e019      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6919      	ldr	r1, [r3, #16]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	2207      	movs	r2, #7
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	4019      	ands	r1, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6898      	ldr	r0, [r3, #8]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	fa00 f203 	lsl.w	r2, r0, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d003      	beq.n	80025e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025e2:	2b11      	cmp	r3, #17
 80025e4:	d132      	bne.n	800264c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1d      	ldr	r2, [pc, #116]	; (8002660 <HAL_ADC_ConfigChannel+0x1e4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d125      	bne.n	800263c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d126      	bne.n	800264c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800260c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b10      	cmp	r3, #16
 8002614:	d11a      	bne.n	800264c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002616:	4b13      	ldr	r3, [pc, #76]	; (8002664 <HAL_ADC_ConfigChannel+0x1e8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a13      	ldr	r2, [pc, #76]	; (8002668 <HAL_ADC_ConfigChannel+0x1ec>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	0c9a      	lsrs	r2, r3, #18
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800262c:	e002      	b.n	8002634 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	3b01      	subs	r3, #1
 8002632:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f9      	bne.n	800262e <HAL_ADC_ConfigChannel+0x1b2>
 800263a:	e007      	b.n	800264c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	f043 0220 	orr.w	r2, r3, #32
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	40012400 	.word	0x40012400
 8002664:	2000000c 	.word	0x2000000c
 8002668:	431bde83 	.word	0x431bde83

0800266c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d127      	bne.n	80026d6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002696:	f7ff fdeb 	bl	8002270 <HAL_GetTick>
 800269a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800269c:	e014      	b.n	80026c8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800269e:	f7ff fde7 	bl	8002270 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d90d      	bls.n	80026c8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	f043 0210 	orr.w	r2, r3, #16
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e007      	b.n	80026d8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d0e3      	beq.n	800269e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800270c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002712:	4a04      	ldr	r2, [pc, #16]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	60d3      	str	r3, [r2, #12]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <__NVIC_GetPriorityGrouping+0x18>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	f003 0307 	and.w	r3, r3, #7
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	db0b      	blt.n	800276e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	f003 021f 	and.w	r2, r3, #31
 800275c:	4906      	ldr	r1, [pc, #24]	; (8002778 <__NVIC_EnableIRQ+0x34>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2001      	movs	r0, #1
 8002766:	fa00 f202 	lsl.w	r2, r0, r2
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	e000e100 	.word	0xe000e100

0800277c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278c:	2b00      	cmp	r3, #0
 800278e:	db0a      	blt.n	80027a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	490c      	ldr	r1, [pc, #48]	; (80027c8 <__NVIC_SetPriority+0x4c>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	0112      	lsls	r2, r2, #4
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	440b      	add	r3, r1
 80027a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a4:	e00a      	b.n	80027bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4908      	ldr	r1, [pc, #32]	; (80027cc <__NVIC_SetPriority+0x50>)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	3b04      	subs	r3, #4
 80027b4:	0112      	lsls	r2, r2, #4
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	440b      	add	r3, r1
 80027ba:	761a      	strb	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f1c3 0307 	rsb	r3, r3, #7
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	bf28      	it	cs
 80027ee:	2304      	movcs	r3, #4
 80027f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d902      	bls.n	8002800 <NVIC_EncodePriority+0x30>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3b03      	subs	r3, #3
 80027fe:	e000      	b.n	8002802 <NVIC_EncodePriority+0x32>
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	401a      	ands	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002818:	f04f 31ff 	mov.w	r1, #4294967295
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43d9      	mvns	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	4313      	orrs	r3, r2
         );
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002844:	d301      	bcc.n	800284a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002846:	2301      	movs	r3, #1
 8002848:	e00f      	b.n	800286a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <SysTick_Config+0x40>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002852:	210f      	movs	r1, #15
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	f7ff ff90 	bl	800277c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <SysTick_Config+0x40>)
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <SysTick_Config+0x40>)
 8002864:	2207      	movs	r2, #7
 8002866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	e000e010 	.word	0xe000e010

08002878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff2d 	bl	80026e0 <__NVIC_SetPriorityGrouping>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800288e:	b580      	push	{r7, lr}
 8002890:	b086      	sub	sp, #24
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a0:	f7ff ff42 	bl	8002728 <__NVIC_GetPriorityGrouping>
 80028a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	6978      	ldr	r0, [r7, #20]
 80028ac:	f7ff ff90 	bl	80027d0 <NVIC_EncodePriority>
 80028b0:	4602      	mov	r2, r0
 80028b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff5f 	bl	800277c <__NVIC_SetPriority>
}
 80028be:	bf00      	nop
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff35 	bl	8002744 <__NVIC_EnableIRQ>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ffa2 	bl	8002834 <SysTick_Config>
 80028f0:	4603      	mov	r3, r0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e043      	b.n	800299a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <HAL_DMA_Init+0xa8>)
 800291a:	4413      	add	r3, r2
 800291c:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <HAL_DMA_Init+0xac>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	009a      	lsls	r2, r3, #2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1f      	ldr	r2, [pc, #124]	; (80029ac <HAL_DMA_Init+0xb0>)
 800292e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002946:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800294a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002954:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002960:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	bffdfff8 	.word	0xbffdfff8
 80029a8:	cccccccd 	.word	0xcccccccd
 80029ac:	40020000 	.word	0x40020000

080029b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	2204      	movs	r2, #4
 80029ce:	409a      	lsls	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d04f      	beq.n	8002a78 <HAL_DMA_IRQHandler+0xc8>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d04a      	beq.n	8002a78 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d107      	bne.n	8002a00 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0204 	bic.w	r2, r2, #4
 80029fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a66      	ldr	r2, [pc, #408]	; (8002ba0 <HAL_DMA_IRQHandler+0x1f0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d029      	beq.n	8002a5e <HAL_DMA_IRQHandler+0xae>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a65      	ldr	r2, [pc, #404]	; (8002ba4 <HAL_DMA_IRQHandler+0x1f4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d022      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xaa>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a63      	ldr	r2, [pc, #396]	; (8002ba8 <HAL_DMA_IRQHandler+0x1f8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d01a      	beq.n	8002a54 <HAL_DMA_IRQHandler+0xa4>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a62      	ldr	r2, [pc, #392]	; (8002bac <HAL_DMA_IRQHandler+0x1fc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d012      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x9e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a60      	ldr	r2, [pc, #384]	; (8002bb0 <HAL_DMA_IRQHandler+0x200>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00a      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x98>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a5f      	ldr	r2, [pc, #380]	; (8002bb4 <HAL_DMA_IRQHandler+0x204>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d102      	bne.n	8002a42 <HAL_DMA_IRQHandler+0x92>
 8002a3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a40:	e00e      	b.n	8002a60 <HAL_DMA_IRQHandler+0xb0>
 8002a42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a46:	e00b      	b.n	8002a60 <HAL_DMA_IRQHandler+0xb0>
 8002a48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a4c:	e008      	b.n	8002a60 <HAL_DMA_IRQHandler+0xb0>
 8002a4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a52:	e005      	b.n	8002a60 <HAL_DMA_IRQHandler+0xb0>
 8002a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a58:	e002      	b.n	8002a60 <HAL_DMA_IRQHandler+0xb0>
 8002a5a:	2340      	movs	r3, #64	; 0x40
 8002a5c:	e000      	b.n	8002a60 <HAL_DMA_IRQHandler+0xb0>
 8002a5e:	2304      	movs	r3, #4
 8002a60:	4a55      	ldr	r2, [pc, #340]	; (8002bb8 <HAL_DMA_IRQHandler+0x208>)
 8002a62:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8094 	beq.w	8002b96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a76:	e08e      	b.n	8002b96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d056      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x186>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d051      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 020a 	bic.w	r2, r2, #10
 8002aae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a38      	ldr	r2, [pc, #224]	; (8002ba0 <HAL_DMA_IRQHandler+0x1f0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d029      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x166>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a37      	ldr	r2, [pc, #220]	; (8002ba4 <HAL_DMA_IRQHandler+0x1f4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d022      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x162>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a35      	ldr	r2, [pc, #212]	; (8002ba8 <HAL_DMA_IRQHandler+0x1f8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01a      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x15c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a34      	ldr	r2, [pc, #208]	; (8002bac <HAL_DMA_IRQHandler+0x1fc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d012      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x156>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a32      	ldr	r2, [pc, #200]	; (8002bb0 <HAL_DMA_IRQHandler+0x200>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00a      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x150>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a31      	ldr	r2, [pc, #196]	; (8002bb4 <HAL_DMA_IRQHandler+0x204>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d102      	bne.n	8002afa <HAL_DMA_IRQHandler+0x14a>
 8002af4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002af8:	e00e      	b.n	8002b18 <HAL_DMA_IRQHandler+0x168>
 8002afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002afe:	e00b      	b.n	8002b18 <HAL_DMA_IRQHandler+0x168>
 8002b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b04:	e008      	b.n	8002b18 <HAL_DMA_IRQHandler+0x168>
 8002b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b0a:	e005      	b.n	8002b18 <HAL_DMA_IRQHandler+0x168>
 8002b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b10:	e002      	b.n	8002b18 <HAL_DMA_IRQHandler+0x168>
 8002b12:	2320      	movs	r3, #32
 8002b14:	e000      	b.n	8002b18 <HAL_DMA_IRQHandler+0x168>
 8002b16:	2302      	movs	r3, #2
 8002b18:	4a27      	ldr	r2, [pc, #156]	; (8002bb8 <HAL_DMA_IRQHandler+0x208>)
 8002b1a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d034      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b34:	e02f      	b.n	8002b96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d028      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x1e8>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d023      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 020e 	bic.w	r2, r2, #14
 8002b5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d004      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	4798      	blx	r3
    }
  }
  return;
 8002b96:	bf00      	nop
 8002b98:	bf00      	nop
}
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40020008 	.word	0x40020008
 8002ba4:	4002001c 	.word	0x4002001c
 8002ba8:	40020030 	.word	0x40020030
 8002bac:	40020044 	.word	0x40020044
 8002bb0:	40020058 	.word	0x40020058
 8002bb4:	4002006c 	.word	0x4002006c
 8002bb8:	40020000 	.word	0x40020000

08002bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b08b      	sub	sp, #44	; 0x2c
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bce:	e169      	b.n	8002ea4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	f040 8158 	bne.w	8002e9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4a9a      	ldr	r2, [pc, #616]	; (8002e5c <HAL_GPIO_Init+0x2a0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d05e      	beq.n	8002cb6 <HAL_GPIO_Init+0xfa>
 8002bf8:	4a98      	ldr	r2, [pc, #608]	; (8002e5c <HAL_GPIO_Init+0x2a0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d875      	bhi.n	8002cea <HAL_GPIO_Init+0x12e>
 8002bfe:	4a98      	ldr	r2, [pc, #608]	; (8002e60 <HAL_GPIO_Init+0x2a4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d058      	beq.n	8002cb6 <HAL_GPIO_Init+0xfa>
 8002c04:	4a96      	ldr	r2, [pc, #600]	; (8002e60 <HAL_GPIO_Init+0x2a4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d86f      	bhi.n	8002cea <HAL_GPIO_Init+0x12e>
 8002c0a:	4a96      	ldr	r2, [pc, #600]	; (8002e64 <HAL_GPIO_Init+0x2a8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d052      	beq.n	8002cb6 <HAL_GPIO_Init+0xfa>
 8002c10:	4a94      	ldr	r2, [pc, #592]	; (8002e64 <HAL_GPIO_Init+0x2a8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d869      	bhi.n	8002cea <HAL_GPIO_Init+0x12e>
 8002c16:	4a94      	ldr	r2, [pc, #592]	; (8002e68 <HAL_GPIO_Init+0x2ac>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d04c      	beq.n	8002cb6 <HAL_GPIO_Init+0xfa>
 8002c1c:	4a92      	ldr	r2, [pc, #584]	; (8002e68 <HAL_GPIO_Init+0x2ac>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d863      	bhi.n	8002cea <HAL_GPIO_Init+0x12e>
 8002c22:	4a92      	ldr	r2, [pc, #584]	; (8002e6c <HAL_GPIO_Init+0x2b0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d046      	beq.n	8002cb6 <HAL_GPIO_Init+0xfa>
 8002c28:	4a90      	ldr	r2, [pc, #576]	; (8002e6c <HAL_GPIO_Init+0x2b0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d85d      	bhi.n	8002cea <HAL_GPIO_Init+0x12e>
 8002c2e:	2b12      	cmp	r3, #18
 8002c30:	d82a      	bhi.n	8002c88 <HAL_GPIO_Init+0xcc>
 8002c32:	2b12      	cmp	r3, #18
 8002c34:	d859      	bhi.n	8002cea <HAL_GPIO_Init+0x12e>
 8002c36:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <HAL_GPIO_Init+0x80>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002cb7 	.word	0x08002cb7
 8002c40:	08002c91 	.word	0x08002c91
 8002c44:	08002ca3 	.word	0x08002ca3
 8002c48:	08002ce5 	.word	0x08002ce5
 8002c4c:	08002ceb 	.word	0x08002ceb
 8002c50:	08002ceb 	.word	0x08002ceb
 8002c54:	08002ceb 	.word	0x08002ceb
 8002c58:	08002ceb 	.word	0x08002ceb
 8002c5c:	08002ceb 	.word	0x08002ceb
 8002c60:	08002ceb 	.word	0x08002ceb
 8002c64:	08002ceb 	.word	0x08002ceb
 8002c68:	08002ceb 	.word	0x08002ceb
 8002c6c:	08002ceb 	.word	0x08002ceb
 8002c70:	08002ceb 	.word	0x08002ceb
 8002c74:	08002ceb 	.word	0x08002ceb
 8002c78:	08002ceb 	.word	0x08002ceb
 8002c7c:	08002ceb 	.word	0x08002ceb
 8002c80:	08002c99 	.word	0x08002c99
 8002c84:	08002cad 	.word	0x08002cad
 8002c88:	4a79      	ldr	r2, [pc, #484]	; (8002e70 <HAL_GPIO_Init+0x2b4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c8e:	e02c      	b.n	8002cea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	623b      	str	r3, [r7, #32]
          break;
 8002c96:	e029      	b.n	8002cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	623b      	str	r3, [r7, #32]
          break;
 8002ca0:	e024      	b.n	8002cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	623b      	str	r3, [r7, #32]
          break;
 8002caa:	e01f      	b.n	8002cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	330c      	adds	r3, #12
 8002cb2:	623b      	str	r3, [r7, #32]
          break;
 8002cb4:	e01a      	b.n	8002cec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	623b      	str	r3, [r7, #32]
          break;
 8002cc2:	e013      	b.n	8002cec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ccc:	2308      	movs	r3, #8
 8002cce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	611a      	str	r2, [r3, #16]
          break;
 8002cd6:	e009      	b.n	8002cec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cd8:	2308      	movs	r3, #8
 8002cda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	615a      	str	r2, [r3, #20]
          break;
 8002ce2:	e003      	b.n	8002cec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	623b      	str	r3, [r7, #32]
          break;
 8002ce8:	e000      	b.n	8002cec <HAL_GPIO_Init+0x130>
          break;
 8002cea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2bff      	cmp	r3, #255	; 0xff
 8002cf0:	d801      	bhi.n	8002cf6 <HAL_GPIO_Init+0x13a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	e001      	b.n	8002cfa <HAL_GPIO_Init+0x13e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2bff      	cmp	r3, #255	; 0xff
 8002d00:	d802      	bhi.n	8002d08 <HAL_GPIO_Init+0x14c>
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	e002      	b.n	8002d0e <HAL_GPIO_Init+0x152>
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	3b08      	subs	r3, #8
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	210f      	movs	r1, #15
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	401a      	ands	r2, r3
 8002d20:	6a39      	ldr	r1, [r7, #32]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	fa01 f303 	lsl.w	r3, r1, r3
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80b1 	beq.w	8002e9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d3c:	4b4d      	ldr	r3, [pc, #308]	; (8002e74 <HAL_GPIO_Init+0x2b8>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <HAL_GPIO_Init+0x2b8>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6193      	str	r3, [r2, #24]
 8002d48:	4b4a      	ldr	r3, [pc, #296]	; (8002e74 <HAL_GPIO_Init+0x2b8>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d54:	4a48      	ldr	r2, [pc, #288]	; (8002e78 <HAL_GPIO_Init+0x2bc>)
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	089b      	lsrs	r3, r3, #2
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	220f      	movs	r2, #15
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4013      	ands	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a40      	ldr	r2, [pc, #256]	; (8002e7c <HAL_GPIO_Init+0x2c0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d013      	beq.n	8002da8 <HAL_GPIO_Init+0x1ec>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a3f      	ldr	r2, [pc, #252]	; (8002e80 <HAL_GPIO_Init+0x2c4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00d      	beq.n	8002da4 <HAL_GPIO_Init+0x1e8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a3e      	ldr	r2, [pc, #248]	; (8002e84 <HAL_GPIO_Init+0x2c8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d007      	beq.n	8002da0 <HAL_GPIO_Init+0x1e4>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a3d      	ldr	r2, [pc, #244]	; (8002e88 <HAL_GPIO_Init+0x2cc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d101      	bne.n	8002d9c <HAL_GPIO_Init+0x1e0>
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e006      	b.n	8002daa <HAL_GPIO_Init+0x1ee>
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	e004      	b.n	8002daa <HAL_GPIO_Init+0x1ee>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e002      	b.n	8002daa <HAL_GPIO_Init+0x1ee>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_GPIO_Init+0x1ee>
 8002da8:	2300      	movs	r3, #0
 8002daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dac:	f002 0203 	and.w	r2, r2, #3
 8002db0:	0092      	lsls	r2, r2, #2
 8002db2:	4093      	lsls	r3, r2
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dba:	492f      	ldr	r1, [pc, #188]	; (8002e78 <HAL_GPIO_Init+0x2bc>)
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	492c      	ldr	r1, [pc, #176]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	600b      	str	r3, [r1, #0]
 8002de0:	e006      	b.n	8002df0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002de2:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	4928      	ldr	r1, [pc, #160]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d006      	beq.n	8002e0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dfc:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	4922      	ldr	r1, [pc, #136]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
 8002e08:	e006      	b.n	8002e18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	491e      	ldr	r1, [pc, #120]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d006      	beq.n	8002e32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	4918      	ldr	r1, [pc, #96]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	608b      	str	r3, [r1, #8]
 8002e30:	e006      	b.n	8002e40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e32:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	4914      	ldr	r1, [pc, #80]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d021      	beq.n	8002e90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	490e      	ldr	r1, [pc, #56]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60cb      	str	r3, [r1, #12]
 8002e58:	e021      	b.n	8002e9e <HAL_GPIO_Init+0x2e2>
 8002e5a:	bf00      	nop
 8002e5c:	10320000 	.word	0x10320000
 8002e60:	10310000 	.word	0x10310000
 8002e64:	10220000 	.word	0x10220000
 8002e68:	10210000 	.word	0x10210000
 8002e6c:	10120000 	.word	0x10120000
 8002e70:	10110000 	.word	0x10110000
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40010000 	.word	0x40010000
 8002e7c:	40010800 	.word	0x40010800
 8002e80:	40010c00 	.word	0x40010c00
 8002e84:	40011000 	.word	0x40011000
 8002e88:	40011400 	.word	0x40011400
 8002e8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_GPIO_Init+0x304>)
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	4909      	ldr	r1, [pc, #36]	; (8002ec0 <HAL_GPIO_Init+0x304>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f47f ae8e 	bne.w	8002bd0 <HAL_GPIO_Init+0x14>
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	372c      	adds	r7, #44	; 0x2c
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	40010400 	.word	0x40010400

08002ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	807b      	strh	r3, [r7, #2]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ed4:	787b      	ldrb	r3, [r7, #1]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eda:	887a      	ldrh	r2, [r7, #2]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ee0:	e003      	b.n	8002eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ee2:	887b      	ldrh	r3, [r7, #2]
 8002ee4:	041a      	lsls	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	611a      	str	r2, [r3, #16]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	041a      	lsls	r2, r3, #16
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	43d9      	mvns	r1, r3
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	400b      	ands	r3, r1
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	611a      	str	r2, [r3, #16]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e12b      	b.n	8003192 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe f9d8 	bl	8001304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2224      	movs	r2, #36	; 0x24
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f8c:	f002 ff1a 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 8002f90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4a81      	ldr	r2, [pc, #516]	; (800319c <HAL_I2C_Init+0x274>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d807      	bhi.n	8002fac <HAL_I2C_Init+0x84>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4a80      	ldr	r2, [pc, #512]	; (80031a0 <HAL_I2C_Init+0x278>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	bf94      	ite	ls
 8002fa4:	2301      	movls	r3, #1
 8002fa6:	2300      	movhi	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e006      	b.n	8002fba <HAL_I2C_Init+0x92>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4a7d      	ldr	r2, [pc, #500]	; (80031a4 <HAL_I2C_Init+0x27c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	bf94      	ite	ls
 8002fb4:	2301      	movls	r3, #1
 8002fb6:	2300      	movhi	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e0e7      	b.n	8003192 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4a78      	ldr	r2, [pc, #480]	; (80031a8 <HAL_I2C_Init+0x280>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	0c9b      	lsrs	r3, r3, #18
 8002fcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4a6a      	ldr	r2, [pc, #424]	; (800319c <HAL_I2C_Init+0x274>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d802      	bhi.n	8002ffc <HAL_I2C_Init+0xd4>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	e009      	b.n	8003010 <HAL_I2C_Init+0xe8>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	4a69      	ldr	r2, [pc, #420]	; (80031ac <HAL_I2C_Init+0x284>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	099b      	lsrs	r3, r3, #6
 800300e:	3301      	adds	r3, #1
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	430b      	orrs	r3, r1
 8003016:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003022:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	495c      	ldr	r1, [pc, #368]	; (800319c <HAL_I2C_Init+0x274>)
 800302c:	428b      	cmp	r3, r1
 800302e:	d819      	bhi.n	8003064 <HAL_I2C_Init+0x13c>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1e59      	subs	r1, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fbb1 f3f3 	udiv	r3, r1, r3
 800303e:	1c59      	adds	r1, r3, #1
 8003040:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003044:	400b      	ands	r3, r1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <HAL_I2C_Init+0x138>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1e59      	subs	r1, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fbb1 f3f3 	udiv	r3, r1, r3
 8003058:	3301      	adds	r3, #1
 800305a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305e:	e051      	b.n	8003104 <HAL_I2C_Init+0x1dc>
 8003060:	2304      	movs	r3, #4
 8003062:	e04f      	b.n	8003104 <HAL_I2C_Init+0x1dc>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d111      	bne.n	8003090 <HAL_I2C_Init+0x168>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1e58      	subs	r0, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	440b      	add	r3, r1
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	e012      	b.n	80030b6 <HAL_I2C_Init+0x18e>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1e58      	subs	r0, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	0099      	lsls	r1, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a6:	3301      	adds	r3, #1
 80030a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_I2C_Init+0x196>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e022      	b.n	8003104 <HAL_I2C_Init+0x1dc>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10e      	bne.n	80030e4 <HAL_I2C_Init+0x1bc>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1e58      	subs	r0, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6859      	ldr	r1, [r3, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	440b      	add	r3, r1
 80030d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e2:	e00f      	b.n	8003104 <HAL_I2C_Init+0x1dc>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1e58      	subs	r0, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	0099      	lsls	r1, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fa:	3301      	adds	r3, #1
 80030fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003100:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	6809      	ldr	r1, [r1, #0]
 8003108:	4313      	orrs	r3, r2
 800310a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003132:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6911      	ldr	r1, [r2, #16]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68d2      	ldr	r2, [r2, #12]
 800313e:	4311      	orrs	r1, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	430b      	orrs	r3, r1
 8003146:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	000186a0 	.word	0x000186a0
 80031a0:	001e847f 	.word	0x001e847f
 80031a4:	003d08ff 	.word	0x003d08ff
 80031a8:	431bde83 	.word	0x431bde83
 80031ac:	10624dd3 	.word	0x10624dd3

080031b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	4608      	mov	r0, r1
 80031ba:	4611      	mov	r1, r2
 80031bc:	461a      	mov	r2, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	817b      	strh	r3, [r7, #10]
 80031c2:	460b      	mov	r3, r1
 80031c4:	813b      	strh	r3, [r7, #8]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031ca:	f7ff f851 	bl	8002270 <HAL_GetTick>
 80031ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b20      	cmp	r3, #32
 80031da:	f040 80d9 	bne.w	8003390 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	2319      	movs	r3, #25
 80031e4:	2201      	movs	r2, #1
 80031e6:	496d      	ldr	r1, [pc, #436]	; (800339c <HAL_I2C_Mem_Write+0x1ec>)
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fcc1 	bl	8003b70 <I2C_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
 80031f6:	e0cc      	b.n	8003392 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_I2C_Mem_Write+0x56>
 8003202:	2302      	movs	r3, #2
 8003204:	e0c5      	b.n	8003392 <HAL_I2C_Mem_Write+0x1e2>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d007      	beq.n	800322c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800323a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2221      	movs	r2, #33	; 0x21
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2240      	movs	r2, #64	; 0x40
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a3a      	ldr	r2, [r7, #32]
 8003256:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800325c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4a4d      	ldr	r2, [pc, #308]	; (80033a0 <HAL_I2C_Mem_Write+0x1f0>)
 800326c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800326e:	88f8      	ldrh	r0, [r7, #6]
 8003270:	893a      	ldrh	r2, [r7, #8]
 8003272:	8979      	ldrh	r1, [r7, #10]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4603      	mov	r3, r0
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 faf8 	bl	8003874 <I2C_RequestMemoryWrite>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d052      	beq.n	8003330 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e081      	b.n	8003392 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fd42 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00d      	beq.n	80032ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d107      	bne.n	80032b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e06b      	b.n	8003392 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	781a      	ldrb	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d11b      	bne.n	8003330 <HAL_I2C_Mem_Write+0x180>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d017      	beq.n	8003330 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1aa      	bne.n	800328e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fd2e 	bl	8003d9e <I2C_WaitOnBTFFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00d      	beq.n	8003364 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	2b04      	cmp	r3, #4
 800334e:	d107      	bne.n	8003360 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e016      	b.n	8003392 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	00100002 	.word	0x00100002
 80033a0:	ffff0000 	.word	0xffff0000

080033a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08c      	sub	sp, #48	; 0x30
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	4608      	mov	r0, r1
 80033ae:	4611      	mov	r1, r2
 80033b0:	461a      	mov	r2, r3
 80033b2:	4603      	mov	r3, r0
 80033b4:	817b      	strh	r3, [r7, #10]
 80033b6:	460b      	mov	r3, r1
 80033b8:	813b      	strh	r3, [r7, #8]
 80033ba:	4613      	mov	r3, r2
 80033bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033c2:	f7fe ff55 	bl	8002270 <HAL_GetTick>
 80033c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	f040 8244 	bne.w	800385e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	2319      	movs	r3, #25
 80033dc:	2201      	movs	r2, #1
 80033de:	4982      	ldr	r1, [pc, #520]	; (80035e8 <HAL_I2C_Mem_Read+0x244>)
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 fbc5 	bl	8003b70 <I2C_WaitOnFlagUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
 80033ee:	e237      	b.n	8003860 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_I2C_Mem_Read+0x5a>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e230      	b.n	8003860 <HAL_I2C_Mem_Read+0x4bc>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d007      	beq.n	8003424 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003432:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2222      	movs	r2, #34	; 0x22
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2240      	movs	r2, #64	; 0x40
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003454:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a62      	ldr	r2, [pc, #392]	; (80035ec <HAL_I2C_Mem_Read+0x248>)
 8003464:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003466:	88f8      	ldrh	r0, [r7, #6]
 8003468:	893a      	ldrh	r2, [r7, #8]
 800346a:	8979      	ldrh	r1, [r7, #10]
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	4603      	mov	r3, r0
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fa92 	bl	80039a0 <I2C_RequestMemoryRead>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e1ec      	b.n	8003860 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	2b00      	cmp	r3, #0
 800348c:	d113      	bne.n	80034b6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	61fb      	str	r3, [r7, #28]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e1c0      	b.n	8003838 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d11e      	bne.n	80034fc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034ce:	b672      	cpsid	i
}
 80034d0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d2:	2300      	movs	r3, #0
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034f8:	b662      	cpsie	i
}
 80034fa:	e035      	b.n	8003568 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003500:	2b02      	cmp	r3, #2
 8003502:	d11e      	bne.n	8003542 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003512:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003514:	b672      	cpsid	i
}
 8003516:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800353e:	b662      	cpsie	i
}
 8003540:	e012      	b.n	8003568 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003550:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003568:	e166      	b.n	8003838 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356e:	2b03      	cmp	r3, #3
 8003570:	f200 811f 	bhi.w	80037b2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	2b01      	cmp	r3, #1
 800357a:	d123      	bne.n	80035c4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 fc4d 	bl	8003e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e167      	b.n	8003860 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035c2:	e139      	b.n	8003838 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d152      	bne.n	8003672 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d2:	2200      	movs	r2, #0
 80035d4:	4906      	ldr	r1, [pc, #24]	; (80035f0 <HAL_I2C_Mem_Read+0x24c>)
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 faca 	bl	8003b70 <I2C_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e13c      	b.n	8003860 <HAL_I2C_Mem_Read+0x4bc>
 80035e6:	bf00      	nop
 80035e8:	00100002 	.word	0x00100002
 80035ec:	ffff0000 	.word	0xffff0000
 80035f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80035f4:	b672      	cpsid	i
}
 80035f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003606:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800363a:	b662      	cpsie	i
}
 800363c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003670:	e0e2      	b.n	8003838 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003678:	2200      	movs	r2, #0
 800367a:	497b      	ldr	r1, [pc, #492]	; (8003868 <HAL_I2C_Mem_Read+0x4c4>)
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fa77 	bl	8003b70 <I2C_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0e9      	b.n	8003860 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800369c:	b672      	cpsid	i
}
 800369e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036d2:	4b66      	ldr	r3, [pc, #408]	; (800386c <HAL_I2C_Mem_Read+0x4c8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	08db      	lsrs	r3, r3, #3
 80036d8:	4a65      	ldr	r2, [pc, #404]	; (8003870 <HAL_I2C_Mem_Read+0x4cc>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	0a1a      	lsrs	r2, r3, #8
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00da      	lsls	r2, r3, #3
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d118      	bne.n	800372a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f043 0220 	orr.w	r2, r3, #32
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800371a:	b662      	cpsie	i
}
 800371c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e09a      	b.n	8003860 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b04      	cmp	r3, #4
 8003736:	d1d9      	bne.n	80036ec <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800377a:	b662      	cpsie	i
}
 800377c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037b0:	e042      	b.n	8003838 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 fb32 	bl	8003e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e04c      	b.n	8003860 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b04      	cmp	r3, #4
 8003804:	d118      	bne.n	8003838 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	f47f ae94 	bne.w	800356a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	e000      	b.n	8003860 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800385e:	2302      	movs	r3, #2
  }
}
 8003860:	4618      	mov	r0, r3
 8003862:	3728      	adds	r7, #40	; 0x28
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	00010004 	.word	0x00010004
 800386c:	2000000c 	.word	0x2000000c
 8003870:	14f8b589 	.word	0x14f8b589

08003874 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	4608      	mov	r0, r1
 800387e:	4611      	mov	r1, r2
 8003880:	461a      	mov	r2, r3
 8003882:	4603      	mov	r3, r0
 8003884:	817b      	strh	r3, [r7, #10]
 8003886:	460b      	mov	r3, r1
 8003888:	813b      	strh	r3, [r7, #8]
 800388a:	4613      	mov	r3, r2
 800388c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800389c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f960 	bl	8003b70 <I2C_WaitOnFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00d      	beq.n	80038d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c4:	d103      	bne.n	80038ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e05f      	b.n	8003992 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038d2:	897b      	ldrh	r3, [r7, #10]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	492d      	ldr	r1, [pc, #180]	; (800399c <I2C_RequestMemoryWrite+0x128>)
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f998 	bl	8003c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e04c      	b.n	8003992 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	6a39      	ldr	r1, [r7, #32]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fa02 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2b04      	cmp	r3, #4
 8003924:	d107      	bne.n	8003936 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003934:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e02b      	b.n	8003992 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003940:	893b      	ldrh	r3, [r7, #8]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	611a      	str	r2, [r3, #16]
 800394a:	e021      	b.n	8003990 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800394c:	893b      	ldrh	r3, [r7, #8]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	b29b      	uxth	r3, r3
 8003952:	b2da      	uxtb	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395c:	6a39      	ldr	r1, [r7, #32]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f9dc 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00d      	beq.n	8003986 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2b04      	cmp	r3, #4
 8003970:	d107      	bne.n	8003982 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003980:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e005      	b.n	8003992 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003986:	893b      	ldrh	r3, [r7, #8]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	00010002 	.word	0x00010002

080039a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	817b      	strh	r3, [r7, #10]
 80039b2:	460b      	mov	r3, r1
 80039b4:	813b      	strh	r3, [r7, #8]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f8c2 	bl	8003b70 <I2C_WaitOnFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00d      	beq.n	8003a0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a00:	d103      	bne.n	8003a0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e0aa      	b.n	8003b64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a0e:	897b      	ldrh	r3, [r7, #10]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	6a3a      	ldr	r2, [r7, #32]
 8003a22:	4952      	ldr	r1, [pc, #328]	; (8003b6c <I2C_RequestMemoryRead+0x1cc>)
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f8fa 	bl	8003c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e097      	b.n	8003b64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	6a39      	ldr	r1, [r7, #32]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f964 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00d      	beq.n	8003a76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d107      	bne.n	8003a72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e076      	b.n	8003b64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d105      	bne.n	8003a88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a7c:	893b      	ldrh	r3, [r7, #8]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	611a      	str	r2, [r3, #16]
 8003a86:	e021      	b.n	8003acc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a88:	893b      	ldrh	r3, [r7, #8]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	6a39      	ldr	r1, [r7, #32]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f93e 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00d      	beq.n	8003ac2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d107      	bne.n	8003abe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e050      	b.n	8003b64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac2:	893b      	ldrh	r3, [r7, #8]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ace:	6a39      	ldr	r1, [r7, #32]
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f923 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00d      	beq.n	8003af8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d107      	bne.n	8003af4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e035      	b.n	8003b64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f82b 	bl	8003b70 <I2C_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00d      	beq.n	8003b3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b2e:	d103      	bne.n	8003b38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e013      	b.n	8003b64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b3c:	897b      	ldrh	r3, [r7, #10]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	6a3a      	ldr	r2, [r7, #32]
 8003b50:	4906      	ldr	r1, [pc, #24]	; (8003b6c <I2C_RequestMemoryRead+0x1cc>)
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f863 	bl	8003c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	00010002 	.word	0x00010002

08003b70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b80:	e025      	b.n	8003bce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d021      	beq.n	8003bce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8a:	f7fe fb71 	bl	8002270 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d302      	bcc.n	8003ba0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d116      	bne.n	8003bce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f043 0220 	orr.w	r2, r3, #32
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e023      	b.n	8003c16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	0c1b      	lsrs	r3, r3, #16
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d10d      	bne.n	8003bf4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	43da      	mvns	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4013      	ands	r3, r2
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	e00c      	b.n	8003c0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	43da      	mvns	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	bf0c      	ite	eq
 8003c06:	2301      	moveq	r3, #1
 8003c08:	2300      	movne	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d0b6      	beq.n	8003b82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
 8003c2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c2c:	e051      	b.n	8003cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3c:	d123      	bne.n	8003c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f043 0204 	orr.w	r2, r3, #4
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e046      	b.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8c:	d021      	beq.n	8003cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8e:	f7fe faef 	bl	8002270 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d302      	bcc.n	8003ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d116      	bne.n	8003cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f043 0220 	orr.w	r2, r3, #32
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e020      	b.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	0c1b      	lsrs	r3, r3, #16
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d10c      	bne.n	8003cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf14      	ite	ne
 8003cee:	2301      	movne	r3, #1
 8003cf0:	2300      	moveq	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	e00b      	b.n	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	43da      	mvns	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4013      	ands	r3, r2
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d18d      	bne.n	8003c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d28:	e02d      	b.n	8003d86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f8ce 	bl	8003ecc <I2C_IsAcknowledgeFailed>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e02d      	b.n	8003d96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d021      	beq.n	8003d86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d42:	f7fe fa95 	bl	8002270 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d302      	bcc.n	8003d58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d116      	bne.n	8003d86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f043 0220 	orr.w	r2, r3, #32
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e007      	b.n	8003d96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d1ca      	bne.n	8003d2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003daa:	e02d      	b.n	8003e08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f88d 	bl	8003ecc <I2C_IsAcknowledgeFailed>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e02d      	b.n	8003e18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc2:	d021      	beq.n	8003e08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc4:	f7fe fa54 	bl	8002270 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d302      	bcc.n	8003dda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d116      	bne.n	8003e08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f043 0220 	orr.w	r2, r3, #32
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e007      	b.n	8003e18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d1ca      	bne.n	8003dac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e2c:	e042      	b.n	8003eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d119      	bne.n	8003e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0210 	mvn.w	r2, #16
 8003e44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e029      	b.n	8003ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e70:	f7fe f9fe 	bl	8002270 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d302      	bcc.n	8003e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d116      	bne.n	8003eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	f043 0220 	orr.w	r2, r3, #32
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e007      	b.n	8003ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b40      	cmp	r3, #64	; 0x40
 8003ec0:	d1b5      	bne.n	8003e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee2:	d11b      	bne.n	8003f1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f043 0204 	orr.w	r2, r3, #4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2a:	b08b      	sub	sp, #44	; 0x2c
 8003f2c:	af06      	add	r7, sp, #24
 8003f2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e0fd      	b.n	8004136 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f005 fc1c 	bl	800978c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2203      	movs	r2, #3
 8003f58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f002 f83d 	bl	8005fe0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	687e      	ldr	r6, [r7, #4]
 8003f6e:	466d      	mov	r5, sp
 8003f70:	f106 0410 	add.w	r4, r6, #16
 8003f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	602b      	str	r3, [r5, #0]
 8003f7c:	1d33      	adds	r3, r6, #4
 8003f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f80:	6838      	ldr	r0, [r7, #0]
 8003f82:	f002 f807 	bl	8005f94 <USB_CoreInit>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0ce      	b.n	8004136 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f002 f838 	bl	8006014 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	73fb      	strb	r3, [r7, #15]
 8003fa8:	e04c      	b.n	8004044 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	440b      	add	r3, r1
 8003fba:	3301      	adds	r3, #1
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	440b      	add	r3, r1
 8003fd0:	7bfa      	ldrb	r2, [r7, #15]
 8003fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	b298      	uxth	r0, r3
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	440b      	add	r3, r1
 8003fe6:	3336      	adds	r3, #54	; 0x36
 8003fe8:	4602      	mov	r2, r0
 8003fea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3303      	adds	r3, #3
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004002:	7bfa      	ldrb	r2, [r7, #15]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	440b      	add	r3, r1
 8004010:	3338      	adds	r3, #56	; 0x38
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004016:	7bfa      	ldrb	r2, [r7, #15]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	440b      	add	r3, r1
 8004024:	333c      	adds	r3, #60	; 0x3c
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800402a:	7bfa      	ldrb	r2, [r7, #15]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	440b      	add	r3, r1
 8004038:	3340      	adds	r3, #64	; 0x40
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	3301      	adds	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
 8004044:	7bfa      	ldrb	r2, [r7, #15]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	429a      	cmp	r2, r3
 800404c:	d3ad      	bcc.n	8003faa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800404e:	2300      	movs	r3, #0
 8004050:	73fb      	strb	r3, [r7, #15]
 8004052:	e044      	b.n	80040de <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	440b      	add	r3, r1
 8004062:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004066:	2200      	movs	r2, #0
 8004068:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	440b      	add	r3, r1
 8004078:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800407c:	7bfa      	ldrb	r2, [r7, #15]
 800407e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004080:	7bfa      	ldrb	r2, [r7, #15]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	440b      	add	r3, r1
 800408e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004092:	2200      	movs	r2, #0
 8004094:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004096:	7bfa      	ldrb	r2, [r7, #15]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	440b      	add	r3, r1
 80040a4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040ac:	7bfa      	ldrb	r2, [r7, #15]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	440b      	add	r3, r1
 80040ba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040c2:	7bfa      	ldrb	r2, [r7, #15]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	440b      	add	r3, r1
 80040d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	3301      	adds	r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
 80040de:	7bfa      	ldrb	r2, [r7, #15]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d3b5      	bcc.n	8004054 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	603b      	str	r3, [r7, #0]
 80040ee:	687e      	ldr	r6, [r7, #4]
 80040f0:	466d      	mov	r5, sp
 80040f2:	f106 0410 	add.w	r4, r6, #16
 80040f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	602b      	str	r3, [r5, #0]
 80040fe:	1d33      	adds	r3, r6, #4
 8004100:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004102:	6838      	ldr	r0, [r7, #0]
 8004104:	f001 ff92 	bl	800602c <USB_DevInit>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e00d      	b.n	8004136 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f003 ff2c 	bl	8007f8c <USB_DevDisconnect>

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800413e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_PCD_Start+0x16>
 8004150:	2302      	movs	r3, #2
 8004152:	e016      	b.n	8004182 <HAL_PCD_Start+0x44>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f001 ff27 	bl	8005fb4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004166:	2101      	movs	r1, #1
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f005 fd66 	bl	8009c3a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f003 ff00 	bl	8007f78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b088      	sub	sp, #32
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f003 ff02 	bl	8007fa0 <USB_ReadInterrupts>
 800419c:	4603      	mov	r3, r0
 800419e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a6:	d102      	bne.n	80041ae <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fb4a 	bl	8004842 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f003 fef4 	bl	8007fa0 <USB_ReadInterrupts>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c2:	d112      	bne.n	80041ea <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d6:	b292      	uxth	r2, r2
 80041d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f005 fb58 	bl	8009892 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80041e2:	2100      	movs	r1, #0
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f925 	bl	8004434 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f003 fed6 	bl	8007fa0 <USB_ReadInterrupts>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041fe:	d10b      	bne.n	8004218 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004208:	b29a      	uxth	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004212:	b292      	uxth	r2, r2
 8004214:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f003 febf 	bl	8007fa0 <USB_ReadInterrupts>
 8004222:	4603      	mov	r3, r0
 8004224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422c:	d10b      	bne.n	8004246 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004236:	b29a      	uxth	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004240:	b292      	uxth	r2, r2
 8004242:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f003 fea8 	bl	8007fa0 <USB_ReadInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425a:	d126      	bne.n	80042aa <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004264:	b29a      	uxth	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0204 	bic.w	r2, r2, #4
 800426e:	b292      	uxth	r2, r2
 8004270:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800427c:	b29a      	uxth	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0208 	bic.w	r2, r2, #8
 8004286:	b292      	uxth	r2, r2
 8004288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f005 fb39 	bl	8009904 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800429a:	b29a      	uxth	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042a4:	b292      	uxth	r2, r2
 80042a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f003 fe76 	bl	8007fa0 <USB_ReadInterrupts>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042be:	f040 8084 	bne.w	80043ca <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80042c2:	2300      	movs	r3, #0
 80042c4:	77fb      	strb	r3, [r7, #31]
 80042c6:	e011      	b.n	80042ec <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	7ffb      	ldrb	r3, [r7, #31]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	441a      	add	r2, r3
 80042d4:	7ffb      	ldrb	r3, [r7, #31]
 80042d6:	8812      	ldrh	r2, [r2, #0]
 80042d8:	b292      	uxth	r2, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	f107 0120 	add.w	r1, r7, #32
 80042e0:	440b      	add	r3, r1
 80042e2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80042e6:	7ffb      	ldrb	r3, [r7, #31]
 80042e8:	3301      	adds	r3, #1
 80042ea:	77fb      	strb	r3, [r7, #31]
 80042ec:	7ffb      	ldrb	r3, [r7, #31]
 80042ee:	2b07      	cmp	r3, #7
 80042f0:	d9ea      	bls.n	80042c8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	b292      	uxth	r2, r2
 8004306:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004312:	b29a      	uxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0201 	bic.w	r2, r2, #1
 800431c:	b292      	uxth	r2, r2
 800431e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004322:	bf00      	nop
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800432c:	b29b      	uxth	r3, r3
 800432e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f6      	beq.n	8004324 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004348:	b292      	uxth	r2, r2
 800434a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800434e:	2300      	movs	r3, #0
 8004350:	77fb      	strb	r3, [r7, #31]
 8004352:	e010      	b.n	8004376 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004354:	7ffb      	ldrb	r3, [r7, #31]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	4611      	mov	r1, r2
 800435c:	7ffa      	ldrb	r2, [r7, #31]
 800435e:	0092      	lsls	r2, r2, #2
 8004360:	440a      	add	r2, r1
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	f107 0120 	add.w	r1, r7, #32
 8004368:	440b      	add	r3, r1
 800436a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800436e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004370:	7ffb      	ldrb	r3, [r7, #31]
 8004372:	3301      	adds	r3, #1
 8004374:	77fb      	strb	r3, [r7, #31]
 8004376:	7ffb      	ldrb	r3, [r7, #31]
 8004378:	2b07      	cmp	r3, #7
 800437a:	d9eb      	bls.n	8004354 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004384:	b29a      	uxth	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0208 	orr.w	r2, r2, #8
 800438e:	b292      	uxth	r2, r2
 8004390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043a6:	b292      	uxth	r2, r2
 80043a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0204 	orr.w	r2, r2, #4
 80043be:	b292      	uxth	r2, r2
 80043c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f005 fa83 	bl	80098d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f003 fde6 	bl	8007fa0 <USB_ReadInterrupts>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043de:	d10e      	bne.n	80043fe <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043f2:	b292      	uxth	r2, r2
 80043f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f005 fa3c 	bl	8009876 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f003 fdcc 	bl	8007fa0 <USB_ReadInterrupts>
 8004408:	4603      	mov	r3, r0
 800440a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004412:	d10b      	bne.n	800442c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800441c:	b29a      	uxth	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004426:	b292      	uxth	r2, r2
 8004428:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800442c:	bf00      	nop
 800442e:	3720      	adds	r7, #32
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_PCD_SetAddress+0x1a>
 800444a:	2302      	movs	r3, #2
 800444c:	e013      	b.n	8004476 <HAL_PCD_SetAddress+0x42>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	78fa      	ldrb	r2, [r7, #3]
 8004464:	4611      	mov	r1, r2
 8004466:	4618      	mov	r0, r3
 8004468:	f003 fd73 	bl	8007f52 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	4608      	mov	r0, r1
 8004488:	4611      	mov	r1, r2
 800448a:	461a      	mov	r2, r3
 800448c:	4603      	mov	r3, r0
 800448e:	70fb      	strb	r3, [r7, #3]
 8004490:	460b      	mov	r3, r1
 8004492:	803b      	strh	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800449c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	da0e      	bge.n	80044c2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	4413      	add	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	705a      	strb	r2, [r3, #1]
 80044c0:	e00e      	b.n	80044e0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	f003 0207 	and.w	r2, r3, #7
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4413      	add	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80044ec:	883a      	ldrh	r2, [r7, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	78ba      	ldrb	r2, [r7, #2]
 80044f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	785b      	ldrb	r3, [r3, #1]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d004      	beq.n	800450a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800450a:	78bb      	ldrb	r3, [r7, #2]
 800450c:	2b02      	cmp	r3, #2
 800450e:	d102      	bne.n	8004516 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_PCD_EP_Open+0xa6>
 8004520:	2302      	movs	r3, #2
 8004522:	e00e      	b.n	8004542 <HAL_PCD_EP_Open+0xc4>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68f9      	ldr	r1, [r7, #12]
 8004532:	4618      	mov	r0, r3
 8004534:	f001 fd9a 	bl	800606c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004540:	7afb      	ldrb	r3, [r7, #11]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	460b      	mov	r3, r1
 8004554:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004556:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800455a:	2b00      	cmp	r3, #0
 800455c:	da0e      	bge.n	800457c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800455e:	78fb      	ldrb	r3, [r7, #3]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	4413      	add	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	705a      	strb	r2, [r3, #1]
 800457a:	e00e      	b.n	800459a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	f003 0207 	and.w	r2, r3, #7
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	4413      	add	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800459a:	78fb      	ldrb	r3, [r7, #3]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_PCD_EP_Close+0x6a>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e00e      	b.n	80045d2 <HAL_PCD_EP_Close+0x88>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68f9      	ldr	r1, [r7, #12]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f002 f8bc 	bl	8006740 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b086      	sub	sp, #24
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
 80045e6:	460b      	mov	r3, r1
 80045e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045ea:	7afb      	ldrb	r3, [r7, #11]
 80045ec:	f003 0207 	and.w	r2, r3, #7
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2200      	movs	r2, #0
 8004618:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800461a:	7afb      	ldrb	r3, [r7, #11]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	b2da      	uxtb	r2, r3
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004626:	7afb      	ldrb	r3, [r7, #11]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	2b00      	cmp	r3, #0
 800462e:	d106      	bne.n	800463e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6979      	ldr	r1, [r7, #20]
 8004636:	4618      	mov	r0, r3
 8004638:	f002 fa6e 	bl	8006b18 <USB_EPStartXfer>
 800463c:	e005      	b.n	800464a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6979      	ldr	r1, [r7, #20]
 8004644:	4618      	mov	r0, r3
 8004646:	f002 fa67 	bl	8006b18 <USB_EPStartXfer>
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	607a      	str	r2, [r7, #4]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	460b      	mov	r3, r1
 8004662:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004664:	7afb      	ldrb	r3, [r7, #11]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2200      	movs	r2, #0
 8004698:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2201      	movs	r2, #1
 800469e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046a0:	7afb      	ldrb	r3, [r7, #11]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046ac:	7afb      	ldrb	r3, [r7, #11]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6979      	ldr	r1, [r7, #20]
 80046bc:	4618      	mov	r0, r3
 80046be:	f002 fa2b 	bl	8006b18 <USB_EPStartXfer>
 80046c2:	e005      	b.n	80046d0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6979      	ldr	r1, [r7, #20]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f002 fa24 	bl	8006b18 <USB_EPStartXfer>
  }

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	460b      	mov	r3, r1
 80046e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	f003 0207 	and.w	r2, r3, #7
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d901      	bls.n	80046f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e04c      	b.n	8004792 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	da0e      	bge.n	800471e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	4413      	add	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	705a      	strb	r2, [r3, #1]
 800471c:	e00c      	b.n	8004738 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_PCD_EP_SetStall+0x7e>
 8004754:	2302      	movs	r3, #2
 8004756:	e01c      	b.n	8004792 <HAL_PCD_EP_SetStall+0xb8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68f9      	ldr	r1, [r7, #12]
 8004766:	4618      	mov	r0, r3
 8004768:	f003 faf6 	bl	8007d58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	2b00      	cmp	r3, #0
 8004774:	d108      	bne.n	8004788 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f003 fc1b 	bl	8007fbe <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	460b      	mov	r3, r1
 80047a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80047a6:	78fb      	ldrb	r3, [r7, #3]
 80047a8:	f003 020f 	and.w	r2, r3, #15
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d901      	bls.n	80047b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e040      	b.n	800483a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	da0e      	bge.n	80047de <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	4413      	add	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	705a      	strb	r2, [r3, #1]
 80047dc:	e00e      	b.n	80047fc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	f003 0207 	and.w	r2, r3, #7
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_PCD_EP_ClrStall+0x82>
 8004818:	2302      	movs	r3, #2
 800481a:	e00e      	b.n	800483a <HAL_PCD_EP_ClrStall+0xa0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68f9      	ldr	r1, [r7, #12]
 800482a:	4618      	mov	r0, r3
 800482c:	f003 fae4 	bl	8007df8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b08e      	sub	sp, #56	; 0x38
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800484a:	e2df      	b.n	8004e0c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004854:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004856:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004862:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004866:	2b00      	cmp	r3, #0
 8004868:	f040 8158 	bne.w	8004b1c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800486c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b00      	cmp	r3, #0
 8004874:	d152      	bne.n	800491c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	b29b      	uxth	r3, r3
 800487e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	81fb      	strh	r3, [r7, #14]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	89fb      	ldrh	r3, [r7, #14]
 800488e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004896:	b29b      	uxth	r3, r3
 8004898:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3328      	adds	r3, #40	; 0x28
 800489e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	4413      	add	r3, r2
 80048b4:	3302      	adds	r3, #2
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6812      	ldr	r2, [r2, #0]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	441a      	add	r2, r3
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80048da:	2100      	movs	r1, #0
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f004 ffb0 	bl	8009842 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 828e 	beq.w	8004e0c <PCD_EP_ISR_Handler+0x5ca>
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f040 8289 	bne.w	8004e0c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004900:	b2db      	uxtb	r3, r3
 8004902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004906:	b2da      	uxtb	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	b292      	uxth	r2, r2
 800490e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800491a:	e277      	b.n	8004e0c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800492c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800492e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004932:	2b00      	cmp	r3, #0
 8004934:	d034      	beq.n	80049a0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493e:	b29b      	uxth	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	4413      	add	r3, r2
 800494a:	3306      	adds	r3, #6
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004974:	b29b      	uxth	r3, r3
 8004976:	f003 fb72 	bl	800805e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29a      	uxth	r2, r3
 8004982:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004986:	4013      	ands	r3, r2
 8004988:	823b      	strh	r3, [r7, #16]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	8a3a      	ldrh	r2, [r7, #16]
 8004990:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004994:	b292      	uxth	r2, r2
 8004996:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f004 ff25 	bl	80097e8 <HAL_PCD_SetupStageCallback>
 800499e:	e235      	b.n	8004e0c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80049a0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f280 8231 	bge.w	8004e0c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80049b6:	4013      	ands	r3, r2
 80049b8:	83bb      	strh	r3, [r7, #28]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	8bba      	ldrh	r2, [r7, #28]
 80049c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049c4:	b292      	uxth	r2, r2
 80049c6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	461a      	mov	r2, r3
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	3306      	adds	r3, #6
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d019      	beq.n	8004a30 <PCD_EP_ISR_Handler+0x1ee>
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d015      	beq.n	8004a30 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	6959      	ldr	r1, [r3, #20]
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	f003 fb22 	bl	800805e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	441a      	add	r2, r3
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004a28:	2100      	movs	r1, #0
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f004 feee 	bl	800980c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	4413      	add	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d112      	bne.n	8004a7e <PCD_EP_ISR_Handler+0x23c>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	801a      	strh	r2, [r3, #0]
 8004a7c:	e02f      	b.n	8004ade <PCD_EP_ISR_Handler+0x29c>
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b3e      	cmp	r3, #62	; 0x3e
 8004a84:	d813      	bhi.n	8004aae <PCD_EP_ISR_Handler+0x26c>
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <PCD_EP_ISR_Handler+0x25e>
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	029b      	lsls	r3, r3, #10
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	801a      	strh	r2, [r3, #0]
 8004aac:	e017      	b.n	8004ade <PCD_EP_ISR_Handler+0x29c>
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 031f 	and.w	r3, r3, #31
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d102      	bne.n	8004ac8 <PCD_EP_ISR_Handler+0x286>
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	029b      	lsls	r3, r3, #10
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aee:	827b      	strh	r3, [r7, #18]
 8004af0:	8a7b      	ldrh	r3, [r7, #18]
 8004af2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004af6:	827b      	strh	r3, [r7, #18]
 8004af8:	8a7b      	ldrh	r3, [r7, #18]
 8004afa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004afe:	827b      	strh	r3, [r7, #18]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	8a7b      	ldrh	r3, [r7, #18]
 8004b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	8013      	strh	r3, [r2, #0]
 8004b1a:	e177      	b.n	8004e0c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b2e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f280 80ea 	bge.w	8004d0c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b4e:	4013      	ands	r3, r2
 8004b50:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b66:	b292      	uxth	r2, r2
 8004b68:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004b6a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	7b1b      	ldrb	r3, [r3, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d122      	bne.n	8004bce <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3306      	adds	r3, #6
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bb0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004bb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8087 	beq.w	8004cc8 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	6959      	ldr	r1, [r3, #20]
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	88da      	ldrh	r2, [r3, #6]
 8004bc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bc8:	f003 fa49 	bl	800805e <USB_ReadPMA>
 8004bcc:	e07c      	b.n	8004cc8 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	78db      	ldrb	r3, [r3, #3]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d108      	bne.n	8004be8 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004bd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bd8:	461a      	mov	r2, r3
 8004bda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f923 	bl	8004e28 <HAL_PCD_EP_DB_Receive>
 8004be2:	4603      	mov	r3, r0
 8004be4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004be6:	e06f      	b.n	8004cc8 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	441a      	add	r2, r3
 8004c12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d021      	beq.n	8004c86 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4413      	add	r3, r2
 8004c56:	3302      	adds	r3, #2
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c6a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004c6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d02a      	beq.n	8004cc8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	6959      	ldr	r1, [r3, #20]
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	891a      	ldrh	r2, [r3, #8]
 8004c7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c80:	f003 f9ed 	bl	800805e <USB_ReadPMA>
 8004c84:	e020      	b.n	8004cc8 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4413      	add	r3, r2
 8004c9a:	3306      	adds	r3, #6
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cae:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004cb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d008      	beq.n	8004cc8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	6959      	ldr	r1, [r3, #20]
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	895a      	ldrh	r2, [r3, #10]
 8004cc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cc4:	f003 f9cb 	bl	800805e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cce:	441a      	add	r2, r3
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	695a      	ldr	r2, [r3, #20]
 8004cd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cda:	441a      	add	r2, r3
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d004      	beq.n	8004cf2 <PCD_EP_ISR_Handler+0x4b0>
 8004ce8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d206      	bcs.n	8004d00 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f004 fd87 	bl	800980c <HAL_PCD_DataOutStageCallback>
 8004cfe:	e005      	b.n	8004d0c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d06:	4618      	mov	r0, r3
 8004d08:	f001 ff06 	bl	8006b18 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004d0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d07a      	beq.n	8004e0c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8004d16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	4413      	add	r3, r2
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d44:	843b      	strh	r3, [r7, #32]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	441a      	add	r2, r3
 8004d54:	8c3b      	ldrh	r3, [r7, #32]
 8004d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	78db      	ldrb	r3, [r3, #3]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d108      	bne.n	8004d7c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d146      	bne.n	8004e00 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004d72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d141      	bne.n	8004e00 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4413      	add	r3, r2
 8004d90:	3302      	adds	r3, #2
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004da4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	8bfb      	ldrh	r3, [r7, #30]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d906      	bls.n	8004dbe <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	699a      	ldr	r2, [r3, #24]
 8004db4:	8bfb      	ldrh	r3, [r7, #30]
 8004db6:	1ad2      	subs	r2, r2, r3
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	619a      	str	r2, [r3, #24]
 8004dbc:	e002      	b.n	8004dc4 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f004 fd35 	bl	8009842 <HAL_PCD_DataInStageCallback>
 8004dd8:	e018      	b.n	8004e0c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	8bfb      	ldrh	r3, [r7, #30]
 8004de0:	441a      	add	r2, r3
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	69da      	ldr	r2, [r3, #28]
 8004dea:	8bfb      	ldrh	r3, [r7, #30]
 8004dec:	441a      	add	r2, r3
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f001 fe8d 	bl	8006b18 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004dfe:	e005      	b.n	8004e0c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004e00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e02:	461a      	mov	r2, r3
 8004e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f91b 	bl	8005042 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	b21b      	sxth	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f6ff ad17 	blt.w	800484c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3738      	adds	r7, #56	; 0x38
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	4613      	mov	r3, r2
 8004e34:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d07e      	beq.n	8004f3e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4413      	add	r3, r2
 8004e54:	3302      	adds	r3, #2
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e68:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	8b7b      	ldrh	r3, [r7, #26]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d306      	bcc.n	8004e82 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	8b7b      	ldrh	r3, [r7, #26]
 8004e7a:	1ad2      	subs	r2, r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	619a      	str	r2, [r3, #24]
 8004e80:	e002      	b.n	8004e88 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2200      	movs	r2, #0
 8004e86:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d123      	bne.n	8004ed8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eaa:	833b      	strh	r3, [r7, #24]
 8004eac:	8b3b      	ldrh	r3, [r7, #24]
 8004eae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004eb2:	833b      	strh	r3, [r7, #24]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	441a      	add	r2, r3
 8004ec2:	8b3b      	ldrh	r3, [r7, #24]
 8004ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ed8:	88fb      	ldrh	r3, [r7, #6]
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01f      	beq.n	8004f22 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efc:	82fb      	strh	r3, [r7, #22]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	441a      	add	r2, r3
 8004f0c:	8afb      	ldrh	r3, [r7, #22]
 8004f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f22:	8b7b      	ldrh	r3, [r7, #26]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8087 	beq.w	8005038 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	6959      	ldr	r1, [r3, #20]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	891a      	ldrh	r2, [r3, #8]
 8004f36:	8b7b      	ldrh	r3, [r7, #26]
 8004f38:	f003 f891 	bl	800805e <USB_ReadPMA>
 8004f3c:	e07c      	b.n	8005038 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4413      	add	r3, r2
 8004f52:	3306      	adds	r3, #6
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f66:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	699a      	ldr	r2, [r3, #24]
 8004f6c:	8b7b      	ldrh	r3, [r7, #26]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d306      	bcc.n	8004f80 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	8b7b      	ldrh	r3, [r7, #26]
 8004f78:	1ad2      	subs	r2, r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	619a      	str	r2, [r3, #24]
 8004f7e:	e002      	b.n	8004f86 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2200      	movs	r2, #0
 8004f84:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d123      	bne.n	8004fd6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa8:	83fb      	strh	r3, [r7, #30]
 8004faa:	8bfb      	ldrh	r3, [r7, #30]
 8004fac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fb0:	83fb      	strh	r3, [r7, #30]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	441a      	add	r2, r3
 8004fc0:	8bfb      	ldrh	r3, [r7, #30]
 8004fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d11f      	bne.n	8005020 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	83bb      	strh	r3, [r7, #28]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	441a      	add	r2, r3
 800500a:	8bbb      	ldrh	r3, [r7, #28]
 800500c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005018:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800501c:	b29b      	uxth	r3, r3
 800501e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005020:	8b7b      	ldrh	r3, [r7, #26]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d008      	beq.n	8005038 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	6959      	ldr	r1, [r3, #20]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	895a      	ldrh	r2, [r3, #10]
 8005032:	8b7b      	ldrh	r3, [r7, #26]
 8005034:	f003 f813 	bl	800805e <USB_ReadPMA>
    }
  }

  return count;
 8005038:	8b7b      	ldrh	r3, [r7, #26]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b094      	sub	sp, #80	; 0x50
 8005046:	af00      	add	r7, sp, #0
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	4613      	mov	r3, r2
 800504e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 8138 	beq.w	80052cc <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005064:	b29b      	uxth	r3, r3
 8005066:	461a      	mov	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	4413      	add	r3, r2
 8005070:	3302      	adds	r3, #2
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005084:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005090:	429a      	cmp	r2, r3
 8005092:	d907      	bls.n	80050a4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	699a      	ldr	r2, [r3, #24]
 8005098:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800509c:	1ad2      	subs	r2, r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	619a      	str	r2, [r3, #24]
 80050a2:	e002      	b.n	80050aa <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2200      	movs	r2, #0
 80050a8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d12c      	bne.n	800510c <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	4619      	mov	r1, r3
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f004 fbc2 	bl	8009842 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 823a 	beq.w	800553e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e4:	82fb      	strh	r3, [r7, #22]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	441a      	add	r2, r3
 80050f4:	8afb      	ldrh	r3, [r7, #22]
 80050f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005106:	b29b      	uxth	r3, r3
 8005108:	8013      	strh	r3, [r2, #0]
 800510a:	e218      	b.n	800553e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01f      	beq.n	8005156 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005130:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	441a      	add	r2, r3
 8005140:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800514a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800514e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005152:	b29b      	uxth	r3, r3
 8005154:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800515c:	2b01      	cmp	r3, #1
 800515e:	f040 81ee 	bne.w	800553e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	695a      	ldr	r2, [r3, #20]
 8005166:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800516a:	441a      	add	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005178:	441a      	add	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	6a1a      	ldr	r2, [r3, #32]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	429a      	cmp	r2, r3
 8005188:	d309      	bcc.n	800519e <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	6a1a      	ldr	r2, [r3, #32]
 8005194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005196:	1ad2      	subs	r2, r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	621a      	str	r2, [r3, #32]
 800519c:	e015      	b.n	80051ca <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d107      	bne.n	80051b6 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80051a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80051aa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80051b4:	e009      	b.n	80051ca <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2200      	movs	r2, #0
 80051c8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	785b      	ldrb	r3, [r3, #1]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d155      	bne.n	800527e <HAL_PCD_EP_DB_Transmit+0x23c>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	461a      	mov	r2, r3
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	4413      	add	r3, r2
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	011a      	lsls	r2, r3, #4
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051f8:	61bb      	str	r3, [r7, #24]
 80051fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d112      	bne.n	8005226 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800520a:	b29a      	uxth	r2, r3
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	801a      	strh	r2, [r3, #0]
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800521a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800521e:	b29a      	uxth	r2, r3
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	801a      	strh	r2, [r3, #0]
 8005224:	e047      	b.n	80052b6 <HAL_PCD_EP_DB_Transmit+0x274>
 8005226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005228:	2b3e      	cmp	r3, #62	; 0x3e
 800522a:	d811      	bhi.n	8005250 <HAL_PCD_EP_DB_Transmit+0x20e>
 800522c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <HAL_PCD_EP_DB_Transmit+0x200>
 800523c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523e:	3301      	adds	r3, #1
 8005240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	b29b      	uxth	r3, r3
 8005246:	029b      	lsls	r3, r3, #10
 8005248:	b29a      	uxth	r2, r3
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	e032      	b.n	80052b6 <HAL_PCD_EP_DB_Transmit+0x274>
 8005250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <HAL_PCD_EP_DB_Transmit+0x224>
 8005260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005262:	3b01      	subs	r3, #1
 8005264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	b29b      	uxth	r3, r3
 800526a:	029b      	lsls	r3, r3, #10
 800526c:	b29b      	uxth	r3, r3
 800526e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005276:	b29a      	uxth	r2, r3
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	801a      	strh	r2, [r3, #0]
 800527c:	e01b      	b.n	80052b6 <HAL_PCD_EP_DB_Transmit+0x274>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	785b      	ldrb	r3, [r3, #1]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d117      	bne.n	80052b6 <HAL_PCD_EP_DB_Transmit+0x274>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005294:	b29b      	uxth	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	4413      	add	r3, r2
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	011a      	lsls	r2, r3, #4
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	4413      	add	r3, r2
 80052a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052ac:	623b      	str	r3, [r7, #32]
 80052ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6959      	ldr	r1, [r3, #20]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	891a      	ldrh	r2, [r3, #8]
 80052c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f002 fe85 	bl	8007fd4 <USB_WritePMA>
 80052ca:	e138      	b.n	800553e <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	4413      	add	r3, r2
 80052e0:	3306      	adds	r3, #6
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	699a      	ldr	r2, [r3, #24]
 80052fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005300:	429a      	cmp	r2, r3
 8005302:	d307      	bcc.n	8005314 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800530c:	1ad2      	subs	r2, r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	619a      	str	r2, [r3, #24]
 8005312:	e002      	b.n	800531a <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2200      	movs	r2, #0
 8005318:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d12e      	bne.n	8005380 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	4619      	mov	r1, r3
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f004 fa8a 	bl	8009842 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005334:	2b00      	cmp	r3, #0
 8005336:	f040 8102 	bne.w	800553e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005354:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	441a      	add	r2, r3
 8005366:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800536a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800536e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005372:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800537a:	b29b      	uxth	r3, r3
 800537c:	8013      	strh	r3, [r2, #0]
 800537e:	e0de      	b.n	800553e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d11f      	bne.n	80053ca <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a4:	867b      	strh	r3, [r7, #50]	; 0x32
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	441a      	add	r2, r3
 80053b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80053b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	f040 80b4 	bne.w	800553e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053de:	441a      	add	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053ec:	441a      	add	r2, r3
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d309      	bcc.n	8005412 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	6a1a      	ldr	r2, [r3, #32]
 8005408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800540a:	1ad2      	subs	r2, r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	621a      	str	r2, [r3, #32]
 8005410:	e015      	b.n	800543e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d107      	bne.n	800542a <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 800541a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800541e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005428:	e009      	b.n	800543e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2200      	movs	r2, #0
 8005434:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	643b      	str	r3, [r7, #64]	; 0x40
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d155      	bne.n	80054f8 <HAL_PCD_EP_DB_Transmit+0x4b6>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	63bb      	str	r3, [r7, #56]	; 0x38
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545a:	b29b      	uxth	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	4413      	add	r3, r2
 8005462:	63bb      	str	r3, [r7, #56]	; 0x38
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	011a      	lsls	r2, r3, #4
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	4413      	add	r3, r2
 800546e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
 8005474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005476:	2b00      	cmp	r3, #0
 8005478:	d112      	bne.n	80054a0 <HAL_PCD_EP_DB_Transmit+0x45e>
 800547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005484:	b29a      	uxth	r2, r3
 8005486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005498:	b29a      	uxth	r2, r3
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549c:	801a      	strh	r2, [r3, #0]
 800549e:	e044      	b.n	800552a <HAL_PCD_EP_DB_Transmit+0x4e8>
 80054a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a2:	2b3e      	cmp	r3, #62	; 0x3e
 80054a4:	d811      	bhi.n	80054ca <HAL_PCD_EP_DB_Transmit+0x488>
 80054a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_PCD_EP_DB_Transmit+0x47a>
 80054b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b8:	3301      	adds	r3, #1
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054be:	b29b      	uxth	r3, r3
 80054c0:	029b      	lsls	r3, r3, #10
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	801a      	strh	r2, [r3, #0]
 80054c8:	e02f      	b.n	800552a <HAL_PCD_EP_DB_Transmit+0x4e8>
 80054ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <HAL_PCD_EP_DB_Transmit+0x49e>
 80054da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054dc:	3b01      	subs	r3, #1
 80054de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	029b      	lsls	r3, r3, #10
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	e018      	b.n	800552a <HAL_PCD_EP_DB_Transmit+0x4e8>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	785b      	ldrb	r3, [r3, #1]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d114      	bne.n	800552a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005508:	b29b      	uxth	r3, r3
 800550a:	461a      	mov	r2, r3
 800550c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550e:	4413      	add	r3, r2
 8005510:	643b      	str	r3, [r7, #64]	; 0x40
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	011a      	lsls	r2, r3, #4
 8005518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551a:	4413      	add	r3, r2
 800551c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005524:	b29a      	uxth	r2, r3
 8005526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005528:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	6959      	ldr	r1, [r3, #20]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	895a      	ldrh	r2, [r3, #10]
 8005536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005538:	b29b      	uxth	r3, r3
 800553a:	f002 fd4b 	bl	8007fd4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005558:	82bb      	strh	r3, [r7, #20]
 800555a:	8abb      	ldrh	r3, [r7, #20]
 800555c:	f083 0310 	eor.w	r3, r3, #16
 8005560:	82bb      	strh	r3, [r7, #20]
 8005562:	8abb      	ldrh	r3, [r7, #20]
 8005564:	f083 0320 	eor.w	r3, r3, #32
 8005568:	82bb      	strh	r3, [r7, #20]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	441a      	add	r2, r3
 8005578:	8abb      	ldrh	r3, [r7, #20]
 800557a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800557e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800558a:	b29b      	uxth	r3, r3
 800558c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3750      	adds	r7, #80	; 0x50
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	607b      	str	r3, [r7, #4]
 80055a2:	460b      	mov	r3, r1
 80055a4:	817b      	strh	r3, [r7, #10]
 80055a6:	4613      	mov	r3, r2
 80055a8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80055aa:	897b      	ldrh	r3, [r7, #10]
 80055ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00b      	beq.n	80055ce <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055b6:	897b      	ldrh	r3, [r7, #10]
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	e009      	b.n	80055e2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80055ce:	897a      	ldrh	r2, [r7, #10]
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80055e2:	893b      	ldrh	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d107      	bne.n	80055f8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2200      	movs	r2, #0
 80055ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	80da      	strh	r2, [r3, #6]
 80055f6:	e00b      	b.n	8005610 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2201      	movs	r2, #1
 80055fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	b29a      	uxth	r2, r3
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	0c1b      	lsrs	r3, r3, #16
 800560a:	b29a      	uxth	r2, r3
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr

0800561c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e26c      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 8087 	beq.w	800574a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800563c:	4b92      	ldr	r3, [pc, #584]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 030c 	and.w	r3, r3, #12
 8005644:	2b04      	cmp	r3, #4
 8005646:	d00c      	beq.n	8005662 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005648:	4b8f      	ldr	r3, [pc, #572]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 030c 	and.w	r3, r3, #12
 8005650:	2b08      	cmp	r3, #8
 8005652:	d112      	bne.n	800567a <HAL_RCC_OscConfig+0x5e>
 8005654:	4b8c      	ldr	r3, [pc, #560]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005660:	d10b      	bne.n	800567a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005662:	4b89      	ldr	r3, [pc, #548]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d06c      	beq.n	8005748 <HAL_RCC_OscConfig+0x12c>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d168      	bne.n	8005748 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e246      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005682:	d106      	bne.n	8005692 <HAL_RCC_OscConfig+0x76>
 8005684:	4b80      	ldr	r3, [pc, #512]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a7f      	ldr	r2, [pc, #508]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 800568a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	e02e      	b.n	80056f0 <HAL_RCC_OscConfig+0xd4>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10c      	bne.n	80056b4 <HAL_RCC_OscConfig+0x98>
 800569a:	4b7b      	ldr	r3, [pc, #492]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a7a      	ldr	r2, [pc, #488]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	4b78      	ldr	r3, [pc, #480]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a77      	ldr	r2, [pc, #476]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	e01d      	b.n	80056f0 <HAL_RCC_OscConfig+0xd4>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCC_OscConfig+0xbc>
 80056be:	4b72      	ldr	r3, [pc, #456]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a71      	ldr	r2, [pc, #452]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	4b6f      	ldr	r3, [pc, #444]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a6e      	ldr	r2, [pc, #440]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	e00b      	b.n	80056f0 <HAL_RCC_OscConfig+0xd4>
 80056d8:	4b6b      	ldr	r3, [pc, #428]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a6a      	ldr	r2, [pc, #424]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	4b68      	ldr	r3, [pc, #416]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a67      	ldr	r2, [pc, #412]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d013      	beq.n	8005720 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7fc fdba 	bl	8002270 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005700:	f7fc fdb6 	bl	8002270 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	; 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e1fa      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005712:	4b5d      	ldr	r3, [pc, #372]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCC_OscConfig+0xe4>
 800571e:	e014      	b.n	800574a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005720:	f7fc fda6 	bl	8002270 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005728:	f7fc fda2 	bl	8002270 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b64      	cmp	r3, #100	; 0x64
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e1e6      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800573a:	4b53      	ldr	r3, [pc, #332]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f0      	bne.n	8005728 <HAL_RCC_OscConfig+0x10c>
 8005746:	e000      	b.n	800574a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d063      	beq.n	800581e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005756:	4b4c      	ldr	r3, [pc, #304]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005762:	4b49      	ldr	r3, [pc, #292]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f003 030c 	and.w	r3, r3, #12
 800576a:	2b08      	cmp	r3, #8
 800576c:	d11c      	bne.n	80057a8 <HAL_RCC_OscConfig+0x18c>
 800576e:	4b46      	ldr	r3, [pc, #280]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d116      	bne.n	80057a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800577a:	4b43      	ldr	r3, [pc, #268]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_RCC_OscConfig+0x176>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d001      	beq.n	8005792 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e1ba      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005792:	4b3d      	ldr	r3, [pc, #244]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4939      	ldr	r1, [pc, #228]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a6:	e03a      	b.n	800581e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d020      	beq.n	80057f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057b0:	4b36      	ldr	r3, [pc, #216]	; (800588c <HAL_RCC_OscConfig+0x270>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b6:	f7fc fd5b 	bl	8002270 <HAL_GetTick>
 80057ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057be:	f7fc fd57 	bl	8002270 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e19b      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d0:	4b2d      	ldr	r3, [pc, #180]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f0      	beq.n	80057be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057dc:	4b2a      	ldr	r3, [pc, #168]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	4927      	ldr	r1, [pc, #156]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	600b      	str	r3, [r1, #0]
 80057f0:	e015      	b.n	800581e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057f2:	4b26      	ldr	r3, [pc, #152]	; (800588c <HAL_RCC_OscConfig+0x270>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f8:	f7fc fd3a 	bl	8002270 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005800:	f7fc fd36 	bl	8002270 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e17a      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005812:	4b1d      	ldr	r3, [pc, #116]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f0      	bne.n	8005800 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d03a      	beq.n	80058a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d019      	beq.n	8005866 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005832:	4b17      	ldr	r3, [pc, #92]	; (8005890 <HAL_RCC_OscConfig+0x274>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005838:	f7fc fd1a 	bl	8002270 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005840:	f7fc fd16 	bl	8002270 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e15a      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005852:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800585e:	2001      	movs	r0, #1
 8005860:	f000 fac4 	bl	8005dec <RCC_Delay>
 8005864:	e01c      	b.n	80058a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005866:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <HAL_RCC_OscConfig+0x274>)
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800586c:	f7fc fd00 	bl	8002270 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005872:	e00f      	b.n	8005894 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005874:	f7fc fcfc 	bl	8002270 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d908      	bls.n	8005894 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e140      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
 8005886:	bf00      	nop
 8005888:	40021000 	.word	0x40021000
 800588c:	42420000 	.word	0x42420000
 8005890:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005894:	4b9e      	ldr	r3, [pc, #632]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e9      	bne.n	8005874 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80a6 	beq.w	80059fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ae:	2300      	movs	r3, #0
 80058b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058b2:	4b97      	ldr	r3, [pc, #604]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10d      	bne.n	80058da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058be:	4b94      	ldr	r3, [pc, #592]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	4a93      	ldr	r2, [pc, #588]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80058c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c8:	61d3      	str	r3, [r2, #28]
 80058ca:	4b91      	ldr	r3, [pc, #580]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d2:	60bb      	str	r3, [r7, #8]
 80058d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058d6:	2301      	movs	r3, #1
 80058d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058da:	4b8e      	ldr	r3, [pc, #568]	; (8005b14 <HAL_RCC_OscConfig+0x4f8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d118      	bne.n	8005918 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058e6:	4b8b      	ldr	r3, [pc, #556]	; (8005b14 <HAL_RCC_OscConfig+0x4f8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a8a      	ldr	r2, [pc, #552]	; (8005b14 <HAL_RCC_OscConfig+0x4f8>)
 80058ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058f2:	f7fc fcbd 	bl	8002270 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f8:	e008      	b.n	800590c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058fa:	f7fc fcb9 	bl	8002270 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b64      	cmp	r3, #100	; 0x64
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e0fd      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800590c:	4b81      	ldr	r3, [pc, #516]	; (8005b14 <HAL_RCC_OscConfig+0x4f8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0f0      	beq.n	80058fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d106      	bne.n	800592e <HAL_RCC_OscConfig+0x312>
 8005920:	4b7b      	ldr	r3, [pc, #492]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	4a7a      	ldr	r2, [pc, #488]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	6213      	str	r3, [r2, #32]
 800592c:	e02d      	b.n	800598a <HAL_RCC_OscConfig+0x36e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10c      	bne.n	8005950 <HAL_RCC_OscConfig+0x334>
 8005936:	4b76      	ldr	r3, [pc, #472]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	4a75      	ldr	r2, [pc, #468]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	6213      	str	r3, [r2, #32]
 8005942:	4b73      	ldr	r3, [pc, #460]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	4a72      	ldr	r2, [pc, #456]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005948:	f023 0304 	bic.w	r3, r3, #4
 800594c:	6213      	str	r3, [r2, #32]
 800594e:	e01c      	b.n	800598a <HAL_RCC_OscConfig+0x36e>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b05      	cmp	r3, #5
 8005956:	d10c      	bne.n	8005972 <HAL_RCC_OscConfig+0x356>
 8005958:	4b6d      	ldr	r3, [pc, #436]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	4a6c      	ldr	r2, [pc, #432]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 800595e:	f043 0304 	orr.w	r3, r3, #4
 8005962:	6213      	str	r3, [r2, #32]
 8005964:	4b6a      	ldr	r3, [pc, #424]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	4a69      	ldr	r2, [pc, #420]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	6213      	str	r3, [r2, #32]
 8005970:	e00b      	b.n	800598a <HAL_RCC_OscConfig+0x36e>
 8005972:	4b67      	ldr	r3, [pc, #412]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	4a66      	ldr	r2, [pc, #408]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	6213      	str	r3, [r2, #32]
 800597e:	4b64      	ldr	r3, [pc, #400]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	4a63      	ldr	r2, [pc, #396]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005984:	f023 0304 	bic.w	r3, r3, #4
 8005988:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d015      	beq.n	80059be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005992:	f7fc fc6d 	bl	8002270 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005998:	e00a      	b.n	80059b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800599a:	f7fc fc69 	bl	8002270 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e0ab      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b0:	4b57      	ldr	r3, [pc, #348]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0ee      	beq.n	800599a <HAL_RCC_OscConfig+0x37e>
 80059bc:	e014      	b.n	80059e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059be:	f7fc fc57 	bl	8002270 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059c4:	e00a      	b.n	80059dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c6:	f7fc fc53 	bl	8002270 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e095      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059dc:	4b4c      	ldr	r3, [pc, #304]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1ee      	bne.n	80059c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d105      	bne.n	80059fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ee:	4b48      	ldr	r3, [pc, #288]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	4a47      	ldr	r2, [pc, #284]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80059f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 8081 	beq.w	8005b06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a04:	4b42      	ldr	r3, [pc, #264]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 030c 	and.w	r3, r3, #12
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d061      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d146      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a18:	4b3f      	ldr	r3, [pc, #252]	; (8005b18 <HAL_RCC_OscConfig+0x4fc>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a1e:	f7fc fc27 	bl	8002270 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a26:	f7fc fc23 	bl	8002270 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e067      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a38:	4b35      	ldr	r3, [pc, #212]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f0      	bne.n	8005a26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4c:	d108      	bne.n	8005a60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a4e:	4b30      	ldr	r3, [pc, #192]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	492d      	ldr	r1, [pc, #180]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a60:	4b2b      	ldr	r3, [pc, #172]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a19      	ldr	r1, [r3, #32]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	430b      	orrs	r3, r1
 8005a72:	4927      	ldr	r1, [pc, #156]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a78:	4b27      	ldr	r3, [pc, #156]	; (8005b18 <HAL_RCC_OscConfig+0x4fc>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7e:	f7fc fbf7 	bl	8002270 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a86:	f7fc fbf3 	bl	8002270 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e037      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a98:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0f0      	beq.n	8005a86 <HAL_RCC_OscConfig+0x46a>
 8005aa4:	e02f      	b.n	8005b06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa6:	4b1c      	ldr	r3, [pc, #112]	; (8005b18 <HAL_RCC_OscConfig+0x4fc>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aac:	f7fc fbe0 	bl	8002270 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab4:	f7fc fbdc 	bl	8002270 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e020      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ac6:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x498>
 8005ad2:	e018      	b.n	8005b06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e013      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d106      	bne.n	8005b02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d001      	beq.n	8005b06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40021000 	.word	0x40021000
 8005b14:	40007000 	.word	0x40007000
 8005b18:	42420060 	.word	0x42420060

08005b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e0d0      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b30:	4b6a      	ldr	r3, [pc, #424]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d910      	bls.n	8005b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3e:	4b67      	ldr	r3, [pc, #412]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f023 0207 	bic.w	r2, r3, #7
 8005b46:	4965      	ldr	r1, [pc, #404]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4e:	4b63      	ldr	r3, [pc, #396]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d001      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0b8      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d020      	beq.n	8005bae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b78:	4b59      	ldr	r3, [pc, #356]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	4a58      	ldr	r2, [pc, #352]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b90:	4b53      	ldr	r3, [pc, #332]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4a52      	ldr	r2, [pc, #328]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005b9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b9c:	4b50      	ldr	r3, [pc, #320]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	494d      	ldr	r1, [pc, #308]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d040      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d107      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc2:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d115      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e07f      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d107      	bne.n	8005bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bda:	4b41      	ldr	r3, [pc, #260]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e073      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bea:	4b3d      	ldr	r3, [pc, #244]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e06b      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bfa:	4b39      	ldr	r3, [pc, #228]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f023 0203 	bic.w	r2, r3, #3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	4936      	ldr	r1, [pc, #216]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c0c:	f7fc fb30 	bl	8002270 <HAL_GetTick>
 8005c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c12:	e00a      	b.n	8005c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c14:	f7fc fb2c 	bl	8002270 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e053      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f003 020c 	and.w	r2, r3, #12
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d1eb      	bne.n	8005c14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c3c:	4b27      	ldr	r3, [pc, #156]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d210      	bcs.n	8005c6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4a:	4b24      	ldr	r3, [pc, #144]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f023 0207 	bic.w	r2, r3, #7
 8005c52:	4922      	ldr	r1, [pc, #136]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5a:	4b20      	ldr	r3, [pc, #128]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d001      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e032      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d008      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c78:	4b19      	ldr	r3, [pc, #100]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	4916      	ldr	r1, [pc, #88]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c96:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	490e      	ldr	r1, [pc, #56]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005caa:	f000 f821 	bl	8005cf0 <HAL_RCC_GetSysClockFreq>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	091b      	lsrs	r3, r3, #4
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	490a      	ldr	r1, [pc, #40]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cbc:	5ccb      	ldrb	r3, [r1, r3]
 8005cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc2:	4a09      	ldr	r2, [pc, #36]	; (8005ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8005cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005cc6:	4b09      	ldr	r3, [pc, #36]	; (8005cec <HAL_RCC_ClockConfig+0x1d0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fc fa8e 	bl	80021ec <HAL_InitTick>

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40022000 	.word	0x40022000
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	0800a158 	.word	0x0800a158
 8005ce8:	2000000c 	.word	0x2000000c
 8005cec:	20000010 	.word	0x20000010

08005cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf0:	b490      	push	{r4, r7}
 8005cf2:	b08a      	sub	sp, #40	; 0x28
 8005cf4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005cf6:	4b2a      	ldr	r3, [pc, #168]	; (8005da0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005cf8:	1d3c      	adds	r4, r7, #4
 8005cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005d00:	f240 2301 	movw	r3, #513	; 0x201
 8005d04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d1a:	4b22      	ldr	r3, [pc, #136]	; (8005da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f003 030c 	and.w	r3, r3, #12
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d002      	beq.n	8005d30 <HAL_RCC_GetSysClockFreq+0x40>
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d003      	beq.n	8005d36 <HAL_RCC_GetSysClockFreq+0x46>
 8005d2e:	e02d      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d30:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d32:	623b      	str	r3, [r7, #32]
      break;
 8005d34:	e02d      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	0c9b      	lsrs	r3, r3, #18
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d42:	4413      	add	r3, r2
 8005d44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005d48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d013      	beq.n	8005d7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d54:	4b13      	ldr	r3, [pc, #76]	; (8005da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	0c5b      	lsrs	r3, r3, #17
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d62:	4413      	add	r3, r2
 8005d64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005d68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	4a0e      	ldr	r2, [pc, #56]	; (8005da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d6e:	fb02 f203 	mul.w	r2, r2, r3
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
 8005d7a:	e004      	b.n	8005d86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4a0b      	ldr	r2, [pc, #44]	; (8005dac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	623b      	str	r3, [r7, #32]
      break;
 8005d8a:	e002      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d8c:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d8e:	623b      	str	r3, [r7, #32]
      break;
 8005d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d92:	6a3b      	ldr	r3, [r7, #32]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3728      	adds	r7, #40	; 0x28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc90      	pop	{r4, r7}
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	0800a108 	.word	0x0800a108
 8005da4:	40021000 	.word	0x40021000
 8005da8:	007a1200 	.word	0x007a1200
 8005dac:	003d0900 	.word	0x003d0900

08005db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005db4:	4b02      	ldr	r3, [pc, #8]	; (8005dc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005db6:	681b      	ldr	r3, [r3, #0]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr
 8005dc0:	2000000c 	.word	0x2000000c

08005dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005dc8:	f7ff fff2 	bl	8005db0 <HAL_RCC_GetHCLKFreq>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	0a1b      	lsrs	r3, r3, #8
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	4903      	ldr	r1, [pc, #12]	; (8005de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dda:	5ccb      	ldrb	r3, [r1, r3]
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	40021000 	.word	0x40021000
 8005de8:	0800a168 	.word	0x0800a168

08005dec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005df4:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <RCC_Delay+0x34>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a0a      	ldr	r2, [pc, #40]	; (8005e24 <RCC_Delay+0x38>)
 8005dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfe:	0a5b      	lsrs	r3, r3, #9
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	fb02 f303 	mul.w	r3, r2, r3
 8005e06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e08:	bf00      	nop
  }
  while (Delay --);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	1e5a      	subs	r2, r3, #1
 8005e0e:	60fa      	str	r2, [r7, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1f9      	bne.n	8005e08 <RCC_Delay+0x1c>
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr
 8005e20:	2000000c 	.word	0x2000000c
 8005e24:	10624dd3 	.word	0x10624dd3

08005e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d07d      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005e44:	2300      	movs	r3, #0
 8005e46:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e48:	4b4f      	ldr	r3, [pc, #316]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10d      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e54:	4b4c      	ldr	r3, [pc, #304]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	4a4b      	ldr	r2, [pc, #300]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	61d3      	str	r3, [r2, #28]
 8005e60:	4b49      	ldr	r3, [pc, #292]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e70:	4b46      	ldr	r3, [pc, #280]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d118      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e7c:	4b43      	ldr	r3, [pc, #268]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a42      	ldr	r2, [pc, #264]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e88:	f7fc f9f2 	bl	8002270 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e90:	f7fc f9ee 	bl	8002270 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b64      	cmp	r3, #100	; 0x64
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e06d      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea2:	4b3a      	ldr	r3, [pc, #232]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005eae:	4b36      	ldr	r3, [pc, #216]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d02e      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d027      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ecc:	4b2e      	ldr	r3, [pc, #184]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ed4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ed6:	4b2e      	ldr	r3, [pc, #184]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ed8:	2201      	movs	r2, #1
 8005eda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005edc:	4b2c      	ldr	r3, [pc, #176]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ee2:	4a29      	ldr	r2, [pc, #164]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d014      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef2:	f7fc f9bd 	bl	8002270 <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef8:	e00a      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005efa:	f7fc f9b9 	bl	8002270 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e036      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f10:	4b1d      	ldr	r3, [pc, #116]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0ee      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f1c:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	4917      	ldr	r1, [pc, #92]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f2e:	7dfb      	ldrb	r3, [r7, #23]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d105      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f34:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	490b      	ldr	r1, [pc, #44]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	4904      	ldr	r1, [pc, #16]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	40007000 	.word	0x40007000
 8005f90:	42420440 	.word	0x42420440

08005f94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f94:	b084      	sub	sp, #16
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	f107 0014 	add.w	r0, r7, #20
 8005fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	b004      	add	sp, #16
 8005fb2:	4770      	bx	lr

08005fb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fc4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005fc8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr

08005fe0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fe8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005fec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	43db      	mvns	r3, r3
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	4013      	ands	r3, r2
 8006000:	b29a      	uxth	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr

08006014 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr

0800602c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800602c:	b084      	sub	sp, #16
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	f107 0014 	add.w	r0, r7, #20
 800603a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	bc80      	pop	{r7}
 8006068:	b004      	add	sp, #16
 800606a:	4770      	bx	lr

0800606c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800606c:	b480      	push	{r7}
 800606e:	b09b      	sub	sp, #108	; 0x6c
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	b29b      	uxth	r3, r3
 800608a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800608e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006092:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	78db      	ldrb	r3, [r3, #3]
 800609a:	2b03      	cmp	r3, #3
 800609c:	d81f      	bhi.n	80060de <USB_ActivateEndpoint+0x72>
 800609e:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <USB_ActivateEndpoint+0x38>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060b5 	.word	0x080060b5
 80060a8:	080060d1 	.word	0x080060d1
 80060ac:	080060e7 	.word	0x080060e7
 80060b0:	080060c3 	.word	0x080060c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80060b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80060b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80060c0:	e012      	b.n	80060e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80060c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80060c6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80060ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80060ce:	e00b      	b.n	80060e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80060d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80060d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80060dc:	e004      	b.n	80060e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80060e4:	e000      	b.n	80060e8 <USB_ActivateEndpoint+0x7c>
      break;
 80060e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	441a      	add	r2, r3
 80060f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80060f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006106:	b29b      	uxth	r3, r3
 8006108:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006120:	b29a      	uxth	r2, r3
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	4313      	orrs	r3, r2
 800612a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	441a      	add	r2, r3
 8006138:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800613c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614c:	b29b      	uxth	r3, r3
 800614e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	7b1b      	ldrb	r3, [r3, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f040 8149 	bne.w	80063ec <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	785b      	ldrb	r3, [r3, #1]
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 8084 	beq.w	800626c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800616e:	b29b      	uxth	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	4413      	add	r3, r2
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	011a      	lsls	r2, r3, #4
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006186:	613b      	str	r3, [r7, #16]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	88db      	ldrh	r3, [r3, #6]
 800618c:	085b      	lsrs	r3, r3, #1
 800618e:	b29b      	uxth	r3, r3
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	81fb      	strh	r3, [r7, #14]
 80061a6:	89fb      	ldrh	r3, [r7, #14]
 80061a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01b      	beq.n	80061e8 <USB_ActivateEndpoint+0x17c>
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c6:	81bb      	strh	r3, [r7, #12]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	441a      	add	r2, r3
 80061d2:	89bb      	ldrh	r3, [r7, #12]
 80061d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	78db      	ldrb	r3, [r3, #3]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d020      	beq.n	8006232 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006206:	813b      	strh	r3, [r7, #8]
 8006208:	893b      	ldrh	r3, [r7, #8]
 800620a:	f083 0320 	eor.w	r3, r3, #32
 800620e:	813b      	strh	r3, [r7, #8]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	441a      	add	r2, r3
 800621a:	893b      	ldrh	r3, [r7, #8]
 800621c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800622c:	b29b      	uxth	r3, r3
 800622e:	8013      	strh	r3, [r2, #0]
 8006230:	e27f      	b.n	8006732 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006248:	817b      	strh	r3, [r7, #10]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	441a      	add	r2, r3
 8006254:	897b      	ldrh	r3, [r7, #10]
 8006256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800625a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800625e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006266:	b29b      	uxth	r3, r3
 8006268:	8013      	strh	r3, [r2, #0]
 800626a:	e262      	b.n	8006732 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006276:	b29b      	uxth	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	4413      	add	r3, r2
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	011a      	lsls	r2, r3, #4
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	4413      	add	r3, r2
 800628a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800628e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	88db      	ldrh	r3, [r3, #6]
 8006294:	085b      	lsrs	r3, r3, #1
 8006296:	b29b      	uxth	r3, r3
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	4413      	add	r3, r2
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	011a      	lsls	r2, r3, #4
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	4413      	add	r3, r2
 80062be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062c2:	623b      	str	r3, [r7, #32]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d112      	bne.n	80062f2 <USB_ActivateEndpoint+0x286>
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	801a      	strh	r2, [r3, #0]
 80062f0:	e02f      	b.n	8006352 <USB_ActivateEndpoint+0x2e6>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b3e      	cmp	r3, #62	; 0x3e
 80062f8:	d813      	bhi.n	8006322 <USB_ActivateEndpoint+0x2b6>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	663b      	str	r3, [r7, #96]	; 0x60
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <USB_ActivateEndpoint+0x2a8>
 800630e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006310:	3301      	adds	r3, #1
 8006312:	663b      	str	r3, [r7, #96]	; 0x60
 8006314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006316:	b29b      	uxth	r3, r3
 8006318:	029b      	lsls	r3, r3, #10
 800631a:	b29a      	uxth	r2, r3
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	801a      	strh	r2, [r3, #0]
 8006320:	e017      	b.n	8006352 <USB_ActivateEndpoint+0x2e6>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	663b      	str	r3, [r7, #96]	; 0x60
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f003 031f 	and.w	r3, r3, #31
 8006332:	2b00      	cmp	r3, #0
 8006334:	d102      	bne.n	800633c <USB_ActivateEndpoint+0x2d0>
 8006336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006338:	3b01      	subs	r3, #1
 800633a:	663b      	str	r3, [r7, #96]	; 0x60
 800633c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800633e:	b29b      	uxth	r3, r3
 8006340:	029b      	lsls	r3, r3, #10
 8006342:	b29b      	uxth	r3, r3
 8006344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634c:	b29a      	uxth	r2, r3
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	83fb      	strh	r3, [r7, #30]
 8006360:	8bfb      	ldrh	r3, [r7, #30]
 8006362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d01b      	beq.n	80063a2 <USB_ActivateEndpoint+0x336>
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006380:	83bb      	strh	r3, [r7, #28]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	441a      	add	r2, r3
 800638c:	8bbb      	ldrh	r3, [r7, #28]
 800638e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006396:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800639a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639e:	b29b      	uxth	r3, r3
 80063a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b8:	837b      	strh	r3, [r7, #26]
 80063ba:	8b7b      	ldrh	r3, [r7, #26]
 80063bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063c0:	837b      	strh	r3, [r7, #26]
 80063c2:	8b7b      	ldrh	r3, [r7, #26]
 80063c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063c8:	837b      	strh	r3, [r7, #26]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	441a      	add	r2, r3
 80063d4:	8b7b      	ldrh	r3, [r7, #26]
 80063d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	8013      	strh	r3, [r2, #0]
 80063ea:	e1a2      	b.n	8006732 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006402:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006424:	b29b      	uxth	r3, r3
 8006426:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	65bb      	str	r3, [r7, #88]	; 0x58
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006432:	b29b      	uxth	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006438:	4413      	add	r3, r2
 800643a:	65bb      	str	r3, [r7, #88]	; 0x58
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	011a      	lsls	r2, r3, #4
 8006442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006444:	4413      	add	r3, r2
 8006446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800644a:	657b      	str	r3, [r7, #84]	; 0x54
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	891b      	ldrh	r3, [r3, #8]
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	b29b      	uxth	r3, r3
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	b29a      	uxth	r2, r3
 8006458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	653b      	str	r3, [r7, #80]	; 0x50
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006466:	b29b      	uxth	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800646c:	4413      	add	r3, r2
 800646e:	653b      	str	r3, [r7, #80]	; 0x50
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	011a      	lsls	r2, r3, #4
 8006476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006478:	4413      	add	r3, r2
 800647a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800647e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	895b      	ldrh	r3, [r3, #10]
 8006484:	085b      	lsrs	r3, r3, #1
 8006486:	b29b      	uxth	r3, r3
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	b29a      	uxth	r2, r3
 800648c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	785b      	ldrb	r3, [r3, #1]
 8006494:	2b00      	cmp	r3, #0
 8006496:	f040 8091 	bne.w	80065bc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80064a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80064aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d01b      	beq.n	80064ea <USB_ActivateEndpoint+0x47e>
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	441a      	add	r2, r3
 80064d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80064d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	873b      	strh	r3, [r7, #56]	; 0x38
 80064f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80064fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d01b      	beq.n	800653a <USB_ActivateEndpoint+0x4ce>
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	b29b      	uxth	r3, r3
 8006510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006518:	86fb      	strh	r3, [r7, #54]	; 0x36
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	441a      	add	r2, r3
 8006524:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800652e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006532:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006536:	b29b      	uxth	r3, r3
 8006538:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800654c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006550:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006552:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006554:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006558:	86bb      	strh	r3, [r7, #52]	; 0x34
 800655a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800655c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006560:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	441a      	add	r2, r3
 800656c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800656e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800657a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657e:	b29b      	uxth	r3, r3
 8006580:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006598:	867b      	strh	r3, [r7, #50]	; 0x32
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	441a      	add	r2, r3
 80065a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80065a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	8013      	strh	r3, [r2, #0]
 80065ba:	e0ba      	b.n	8006732 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80065cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80065d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01d      	beq.n	8006614 <USB_ActivateEndpoint+0x5a8>
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	441a      	add	r2, r3
 80065fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006608:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800660c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006610:	b29b      	uxth	r3, r3
 8006612:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006624:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01d      	beq.n	800666c <USB_ActivateEndpoint+0x600>
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006646:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	441a      	add	r2, r3
 8006654:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800665c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006664:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006668:	b29b      	uxth	r3, r3
 800666a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	78db      	ldrb	r3, [r3, #3]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d024      	beq.n	80066be <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	b29b      	uxth	r3, r3
 8006682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800668a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800668e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006692:	f083 0320 	eor.w	r3, r3, #32
 8006696:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	441a      	add	r2, r3
 80066a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80066a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	8013      	strh	r3, [r2, #0]
 80066bc:	e01d      	b.n	80066fa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	441a      	add	r2, r3
 80066e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80066e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800670c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006710:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	441a      	add	r2, r3
 800671c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800671e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800672e:	b29b      	uxth	r3, r3
 8006730:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006732:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006736:	4618      	mov	r0, r3
 8006738:	376c      	adds	r7, #108	; 0x6c
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr

08006740 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006740:	b480      	push	{r7}
 8006742:	b08d      	sub	sp, #52	; 0x34
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	7b1b      	ldrb	r3, [r3, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f040 808e 	bne.w	8006870 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	785b      	ldrb	r3, [r3, #1]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d044      	beq.n	80067e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	81bb      	strh	r3, [r7, #12]
 800676a:	89bb      	ldrh	r3, [r7, #12]
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01b      	beq.n	80067ac <USB_DeactivateEndpoint+0x6c>
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	b29b      	uxth	r3, r3
 8006782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678a:	817b      	strh	r3, [r7, #10]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	441a      	add	r2, r3
 8006796:	897b      	ldrh	r3, [r7, #10]
 8006798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c2:	813b      	strh	r3, [r7, #8]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	441a      	add	r2, r3
 80067ce:	893b      	ldrh	r3, [r7, #8]
 80067d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	8013      	strh	r3, [r2, #0]
 80067e4:	e192      	b.n	8006b0c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	827b      	strh	r3, [r7, #18]
 80067f4:	8a7b      	ldrh	r3, [r7, #18]
 80067f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d01b      	beq.n	8006836 <USB_DeactivateEndpoint+0xf6>
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	b29b      	uxth	r3, r3
 800680c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006814:	823b      	strh	r3, [r7, #16]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	441a      	add	r2, r3
 8006820:	8a3b      	ldrh	r3, [r7, #16]
 8006822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800682e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006832:	b29b      	uxth	r3, r3
 8006834:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684c:	81fb      	strh	r3, [r7, #14]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	441a      	add	r2, r3
 8006858:	89fb      	ldrh	r3, [r7, #14]
 800685a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686a:	b29b      	uxth	r3, r3
 800686c:	8013      	strh	r3, [r2, #0]
 800686e:	e14d      	b.n	8006b0c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	785b      	ldrb	r3, [r3, #1]
 8006874:	2b00      	cmp	r3, #0
 8006876:	f040 80a5 	bne.w	80069c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	843b      	strh	r3, [r7, #32]
 8006888:	8c3b      	ldrh	r3, [r7, #32]
 800688a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d01b      	beq.n	80068ca <USB_DeactivateEndpoint+0x18a>
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a8:	83fb      	strh	r3, [r7, #30]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	441a      	add	r2, r3
 80068b4:	8bfb      	ldrh	r3, [r7, #30]
 80068b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	83bb      	strh	r3, [r7, #28]
 80068d8:	8bbb      	ldrh	r3, [r7, #28]
 80068da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d01b      	beq.n	800691a <USB_DeactivateEndpoint+0x1da>
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f8:	837b      	strh	r3, [r7, #26]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	441a      	add	r2, r3
 8006904:	8b7b      	ldrh	r3, [r7, #26]
 8006906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800690e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006912:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006916:	b29b      	uxth	r3, r3
 8006918:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006930:	833b      	strh	r3, [r7, #24]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	441a      	add	r2, r3
 800693c:	8b3b      	ldrh	r3, [r7, #24]
 800693e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800694e:	b29b      	uxth	r3, r3
 8006950:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006968:	82fb      	strh	r3, [r7, #22]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	441a      	add	r2, r3
 8006974:	8afb      	ldrh	r3, [r7, #22]
 8006976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006986:	b29b      	uxth	r3, r3
 8006988:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a0:	82bb      	strh	r3, [r7, #20]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	441a      	add	r2, r3
 80069ac:	8abb      	ldrh	r3, [r7, #20]
 80069ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069be:	b29b      	uxth	r3, r3
 80069c0:	8013      	strh	r3, [r2, #0]
 80069c2:	e0a3      	b.n	8006b0c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80069d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d01b      	beq.n	8006a14 <USB_DeactivateEndpoint+0x2d4>
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	441a      	add	r2, r3
 80069fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006a22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01b      	beq.n	8006a64 <USB_DeactivateEndpoint+0x324>
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a42:	853b      	strh	r3, [r7, #40]	; 0x28
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	441a      	add	r2, r3
 8006a4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	441a      	add	r2, r3
 8006a86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	441a      	add	r2, r3
 8006abe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aea:	847b      	strh	r3, [r7, #34]	; 0x22
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	441a      	add	r2, r3
 8006af6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006af8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006afc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3734      	adds	r7, #52	; 0x34
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr

08006b18 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b0c4      	sub	sp, #272	; 0x110
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	1d3b      	adds	r3, r7, #4
 8006b20:	6018      	str	r0, [r3, #0]
 8006b22:	463b      	mov	r3, r7
 8006b24:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b26:	463b      	mov	r3, r7
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	785b      	ldrb	r3, [r3, #1]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	f040 8557 	bne.w	80075e0 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006b32:	463b      	mov	r3, r7
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	699a      	ldr	r2, [r3, #24]
 8006b38:	463b      	mov	r3, r7
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d905      	bls.n	8006b4e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006b42:	463b      	mov	r3, r7
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006b4c:	e004      	b.n	8006b58 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006b4e:	463b      	mov	r3, r7
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006b58:	463b      	mov	r3, r7
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	7b1b      	ldrb	r3, [r3, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d12c      	bne.n	8006bbc <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006b62:	463b      	mov	r3, r7
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6959      	ldr	r1, [r3, #20]
 8006b68:	463b      	mov	r3, r7
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	88da      	ldrh	r2, [r3, #6]
 8006b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	1d38      	adds	r0, r7, #4
 8006b76:	6800      	ldr	r0, [r0, #0]
 8006b78:	f001 fa2c 	bl	8007fd4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b7c:	1d3b      	adds	r3, r7, #4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	1d3b      	adds	r3, r7, #4
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	4413      	add	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	463b      	mov	r3, r7
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	011a      	lsls	r2, r3, #4
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006ba4:	f107 0310 	add.w	r3, r7, #16
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	f107 0310 	add.w	r3, r7, #16
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	801a      	strh	r2, [r3, #0]
 8006bb8:	f000 bcdd 	b.w	8007576 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006bbc:	463b      	mov	r3, r7
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	78db      	ldrb	r3, [r3, #3]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	f040 8347 	bne.w	8007256 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006bc8:	463b      	mov	r3, r7
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6a1a      	ldr	r2, [r3, #32]
 8006bce:	463b      	mov	r3, r7
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	f240 82eb 	bls.w	80071b0 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006bda:	1d3b      	adds	r3, r7, #4
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	463b      	mov	r3, r7
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006bf8:	1d3b      	adds	r3, r7, #4
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	463b      	mov	r3, r7
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	441a      	add	r2, r3
 8006c06:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c12:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006c1e:	463b      	mov	r3, r7
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6a1a      	ldr	r2, [r3, #32]
 8006c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c28:	1ad2      	subs	r2, r2, r3
 8006c2a:	463b      	mov	r3, r7
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c30:	1d3b      	adds	r3, r7, #4
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	463b      	mov	r3, r7
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 8159 	beq.w	8006efe <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c4c:	1d3b      	adds	r3, r7, #4
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
 8006c52:	463b      	mov	r3, r7
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d164      	bne.n	8006d26 <USB_EPStartXfer+0x20e>
 8006c5c:	1d3b      	adds	r3, r7, #4
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c62:	1d3b      	adds	r3, r7, #4
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	4413      	add	r3, r2
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c74:	463b      	mov	r3, r7
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	011a      	lsls	r2, r3, #4
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	4413      	add	r3, r2
 8006c80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d112      	bne.n	8006cb4 <USB_EPStartXfer+0x19c>
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	801a      	strh	r2, [r3, #0]
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	801a      	strh	r2, [r3, #0]
 8006cb2:	e054      	b.n	8006d5e <USB_EPStartXfer+0x246>
 8006cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cb8:	2b3e      	cmp	r3, #62	; 0x3e
 8006cba:	d817      	bhi.n	8006cec <USB_EPStartXfer+0x1d4>
 8006cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cc0:	085b      	lsrs	r3, r3, #1
 8006cc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d004      	beq.n	8006cdc <USB_EPStartXfer+0x1c4>
 8006cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	029b      	lsls	r3, r3, #10
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	801a      	strh	r2, [r3, #0]
 8006cea:	e038      	b.n	8006d5e <USB_EPStartXfer+0x246>
 8006cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cf0:	095b      	lsrs	r3, r3, #5
 8006cf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <USB_EPStartXfer+0x1f4>
 8006d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d06:	3b01      	subs	r3, #1
 8006d08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	029b      	lsls	r3, r3, #10
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	e01b      	b.n	8006d5e <USB_EPStartXfer+0x246>
 8006d26:	463b      	mov	r3, r7
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	785b      	ldrb	r3, [r3, #1]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d116      	bne.n	8006d5e <USB_EPStartXfer+0x246>
 8006d30:	1d3b      	adds	r3, r7, #4
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3e:	4413      	add	r3, r2
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
 8006d42:	463b      	mov	r3, r7
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	011a      	lsls	r2, r3, #4
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d52:	633b      	str	r3, [r7, #48]	; 0x30
 8006d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d5e:	463b      	mov	r3, r7
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	895b      	ldrh	r3, [r3, #10]
 8006d64:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d68:	463b      	mov	r3, r7
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6959      	ldr	r1, [r3, #20]
 8006d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006d78:	1d38      	adds	r0, r7, #4
 8006d7a:	6800      	ldr	r0, [r0, #0]
 8006d7c:	f001 f92a 	bl	8007fd4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006d80:	463b      	mov	r3, r7
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695a      	ldr	r2, [r3, #20]
 8006d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d8a:	441a      	add	r2, r3
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d92:	463b      	mov	r3, r7
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6a1a      	ldr	r2, [r3, #32]
 8006d98:	463b      	mov	r3, r7
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d909      	bls.n	8006db6 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8006da2:	463b      	mov	r3, r7
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6a1a      	ldr	r2, [r3, #32]
 8006da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dac:	1ad2      	subs	r2, r2, r3
 8006dae:	463b      	mov	r3, r7
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	621a      	str	r2, [r3, #32]
 8006db4:	e008      	b.n	8006dc8 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006db6:	463b      	mov	r3, r7
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006dc8:	463b      	mov	r3, r7
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d164      	bne.n	8006e9c <USB_EPStartXfer+0x384>
 8006dd2:	1d3b      	adds	r3, r7, #4
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	61fb      	str	r3, [r7, #28]
 8006dd8:	1d3b      	adds	r3, r7, #4
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	461a      	mov	r2, r3
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	4413      	add	r3, r2
 8006de8:	61fb      	str	r3, [r7, #28]
 8006dea:	463b      	mov	r3, r7
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	011a      	lsls	r2, r3, #4
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	4413      	add	r3, r2
 8006df6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dfa:	61bb      	str	r3, [r7, #24]
 8006dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d112      	bne.n	8006e2a <USB_EPStartXfer+0x312>
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	801a      	strh	r2, [r3, #0]
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	801a      	strh	r2, [r3, #0]
 8006e28:	e057      	b.n	8006eda <USB_EPStartXfer+0x3c2>
 8006e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e30:	d817      	bhi.n	8006e62 <USB_EPStartXfer+0x34a>
 8006e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e36:	085b      	lsrs	r3, r3, #1
 8006e38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <USB_EPStartXfer+0x33a>
 8006e48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	029b      	lsls	r3, r3, #10
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	801a      	strh	r2, [r3, #0]
 8006e60:	e03b      	b.n	8006eda <USB_EPStartXfer+0x3c2>
 8006e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e70:	f003 031f 	and.w	r3, r3, #31
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d104      	bne.n	8006e82 <USB_EPStartXfer+0x36a>
 8006e78:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	029b      	lsls	r3, r3, #10
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	801a      	strh	r2, [r3, #0]
 8006e9a:	e01e      	b.n	8006eda <USB_EPStartXfer+0x3c2>
 8006e9c:	463b      	mov	r3, r7
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d119      	bne.n	8006eda <USB_EPStartXfer+0x3c2>
 8006ea6:	1d3b      	adds	r3, r7, #4
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8006eac:	1d3b      	adds	r3, r7, #4
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	4413      	add	r3, r2
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	011a      	lsls	r2, r3, #4
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	4413      	add	r3, r2
 8006eca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ece:	623b      	str	r3, [r7, #32]
 8006ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006eda:	463b      	mov	r3, r7
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	891b      	ldrh	r3, [r3, #8]
 8006ee0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ee4:	463b      	mov	r3, r7
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6959      	ldr	r1, [r3, #20]
 8006eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006ef4:	1d38      	adds	r0, r7, #4
 8006ef6:	6800      	ldr	r0, [r0, #0]
 8006ef8:	f001 f86c 	bl	8007fd4 <USB_WritePMA>
 8006efc:	e33b      	b.n	8007576 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006efe:	463b      	mov	r3, r7
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d164      	bne.n	8006fd2 <USB_EPStartXfer+0x4ba>
 8006f08:	1d3b      	adds	r3, r7, #4
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f0e:	1d3b      	adds	r3, r7, #4
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1c:	4413      	add	r3, r2
 8006f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f20:	463b      	mov	r3, r7
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	011a      	lsls	r2, r3, #4
 8006f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f30:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d112      	bne.n	8006f60 <USB_EPStartXfer+0x448>
 8006f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	e057      	b.n	8007010 <USB_EPStartXfer+0x4f8>
 8006f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f64:	2b3e      	cmp	r3, #62	; 0x3e
 8006f66:	d817      	bhi.n	8006f98 <USB_EPStartXfer+0x480>
 8006f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f6c:	085b      	lsrs	r3, r3, #1
 8006f6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d004      	beq.n	8006f88 <USB_EPStartXfer+0x470>
 8006f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f82:	3301      	adds	r3, #1
 8006f84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	029b      	lsls	r3, r3, #10
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f94:	801a      	strh	r2, [r3, #0]
 8006f96:	e03b      	b.n	8007010 <USB_EPStartXfer+0x4f8>
 8006f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f9c:	095b      	lsrs	r3, r3, #5
 8006f9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fa6:	f003 031f 	and.w	r3, r3, #31
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <USB_EPStartXfer+0x4a0>
 8006fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	029b      	lsls	r3, r3, #10
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fce:	801a      	strh	r2, [r3, #0]
 8006fd0:	e01e      	b.n	8007010 <USB_EPStartXfer+0x4f8>
 8006fd2:	463b      	mov	r3, r7
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	785b      	ldrb	r3, [r3, #1]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d119      	bne.n	8007010 <USB_EPStartXfer+0x4f8>
 8006fdc:	1d3b      	adds	r3, r7, #4
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	657b      	str	r3, [r7, #84]	; 0x54
 8006fe2:	1d3b      	adds	r3, r7, #4
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	461a      	mov	r2, r3
 8006fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ff0:	4413      	add	r3, r2
 8006ff2:	657b      	str	r3, [r7, #84]	; 0x54
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	011a      	lsls	r2, r3, #4
 8006ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ffe:	4413      	add	r3, r2
 8007000:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007004:	653b      	str	r3, [r7, #80]	; 0x50
 8007006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800700a:	b29a      	uxth	r2, r3
 800700c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800700e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007010:	463b      	mov	r3, r7
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	891b      	ldrh	r3, [r3, #8]
 8007016:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800701a:	463b      	mov	r3, r7
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6959      	ldr	r1, [r3, #20]
 8007020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007024:	b29b      	uxth	r3, r3
 8007026:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800702a:	1d38      	adds	r0, r7, #4
 800702c:	6800      	ldr	r0, [r0, #0]
 800702e:	f000 ffd1 	bl	8007fd4 <USB_WritePMA>
            ep->xfer_buff += len;
 8007032:	463b      	mov	r3, r7
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	695a      	ldr	r2, [r3, #20]
 8007038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800703c:	441a      	add	r2, r3
 800703e:	463b      	mov	r3, r7
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007044:	463b      	mov	r3, r7
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6a1a      	ldr	r2, [r3, #32]
 800704a:	463b      	mov	r3, r7
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	429a      	cmp	r2, r3
 8007052:	d909      	bls.n	8007068 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8007054:	463b      	mov	r3, r7
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6a1a      	ldr	r2, [r3, #32]
 800705a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800705e:	1ad2      	subs	r2, r2, r3
 8007060:	463b      	mov	r3, r7
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	621a      	str	r2, [r3, #32]
 8007066:	e008      	b.n	800707a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8007068:	463b      	mov	r3, r7
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007072:	463b      	mov	r3, r7
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2200      	movs	r2, #0
 8007078:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800707a:	1d3b      	adds	r3, r7, #4
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	647b      	str	r3, [r7, #68]	; 0x44
 8007080:	463b      	mov	r3, r7
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	785b      	ldrb	r3, [r3, #1]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d164      	bne.n	8007154 <USB_EPStartXfer+0x63c>
 800708a:	1d3b      	adds	r3, r7, #4
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007090:	1d3b      	adds	r3, r7, #4
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007098:	b29b      	uxth	r3, r3
 800709a:	461a      	mov	r2, r3
 800709c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709e:	4413      	add	r3, r2
 80070a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070a2:	463b      	mov	r3, r7
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	011a      	lsls	r2, r3, #4
 80070aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ac:	4413      	add	r3, r2
 80070ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80070b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d112      	bne.n	80070e2 <USB_EPStartXfer+0x5ca>
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ca:	801a      	strh	r2, [r3, #0]
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070da:	b29a      	uxth	r2, r3
 80070dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070de:	801a      	strh	r2, [r3, #0]
 80070e0:	e054      	b.n	800718c <USB_EPStartXfer+0x674>
 80070e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070e6:	2b3e      	cmp	r3, #62	; 0x3e
 80070e8:	d817      	bhi.n	800711a <USB_EPStartXfer+0x602>
 80070ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ee:	085b      	lsrs	r3, r3, #1
 80070f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <USB_EPStartXfer+0x5f2>
 8007100:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007104:	3301      	adds	r3, #1
 8007106:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800710a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800710e:	b29b      	uxth	r3, r3
 8007110:	029b      	lsls	r3, r3, #10
 8007112:	b29a      	uxth	r2, r3
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	801a      	strh	r2, [r3, #0]
 8007118:	e038      	b.n	800718c <USB_EPStartXfer+0x674>
 800711a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800711e:	095b      	lsrs	r3, r3, #5
 8007120:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007128:	f003 031f 	and.w	r3, r3, #31
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <USB_EPStartXfer+0x622>
 8007130:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007134:	3b01      	subs	r3, #1
 8007136:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800713a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800713e:	b29b      	uxth	r3, r3
 8007140:	029b      	lsls	r3, r3, #10
 8007142:	b29b      	uxth	r3, r3
 8007144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714c:	b29a      	uxth	r2, r3
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	801a      	strh	r2, [r3, #0]
 8007152:	e01b      	b.n	800718c <USB_EPStartXfer+0x674>
 8007154:	463b      	mov	r3, r7
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	785b      	ldrb	r3, [r3, #1]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d116      	bne.n	800718c <USB_EPStartXfer+0x674>
 800715e:	1d3b      	adds	r3, r7, #4
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007166:	b29b      	uxth	r3, r3
 8007168:	461a      	mov	r2, r3
 800716a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800716c:	4413      	add	r3, r2
 800716e:	647b      	str	r3, [r7, #68]	; 0x44
 8007170:	463b      	mov	r3, r7
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	011a      	lsls	r2, r3, #4
 8007178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800717a:	4413      	add	r3, r2
 800717c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007180:	643b      	str	r3, [r7, #64]	; 0x40
 8007182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007186:	b29a      	uxth	r2, r3
 8007188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800718c:	463b      	mov	r3, r7
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	895b      	ldrh	r3, [r3, #10]
 8007192:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007196:	463b      	mov	r3, r7
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6959      	ldr	r1, [r3, #20]
 800719c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80071a6:	1d38      	adds	r0, r7, #4
 80071a8:	6800      	ldr	r0, [r0, #0]
 80071aa:	f000 ff13 	bl	8007fd4 <USB_WritePMA>
 80071ae:	e1e2      	b.n	8007576 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80071b0:	463b      	mov	r3, r7
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80071ba:	1d3b      	adds	r3, r7, #4
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	463b      	mov	r3, r7
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80071d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80071d8:	1d3b      	adds	r3, r7, #4
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	463b      	mov	r3, r7
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	441a      	add	r2, r3
 80071e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80071ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80071fe:	1d3b      	adds	r3, r7, #4
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	663b      	str	r3, [r7, #96]	; 0x60
 8007204:	1d3b      	adds	r3, r7, #4
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800720c:	b29b      	uxth	r3, r3
 800720e:	461a      	mov	r2, r3
 8007210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007212:	4413      	add	r3, r2
 8007214:	663b      	str	r3, [r7, #96]	; 0x60
 8007216:	463b      	mov	r3, r7
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	011a      	lsls	r2, r3, #4
 800721e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007220:	4413      	add	r3, r2
 8007222:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800722c:	b29a      	uxth	r2, r3
 800722e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007230:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007232:	463b      	mov	r3, r7
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	891b      	ldrh	r3, [r3, #8]
 8007238:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800723c:	463b      	mov	r3, r7
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6959      	ldr	r1, [r3, #20]
 8007242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007246:	b29b      	uxth	r3, r3
 8007248:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800724c:	1d38      	adds	r0, r7, #4
 800724e:	6800      	ldr	r0, [r0, #0]
 8007250:	f000 fec0 	bl	8007fd4 <USB_WritePMA>
 8007254:	e18f      	b.n	8007576 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007256:	1d3b      	adds	r3, r7, #4
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	463b      	mov	r3, r7
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 808f 	beq.w	8007390 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007272:	1d3b      	adds	r3, r7, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	67bb      	str	r3, [r7, #120]	; 0x78
 8007278:	463b      	mov	r3, r7
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	785b      	ldrb	r3, [r3, #1]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d164      	bne.n	800734c <USB_EPStartXfer+0x834>
 8007282:	1d3b      	adds	r3, r7, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	673b      	str	r3, [r7, #112]	; 0x70
 8007288:	1d3b      	adds	r3, r7, #4
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007290:	b29b      	uxth	r3, r3
 8007292:	461a      	mov	r2, r3
 8007294:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007296:	4413      	add	r3, r2
 8007298:	673b      	str	r3, [r7, #112]	; 0x70
 800729a:	463b      	mov	r3, r7
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	011a      	lsls	r2, r3, #4
 80072a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072a4:	4413      	add	r3, r2
 80072a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d112      	bne.n	80072da <USB_EPStartXfer+0x7c2>
 80072b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072be:	b29a      	uxth	r2, r3
 80072c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c2:	801a      	strh	r2, [r3, #0]
 80072c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d6:	801a      	strh	r2, [r3, #0]
 80072d8:	e054      	b.n	8007384 <USB_EPStartXfer+0x86c>
 80072da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072de:	2b3e      	cmp	r3, #62	; 0x3e
 80072e0:	d817      	bhi.n	8007312 <USB_EPStartXfer+0x7fa>
 80072e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072e6:	085b      	lsrs	r3, r3, #1
 80072e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80072ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d004      	beq.n	8007302 <USB_EPStartXfer+0x7ea>
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fc:	3301      	adds	r3, #1
 80072fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007306:	b29b      	uxth	r3, r3
 8007308:	029b      	lsls	r3, r3, #10
 800730a:	b29a      	uxth	r2, r3
 800730c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730e:	801a      	strh	r2, [r3, #0]
 8007310:	e038      	b.n	8007384 <USB_EPStartXfer+0x86c>
 8007312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800731c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007320:	f003 031f 	and.w	r3, r3, #31
 8007324:	2b00      	cmp	r3, #0
 8007326:	d104      	bne.n	8007332 <USB_EPStartXfer+0x81a>
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732c:	3b01      	subs	r3, #1
 800732e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007336:	b29b      	uxth	r3, r3
 8007338:	029b      	lsls	r3, r3, #10
 800733a:	b29b      	uxth	r3, r3
 800733c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007344:	b29a      	uxth	r2, r3
 8007346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007348:	801a      	strh	r2, [r3, #0]
 800734a:	e01b      	b.n	8007384 <USB_EPStartXfer+0x86c>
 800734c:	463b      	mov	r3, r7
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	785b      	ldrb	r3, [r3, #1]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d116      	bne.n	8007384 <USB_EPStartXfer+0x86c>
 8007356:	1d3b      	adds	r3, r7, #4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735e:	b29b      	uxth	r3, r3
 8007360:	461a      	mov	r2, r3
 8007362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007364:	4413      	add	r3, r2
 8007366:	67bb      	str	r3, [r7, #120]	; 0x78
 8007368:	463b      	mov	r3, r7
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	011a      	lsls	r2, r3, #4
 8007370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007372:	4413      	add	r3, r2
 8007374:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007378:	677b      	str	r3, [r7, #116]	; 0x74
 800737a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800737e:	b29a      	uxth	r2, r3
 8007380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007382:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007384:	463b      	mov	r3, r7
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	895b      	ldrh	r3, [r3, #10]
 800738a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800738e:	e097      	b.n	80074c0 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007390:	463b      	mov	r3, r7
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d168      	bne.n	800746c <USB_EPStartXfer+0x954>
 800739a:	1d3b      	adds	r3, r7, #4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073a2:	1d3b      	adds	r3, r7, #4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073b2:	4413      	add	r3, r2
 80073b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073b8:	463b      	mov	r3, r7
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	011a      	lsls	r2, r3, #4
 80073c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073c4:	4413      	add	r3, r2
 80073c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d112      	bne.n	80073fa <USB_EPStartXfer+0x8e2>
 80073d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073de:	b29a      	uxth	r2, r3
 80073e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073e2:	801a      	strh	r2, [r3, #0]
 80073e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073f6:	801a      	strh	r2, [r3, #0]
 80073f8:	e05d      	b.n	80074b6 <USB_EPStartXfer+0x99e>
 80073fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007400:	d817      	bhi.n	8007432 <USB_EPStartXfer+0x91a>
 8007402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007406:	085b      	lsrs	r3, r3, #1
 8007408:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800740c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b00      	cmp	r3, #0
 8007416:	d004      	beq.n	8007422 <USB_EPStartXfer+0x90a>
 8007418:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800741c:	3301      	adds	r3, #1
 800741e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007422:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007426:	b29b      	uxth	r3, r3
 8007428:	029b      	lsls	r3, r3, #10
 800742a:	b29a      	uxth	r2, r3
 800742c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	e041      	b.n	80074b6 <USB_EPStartXfer+0x99e>
 8007432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800743c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007440:	f003 031f 	and.w	r3, r3, #31
 8007444:	2b00      	cmp	r3, #0
 8007446:	d104      	bne.n	8007452 <USB_EPStartXfer+0x93a>
 8007448:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800744c:	3b01      	subs	r3, #1
 800744e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007452:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007456:	b29b      	uxth	r3, r3
 8007458:	029b      	lsls	r3, r3, #10
 800745a:	b29b      	uxth	r3, r3
 800745c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007464:	b29a      	uxth	r2, r3
 8007466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007468:	801a      	strh	r2, [r3, #0]
 800746a:	e024      	b.n	80074b6 <USB_EPStartXfer+0x99e>
 800746c:	463b      	mov	r3, r7
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	785b      	ldrb	r3, [r3, #1]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d11f      	bne.n	80074b6 <USB_EPStartXfer+0x99e>
 8007476:	1d3b      	adds	r3, r7, #4
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800747e:	1d3b      	adds	r3, r7, #4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007486:	b29b      	uxth	r3, r3
 8007488:	461a      	mov	r2, r3
 800748a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800748e:	4413      	add	r3, r2
 8007490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007494:	463b      	mov	r3, r7
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	011a      	lsls	r2, r3, #4
 800749c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074a0:	4413      	add	r3, r2
 80074a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074b6:	463b      	mov	r3, r7
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	891b      	ldrh	r3, [r3, #8]
 80074bc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074c0:	463b      	mov	r3, r7
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6959      	ldr	r1, [r3, #20]
 80074c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80074d0:	1d38      	adds	r0, r7, #4
 80074d2:	6800      	ldr	r0, [r0, #0]
 80074d4:	f000 fd7e 	bl	8007fd4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80074d8:	463b      	mov	r3, r7
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d122      	bne.n	8007528 <USB_EPStartXfer+0xa10>
 80074e2:	1d3b      	adds	r3, r7, #4
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	463b      	mov	r3, r7
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007500:	1d3b      	adds	r3, r7, #4
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	463b      	mov	r3, r7
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	441a      	add	r2, r3
 800750e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800751a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800751e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007522:	b29b      	uxth	r3, r3
 8007524:	8013      	strh	r3, [r2, #0]
 8007526:	e026      	b.n	8007576 <USB_EPStartXfer+0xa5e>
 8007528:	463b      	mov	r3, r7
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	785b      	ldrb	r3, [r3, #1]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d121      	bne.n	8007576 <USB_EPStartXfer+0xa5e>
 8007532:	1d3b      	adds	r3, r7, #4
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	463b      	mov	r3, r7
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29b      	uxth	r3, r3
 8007544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007550:	1d3b      	adds	r3, r7, #4
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	463b      	mov	r3, r7
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	441a      	add	r2, r3
 800755e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8007562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800756a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800756e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007572:	b29b      	uxth	r3, r3
 8007574:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007576:	1d3b      	adds	r3, r7, #4
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	463b      	mov	r3, r7
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b29b      	uxth	r3, r3
 8007588:	f107 020e 	add.w	r2, r7, #14
 800758c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007594:	8013      	strh	r3, [r2, #0]
 8007596:	f107 030e 	add.w	r3, r7, #14
 800759a:	f107 020e 	add.w	r2, r7, #14
 800759e:	8812      	ldrh	r2, [r2, #0]
 80075a0:	f082 0210 	eor.w	r2, r2, #16
 80075a4:	801a      	strh	r2, [r3, #0]
 80075a6:	f107 030e 	add.w	r3, r7, #14
 80075aa:	f107 020e 	add.w	r2, r7, #14
 80075ae:	8812      	ldrh	r2, [r2, #0]
 80075b0:	f082 0220 	eor.w	r2, r2, #32
 80075b4:	801a      	strh	r2, [r3, #0]
 80075b6:	1d3b      	adds	r3, r7, #4
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	463b      	mov	r3, r7
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	441a      	add	r2, r3
 80075c4:	f107 030e 	add.w	r3, r7, #14
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]
 80075de:	e3b5      	b.n	8007d4c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80075e0:	463b      	mov	r3, r7
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	7b1b      	ldrb	r3, [r3, #12]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f040 8090 	bne.w	800770c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80075ec:	463b      	mov	r3, r7
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699a      	ldr	r2, [r3, #24]
 80075f2:	463b      	mov	r3, r7
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d90e      	bls.n	800761a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80075fc:	463b      	mov	r3, r7
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8007606:	463b      	mov	r3, r7
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007610:	1ad2      	subs	r2, r2, r3
 8007612:	463b      	mov	r3, r7
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	619a      	str	r2, [r3, #24]
 8007618:	e008      	b.n	800762c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800761a:	463b      	mov	r3, r7
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8007624:	463b      	mov	r3, r7
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2200      	movs	r2, #0
 800762a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800762c:	1d3b      	adds	r3, r7, #4
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007634:	1d3b      	adds	r3, r7, #4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800763c:	b29b      	uxth	r3, r3
 800763e:	461a      	mov	r2, r3
 8007640:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007644:	4413      	add	r3, r2
 8007646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800764a:	463b      	mov	r3, r7
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	011a      	lsls	r2, r3, #4
 8007652:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007656:	4413      	add	r3, r2
 8007658:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800765c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007664:	2b00      	cmp	r3, #0
 8007666:	d116      	bne.n	8007696 <USB_EPStartXfer+0xb7e>
 8007668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007674:	b29a      	uxth	r2, r3
 8007676:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800767a:	801a      	strh	r2, [r3, #0]
 800767c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	b29b      	uxth	r3, r3
 8007684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800768c:	b29a      	uxth	r2, r3
 800768e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007692:	801a      	strh	r2, [r3, #0]
 8007694:	e32c      	b.n	8007cf0 <USB_EPStartXfer+0x11d8>
 8007696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800769a:	2b3e      	cmp	r3, #62	; 0x3e
 800769c:	d818      	bhi.n	80076d0 <USB_EPStartXfer+0xbb8>
 800769e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076a2:	085b      	lsrs	r3, r3, #1
 80076a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d004      	beq.n	80076be <USB_EPStartXfer+0xba6>
 80076b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076b8:	3301      	adds	r3, #1
 80076ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	029b      	lsls	r3, r3, #10
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076cc:	801a      	strh	r2, [r3, #0]
 80076ce:	e30f      	b.n	8007cf0 <USB_EPStartXfer+0x11d8>
 80076d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076d4:	095b      	lsrs	r3, r3, #5
 80076d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076de:	f003 031f 	and.w	r3, r3, #31
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d104      	bne.n	80076f0 <USB_EPStartXfer+0xbd8>
 80076e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076ea:	3b01      	subs	r3, #1
 80076ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	029b      	lsls	r3, r3, #10
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007702:	b29a      	uxth	r2, r3
 8007704:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007708:	801a      	strh	r2, [r3, #0]
 800770a:	e2f1      	b.n	8007cf0 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800770c:	463b      	mov	r3, r7
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	78db      	ldrb	r3, [r3, #3]
 8007712:	2b02      	cmp	r3, #2
 8007714:	f040 818f 	bne.w	8007a36 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007718:	463b      	mov	r3, r7
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	785b      	ldrb	r3, [r3, #1]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d175      	bne.n	800780e <USB_EPStartXfer+0xcf6>
 8007722:	1d3b      	adds	r3, r7, #4
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800772a:	1d3b      	adds	r3, r7, #4
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007732:	b29b      	uxth	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800773a:	4413      	add	r3, r2
 800773c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007740:	463b      	mov	r3, r7
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	011a      	lsls	r2, r3, #4
 8007748:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800774c:	4413      	add	r3, r2
 800774e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007756:	463b      	mov	r3, r7
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d116      	bne.n	800778e <USB_EPStartXfer+0xc76>
 8007760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	b29b      	uxth	r3, r3
 8007768:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800776c:	b29a      	uxth	r2, r3
 800776e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007772:	801a      	strh	r2, [r3, #0]
 8007774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	b29b      	uxth	r3, r3
 800777c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007784:	b29a      	uxth	r2, r3
 8007786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800778a:	801a      	strh	r2, [r3, #0]
 800778c:	e065      	b.n	800785a <USB_EPStartXfer+0xd42>
 800778e:	463b      	mov	r3, r7
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	2b3e      	cmp	r3, #62	; 0x3e
 8007796:	d81a      	bhi.n	80077ce <USB_EPStartXfer+0xcb6>
 8007798:	463b      	mov	r3, r7
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	085b      	lsrs	r3, r3, #1
 80077a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077a4:	463b      	mov	r3, r7
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d004      	beq.n	80077bc <USB_EPStartXfer+0xca4>
 80077b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077b6:	3301      	adds	r3, #1
 80077b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	029b      	lsls	r3, r3, #10
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077ca:	801a      	strh	r2, [r3, #0]
 80077cc:	e045      	b.n	800785a <USB_EPStartXfer+0xd42>
 80077ce:	463b      	mov	r3, r7
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	095b      	lsrs	r3, r3, #5
 80077d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077da:	463b      	mov	r3, r7
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	f003 031f 	and.w	r3, r3, #31
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <USB_EPStartXfer+0xcda>
 80077e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077ec:	3b01      	subs	r3, #1
 80077ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	029b      	lsls	r3, r3, #10
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007804:	b29a      	uxth	r2, r3
 8007806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800780a:	801a      	strh	r2, [r3, #0]
 800780c:	e025      	b.n	800785a <USB_EPStartXfer+0xd42>
 800780e:	463b      	mov	r3, r7
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d120      	bne.n	800785a <USB_EPStartXfer+0xd42>
 8007818:	1d3b      	adds	r3, r7, #4
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007820:	1d3b      	adds	r3, r7, #4
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007828:	b29b      	uxth	r3, r3
 800782a:	461a      	mov	r2, r3
 800782c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007830:	4413      	add	r3, r2
 8007832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007836:	463b      	mov	r3, r7
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	011a      	lsls	r2, r3, #4
 800783e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007842:	4413      	add	r3, r2
 8007844:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800784c:	463b      	mov	r3, r7
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	b29a      	uxth	r2, r3
 8007854:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007858:	801a      	strh	r2, [r3, #0]
 800785a:	1d3b      	adds	r3, r7, #4
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007862:	463b      	mov	r3, r7
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d175      	bne.n	8007958 <USB_EPStartXfer+0xe40>
 800786c:	1d3b      	adds	r3, r7, #4
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007874:	1d3b      	adds	r3, r7, #4
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800787c:	b29b      	uxth	r3, r3
 800787e:	461a      	mov	r2, r3
 8007880:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007884:	4413      	add	r3, r2
 8007886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800788a:	463b      	mov	r3, r7
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	011a      	lsls	r2, r3, #4
 8007892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007896:	4413      	add	r3, r2
 8007898:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800789c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078a0:	463b      	mov	r3, r7
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d116      	bne.n	80078d8 <USB_EPStartXfer+0xdc0>
 80078aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078bc:	801a      	strh	r2, [r3, #0]
 80078be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078d4:	801a      	strh	r2, [r3, #0]
 80078d6:	e061      	b.n	800799c <USB_EPStartXfer+0xe84>
 80078d8:	463b      	mov	r3, r7
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	2b3e      	cmp	r3, #62	; 0x3e
 80078e0:	d81a      	bhi.n	8007918 <USB_EPStartXfer+0xe00>
 80078e2:	463b      	mov	r3, r7
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	085b      	lsrs	r3, r3, #1
 80078ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078ee:	463b      	mov	r3, r7
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <USB_EPStartXfer+0xdee>
 80078fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007900:	3301      	adds	r3, #1
 8007902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790a:	b29b      	uxth	r3, r3
 800790c:	029b      	lsls	r3, r3, #10
 800790e:	b29a      	uxth	r2, r3
 8007910:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007914:	801a      	strh	r2, [r3, #0]
 8007916:	e041      	b.n	800799c <USB_EPStartXfer+0xe84>
 8007918:	463b      	mov	r3, r7
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	095b      	lsrs	r3, r3, #5
 8007920:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007924:	463b      	mov	r3, r7
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	f003 031f 	and.w	r3, r3, #31
 800792e:	2b00      	cmp	r3, #0
 8007930:	d104      	bne.n	800793c <USB_EPStartXfer+0xe24>
 8007932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007936:	3b01      	subs	r3, #1
 8007938:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800793c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007940:	b29b      	uxth	r3, r3
 8007942:	029b      	lsls	r3, r3, #10
 8007944:	b29b      	uxth	r3, r3
 8007946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800794a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794e:	b29a      	uxth	r2, r3
 8007950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007954:	801a      	strh	r2, [r3, #0]
 8007956:	e021      	b.n	800799c <USB_EPStartXfer+0xe84>
 8007958:	463b      	mov	r3, r7
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d11c      	bne.n	800799c <USB_EPStartXfer+0xe84>
 8007962:	1d3b      	adds	r3, r7, #4
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800796a:	b29b      	uxth	r3, r3
 800796c:	461a      	mov	r2, r3
 800796e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007972:	4413      	add	r3, r2
 8007974:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007978:	463b      	mov	r3, r7
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	011a      	lsls	r2, r3, #4
 8007980:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007984:	4413      	add	r3, r2
 8007986:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800798a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800798e:	463b      	mov	r3, r7
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	b29a      	uxth	r2, r3
 8007996:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800799a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800799c:	463b      	mov	r3, r7
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 81a4 	beq.w	8007cf0 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80079a8:	1d3b      	adds	r3, r7, #4
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	463b      	mov	r3, r7
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80079bc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80079c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d005      	beq.n	80079d4 <USB_EPStartXfer+0xebc>
 80079c8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80079cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10d      	bne.n	80079f0 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80079d4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80079d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f040 8187 	bne.w	8007cf0 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80079e2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80079e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f040 8180 	bne.w	8007cf0 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80079f0:	1d3b      	adds	r3, r7, #4
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	463b      	mov	r3, r7
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4413      	add	r3, r2
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007a0e:	1d3b      	adds	r3, r7, #4
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	463b      	mov	r3, r7
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	441a      	add	r2, r3
 8007a1c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	8013      	strh	r3, [r2, #0]
 8007a34:	e15c      	b.n	8007cf0 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007a36:	463b      	mov	r3, r7
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	78db      	ldrb	r3, [r3, #3]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	f040 8155 	bne.w	8007cec <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007a42:	463b      	mov	r3, r7
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	699a      	ldr	r2, [r3, #24]
 8007a48:	463b      	mov	r3, r7
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d90e      	bls.n	8007a70 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8007a52:	463b      	mov	r3, r7
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8007a5c:	463b      	mov	r3, r7
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	699a      	ldr	r2, [r3, #24]
 8007a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a66:	1ad2      	subs	r2, r2, r3
 8007a68:	463b      	mov	r3, r7
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	619a      	str	r2, [r3, #24]
 8007a6e:	e008      	b.n	8007a82 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8007a70:	463b      	mov	r3, r7
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8007a7a:	463b      	mov	r3, r7
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007a82:	463b      	mov	r3, r7
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	785b      	ldrb	r3, [r3, #1]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d16f      	bne.n	8007b6c <USB_EPStartXfer+0x1054>
 8007a8c:	1d3b      	adds	r3, r7, #4
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a94:	1d3b      	adds	r3, r7, #4
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007aaa:	463b      	mov	r3, r7
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	011a      	lsls	r2, r3, #4
 8007ab2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007abc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d116      	bne.n	8007af6 <USB_EPStartXfer+0xfde>
 8007ac8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ada:	801a      	strh	r2, [r3, #0]
 8007adc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	e05f      	b.n	8007bb6 <USB_EPStartXfer+0x109e>
 8007af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007afa:	2b3e      	cmp	r3, #62	; 0x3e
 8007afc:	d818      	bhi.n	8007b30 <USB_EPStartXfer+0x1018>
 8007afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b02:	085b      	lsrs	r3, r3, #1
 8007b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d004      	beq.n	8007b1e <USB_EPStartXfer+0x1006>
 8007b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b18:	3301      	adds	r3, #1
 8007b1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	029b      	lsls	r3, r3, #10
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b2c:	801a      	strh	r2, [r3, #0]
 8007b2e:	e042      	b.n	8007bb6 <USB_EPStartXfer+0x109e>
 8007b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b3e:	f003 031f 	and.w	r3, r3, #31
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d104      	bne.n	8007b50 <USB_EPStartXfer+0x1038>
 8007b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	029b      	lsls	r3, r3, #10
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b68:	801a      	strh	r2, [r3, #0]
 8007b6a:	e024      	b.n	8007bb6 <USB_EPStartXfer+0x109e>
 8007b6c:	463b      	mov	r3, r7
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	785b      	ldrb	r3, [r3, #1]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d11f      	bne.n	8007bb6 <USB_EPStartXfer+0x109e>
 8007b76:	1d3b      	adds	r3, r7, #4
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b7e:	1d3b      	adds	r3, r7, #4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	461a      	mov	r2, r3
 8007b8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b8e:	4413      	add	r3, r2
 8007b90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b94:	463b      	mov	r3, r7
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	011a      	lsls	r2, r3, #4
 8007b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bb4:	801a      	strh	r2, [r3, #0]
 8007bb6:	1d3b      	adds	r3, r7, #4
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bbe:	463b      	mov	r3, r7
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	785b      	ldrb	r3, [r3, #1]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d16f      	bne.n	8007ca8 <USB_EPStartXfer+0x1190>
 8007bc8:	1d3b      	adds	r3, r7, #4
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bd0:	1d3b      	adds	r3, r7, #4
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007be0:	4413      	add	r3, r2
 8007be2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007be6:	463b      	mov	r3, r7
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	011a      	lsls	r2, r3, #4
 8007bee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d116      	bne.n	8007c32 <USB_EPStartXfer+0x111a>
 8007c04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c16:	801a      	strh	r2, [r3, #0]
 8007c18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	e05e      	b.n	8007cf0 <USB_EPStartXfer+0x11d8>
 8007c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c36:	2b3e      	cmp	r3, #62	; 0x3e
 8007c38:	d818      	bhi.n	8007c6c <USB_EPStartXfer+0x1154>
 8007c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c3e:	085b      	lsrs	r3, r3, #1
 8007c40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d004      	beq.n	8007c5a <USB_EPStartXfer+0x1142>
 8007c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c54:	3301      	adds	r3, #1
 8007c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	029b      	lsls	r3, r3, #10
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c68:	801a      	strh	r2, [r3, #0]
 8007c6a:	e041      	b.n	8007cf0 <USB_EPStartXfer+0x11d8>
 8007c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c70:	095b      	lsrs	r3, r3, #5
 8007c72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c7a:	f003 031f 	and.w	r3, r3, #31
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d104      	bne.n	8007c8c <USB_EPStartXfer+0x1174>
 8007c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c86:	3b01      	subs	r3, #1
 8007c88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	029b      	lsls	r3, r3, #10
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ca4:	801a      	strh	r2, [r3, #0]
 8007ca6:	e023      	b.n	8007cf0 <USB_EPStartXfer+0x11d8>
 8007ca8:	463b      	mov	r3, r7
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d11e      	bne.n	8007cf0 <USB_EPStartXfer+0x11d8>
 8007cb2:	1d3b      	adds	r3, r7, #4
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007cc8:	463b      	mov	r3, r7
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	011a      	lsls	r2, r3, #4
 8007cd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ce8:	801a      	strh	r2, [r3, #0]
 8007cea:	e001      	b.n	8007cf0 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e02e      	b.n	8007d4e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cf0:	1d3b      	adds	r3, r7, #4
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007d0e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007d12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d16:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007d1a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007d1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d22:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007d26:	1d3b      	adds	r3, r7, #4
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	463b      	mov	r3, r7
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	441a      	add	r2, r3
 8007d34:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d020      	beq.n	8007dac <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d80:	81bb      	strh	r3, [r7, #12]
 8007d82:	89bb      	ldrh	r3, [r7, #12]
 8007d84:	f083 0310 	eor.w	r3, r3, #16
 8007d88:	81bb      	strh	r3, [r7, #12]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	441a      	add	r2, r3
 8007d94:	89bb      	ldrh	r3, [r7, #12]
 8007d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	8013      	strh	r3, [r2, #0]
 8007daa:	e01f      	b.n	8007dec <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc2:	81fb      	strh	r3, [r7, #14]
 8007dc4:	89fb      	ldrh	r3, [r7, #14]
 8007dc6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007dca:	81fb      	strh	r3, [r7, #14]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	441a      	add	r2, r3
 8007dd6:	89fb      	ldrh	r3, [r7, #14]
 8007dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bc80      	pop	{r7}
 8007df6:	4770      	bx	lr

08007df8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	7b1b      	ldrb	r3, [r3, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f040 809d 	bne.w	8007f46 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	785b      	ldrb	r3, [r3, #1]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d04c      	beq.n	8007eae <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	823b      	strh	r3, [r7, #16]
 8007e22:	8a3b      	ldrh	r3, [r7, #16]
 8007e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01b      	beq.n	8007e64 <USB_EPClearStall+0x6c>
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e42:	81fb      	strh	r3, [r7, #14]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	441a      	add	r2, r3
 8007e4e:	89fb      	ldrh	r3, [r7, #14]
 8007e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	78db      	ldrb	r3, [r3, #3]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d06c      	beq.n	8007f46 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e82:	81bb      	strh	r3, [r7, #12]
 8007e84:	89bb      	ldrh	r3, [r7, #12]
 8007e86:	f083 0320 	eor.w	r3, r3, #32
 8007e8a:	81bb      	strh	r3, [r7, #12]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	441a      	add	r2, r3
 8007e96:	89bb      	ldrh	r3, [r7, #12]
 8007e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	8013      	strh	r3, [r2, #0]
 8007eac:	e04b      	b.n	8007f46 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	82fb      	strh	r3, [r7, #22]
 8007ebc:	8afb      	ldrh	r3, [r7, #22]
 8007ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d01b      	beq.n	8007efe <USB_EPClearStall+0x106>
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007edc:	82bb      	strh	r3, [r7, #20]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	441a      	add	r2, r3
 8007ee8:	8abb      	ldrh	r3, [r7, #20]
 8007eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f14:	827b      	strh	r3, [r7, #18]
 8007f16:	8a7b      	ldrh	r3, [r7, #18]
 8007f18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f1c:	827b      	strh	r3, [r7, #18]
 8007f1e:	8a7b      	ldrh	r3, [r7, #18]
 8007f20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f24:	827b      	strh	r3, [r7, #18]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	441a      	add	r2, r3
 8007f30:	8a7b      	ldrh	r3, [r7, #18]
 8007f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	371c      	adds	r7, #28
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bc80      	pop	{r7}
 8007f50:	4770      	bx	lr

08007f52 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d103      	bne.n	8007f6c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2280      	movs	r2, #128	; 0x80
 8007f68:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bc80      	pop	{r7}
 8007f76:	4770      	bx	lr

08007f78 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bc80      	pop	{r7}
 8007f8a:	4770      	bx	lr

08007f8c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc80      	pop	{r7}
 8007f9e:	4770      	bx	lr

08007fa0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bc80      	pop	{r7}
 8007fbc:	4770      	bx	lr

08007fbe <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bc80      	pop	{r7}
 8007fd2:	4770      	bx	lr

08007fd4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b08d      	sub	sp, #52	; 0x34
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	4611      	mov	r1, r2
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	80fb      	strh	r3, [r7, #6]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007fea:	88bb      	ldrh	r3, [r7, #4]
 8007fec:	3301      	adds	r3, #1
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ffa:	88fb      	ldrh	r3, [r7, #6]
 8007ffc:	005a      	lsls	r2, r3, #1
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008006:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800800c:	e01e      	b.n	800804c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	3301      	adds	r3, #1
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	b29b      	uxth	r3, r3
 8008024:	461a      	mov	r2, r3
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	4313      	orrs	r3, r2
 800802a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	b29a      	uxth	r2, r3
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	3302      	adds	r3, #2
 8008038:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	3302      	adds	r3, #2
 800803e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	3301      	adds	r3, #1
 8008044:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	3b01      	subs	r3, #1
 800804a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1dd      	bne.n	800800e <USB_WritePMA+0x3a>
  }
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	3734      	adds	r7, #52	; 0x34
 8008058:	46bd      	mov	sp, r7
 800805a:	bc80      	pop	{r7}
 800805c:	4770      	bx	lr

0800805e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800805e:	b480      	push	{r7}
 8008060:	b08b      	sub	sp, #44	; 0x2c
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	4611      	mov	r1, r2
 800806a:	461a      	mov	r2, r3
 800806c:	460b      	mov	r3, r1
 800806e:	80fb      	strh	r3, [r7, #6]
 8008070:	4613      	mov	r3, r2
 8008072:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008074:	88bb      	ldrh	r3, [r7, #4]
 8008076:	085b      	lsrs	r3, r3, #1
 8008078:	b29b      	uxth	r3, r3
 800807a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008084:	88fb      	ldrh	r3, [r7, #6]
 8008086:	005a      	lsls	r2, r3, #1
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008090:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
 8008096:	e01b      	b.n	80080d0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	3302      	adds	r3, #2
 80080a4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	3301      	adds	r3, #1
 80080b2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	0a1b      	lsrs	r3, r3, #8
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	3301      	adds	r3, #1
 80080c2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	3302      	adds	r3, #2
 80080c8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	3b01      	subs	r3, #1
 80080ce:	627b      	str	r3, [r7, #36]	; 0x24
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1e0      	bne.n	8008098 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80080d6:	88bb      	ldrh	r3, [r7, #4]
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	b29b      	uxth	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d007      	beq.n	80080f2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80080e2:	6a3b      	ldr	r3, [r7, #32]
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	701a      	strb	r2, [r3, #0]
  }
}
 80080f2:	bf00      	nop
 80080f4:	372c      	adds	r7, #44	; 0x2c
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bc80      	pop	{r7}
 80080fa:	4770      	bx	lr

080080fc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008108:	2304      	movs	r3, #4
 800810a:	2203      	movs	r2, #3
 800810c:	2181      	movs	r1, #129	; 0x81
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 fc69 	bl	80099e6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800811a:	2010      	movs	r0, #16
 800811c:	f001 fd78 	bl	8009c10 <USBD_static_malloc>
 8008120:	4602      	mov	r2, r0
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8008132:	2302      	movs	r3, #2
 8008134:	e005      	b.n	8008142 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813c:	2200      	movs	r2, #0
 800813e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008156:	2181      	movs	r1, #129	; 0x81
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 fc6a 	bl	8009a32 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816a:	2b00      	cmp	r3, #0
 800816c:	d009      	beq.n	8008182 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008174:	4618      	mov	r0, r3
 8008176:	f001 fd57 	bl	8009c28 <USBD_static_free>
    pdev->pClassData = NULL;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d045      	beq.n	8008246 <USBD_HID_Setup+0xba>
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	f040 80d3 	bne.w	8008366 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	785b      	ldrb	r3, [r3, #1]
 80081c4:	3b02      	subs	r3, #2
 80081c6:	2b09      	cmp	r3, #9
 80081c8:	d835      	bhi.n	8008236 <USBD_HID_Setup+0xaa>
 80081ca:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <USBD_HID_Setup+0x44>)
 80081cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d0:	08008227 	.word	0x08008227
 80081d4:	08008207 	.word	0x08008207
 80081d8:	08008237 	.word	0x08008237
 80081dc:	08008237 	.word	0x08008237
 80081e0:	08008237 	.word	0x08008237
 80081e4:	08008237 	.word	0x08008237
 80081e8:	08008237 	.word	0x08008237
 80081ec:	08008237 	.word	0x08008237
 80081f0:	08008215 	.word	0x08008215
 80081f4:	080081f9 	.word	0x080081f9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	885b      	ldrh	r3, [r3, #2]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	461a      	mov	r2, r3
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	601a      	str	r2, [r3, #0]
          break;
 8008204:	e01e      	b.n	8008244 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2201      	movs	r2, #1
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 f922 	bl	8009456 <USBD_CtlSendData>
          break;
 8008212:	e017      	b.n	8008244 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	885b      	ldrh	r3, [r3, #2]
 8008218:	0a1b      	lsrs	r3, r3, #8
 800821a:	b29b      	uxth	r3, r3
 800821c:	b2db      	uxtb	r3, r3
 800821e:	461a      	mov	r2, r3
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	605a      	str	r2, [r3, #4]
          break;
 8008224:	e00e      	b.n	8008244 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	3304      	adds	r3, #4
 800822a:	2201      	movs	r2, #1
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f001 f911 	bl	8009456 <USBD_CtlSendData>
          break;
 8008234:	e006      	b.n	8008244 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 f8a2 	bl	8009382 <USBD_CtlError>
          ret = USBD_FAIL;
 800823e:	2302      	movs	r3, #2
 8008240:	75fb      	strb	r3, [r7, #23]
          break;
 8008242:	bf00      	nop
      }
      break;
 8008244:	e096      	b.n	8008374 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	785b      	ldrb	r3, [r3, #1]
 800824a:	2b0b      	cmp	r3, #11
 800824c:	f200 8083 	bhi.w	8008356 <USBD_HID_Setup+0x1ca>
 8008250:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <USBD_HID_Setup+0xcc>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	08008289 	.word	0x08008289
 800825c:	08008357 	.word	0x08008357
 8008260:	08008357 	.word	0x08008357
 8008264:	08008357 	.word	0x08008357
 8008268:	08008357 	.word	0x08008357
 800826c:	08008357 	.word	0x08008357
 8008270:	080082b1 	.word	0x080082b1
 8008274:	08008357 	.word	0x08008357
 8008278:	08008357 	.word	0x08008357
 800827c:	08008357 	.word	0x08008357
 8008280:	08008309 	.word	0x08008309
 8008284:	08008331 	.word	0x08008331
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828e:	2b03      	cmp	r3, #3
 8008290:	d107      	bne.n	80082a2 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008292:	f107 030e 	add.w	r3, r7, #14
 8008296:	2202      	movs	r2, #2
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f001 f8db 	bl	8009456 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082a0:	e060      	b.n	8008364 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 f86c 	bl	8009382 <USBD_CtlError>
            ret = USBD_FAIL;
 80082aa:	2302      	movs	r3, #2
 80082ac:	75fb      	strb	r3, [r7, #23]
          break;
 80082ae:	e059      	b.n	8008364 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	885b      	ldrh	r3, [r3, #2]
 80082b4:	0a1b      	lsrs	r3, r3, #8
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	2b22      	cmp	r3, #34	; 0x22
 80082ba:	d108      	bne.n	80082ce <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	88db      	ldrh	r3, [r3, #6]
 80082c0:	2b4a      	cmp	r3, #74	; 0x4a
 80082c2:	bf28      	it	cs
 80082c4:	234a      	movcs	r3, #74	; 0x4a
 80082c6:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80082c8:	4b2d      	ldr	r3, [pc, #180]	; (8008380 <USBD_HID_Setup+0x1f4>)
 80082ca:	61bb      	str	r3, [r7, #24]
 80082cc:	e015      	b.n	80082fa <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	885b      	ldrh	r3, [r3, #2]
 80082d2:	0a1b      	lsrs	r3, r3, #8
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	2b21      	cmp	r3, #33	; 0x21
 80082d8:	d108      	bne.n	80082ec <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80082da:	4b2a      	ldr	r3, [pc, #168]	; (8008384 <USBD_HID_Setup+0x1f8>)
 80082dc:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	88db      	ldrh	r3, [r3, #6]
 80082e2:	2b09      	cmp	r3, #9
 80082e4:	bf28      	it	cs
 80082e6:	2309      	movcs	r3, #9
 80082e8:	83fb      	strh	r3, [r7, #30]
 80082ea:	e006      	b.n	80082fa <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 f847 	bl	8009382 <USBD_CtlError>
            ret = USBD_FAIL;
 80082f4:	2302      	movs	r3, #2
 80082f6:	75fb      	strb	r3, [r7, #23]
            break;
 80082f8:	e034      	b.n	8008364 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80082fa:	8bfb      	ldrh	r3, [r7, #30]
 80082fc:	461a      	mov	r2, r3
 80082fe:	69b9      	ldr	r1, [r7, #24]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f001 f8a8 	bl	8009456 <USBD_CtlSendData>
          break;
 8008306:	e02d      	b.n	8008364 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830e:	2b03      	cmp	r3, #3
 8008310:	d107      	bne.n	8008322 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	3308      	adds	r3, #8
 8008316:	2201      	movs	r2, #1
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 f89b 	bl	8009456 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008320:	e020      	b.n	8008364 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 f82c 	bl	8009382 <USBD_CtlError>
            ret = USBD_FAIL;
 800832a:	2302      	movs	r3, #2
 800832c:	75fb      	strb	r3, [r7, #23]
          break;
 800832e:	e019      	b.n	8008364 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008336:	2b03      	cmp	r3, #3
 8008338:	d106      	bne.n	8008348 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	885b      	ldrh	r3, [r3, #2]
 800833e:	b2db      	uxtb	r3, r3
 8008340:	461a      	mov	r2, r3
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008346:	e00d      	b.n	8008364 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f001 f819 	bl	8009382 <USBD_CtlError>
            ret = USBD_FAIL;
 8008350:	2302      	movs	r3, #2
 8008352:	75fb      	strb	r3, [r7, #23]
          break;
 8008354:	e006      	b.n	8008364 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 f812 	bl	8009382 <USBD_CtlError>
          ret = USBD_FAIL;
 800835e:	2302      	movs	r3, #2
 8008360:	75fb      	strb	r3, [r7, #23]
          break;
 8008362:	bf00      	nop
      }
      break;
 8008364:	e006      	b.n	8008374 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 f80a 	bl	8009382 <USBD_CtlError>
      ret = USBD_FAIL;
 800836e:	2302      	movs	r3, #2
 8008370:	75fb      	strb	r3, [r7, #23]
      break;
 8008372:	bf00      	nop
  }

  return ret;
 8008374:	7dfb      	ldrb	r3, [r7, #23]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3720      	adds	r7, #32
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	200000d4 	.word	0x200000d4
 8008384:	200000bc 	.word	0x200000bc

08008388 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2222      	movs	r2, #34	; 0x22
 8008394:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8008396:	4b03      	ldr	r3, [pc, #12]	; (80083a4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	bc80      	pop	{r7}
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	20000050 	.word	0x20000050

080083a8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2222      	movs	r2, #34	; 0x22
 80083b4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80083b6:	4b03      	ldr	r3, [pc, #12]	; (80083c4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc80      	pop	{r7}
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	20000074 	.word	0x20000074

080083c8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2222      	movs	r2, #34	; 0x22
 80083d4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80083d6:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	bc80      	pop	{r7}
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	20000098 	.word	0x20000098

080083e8 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fa:	2200      	movs	r2, #0
 80083fc:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	bc80      	pop	{r7}
 8008408:	4770      	bx	lr
	...

0800840c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	220a      	movs	r2, #10
 8008418:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800841a:	4b03      	ldr	r3, [pc, #12]	; (8008428 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800841c:	4618      	mov	r0, r3
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	bc80      	pop	{r7}
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	200000c8 	.word	0x200000c8

0800842c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008440:	2302      	movs	r3, #2
 8008442:	e01a      	b.n	800847a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	79fa      	ldrb	r2, [r7, #7]
 8008470:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f001 fa54 	bl	8009920 <USBD_LL_Init>

  return USBD_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d006      	beq.n	80084a4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]
 80084a2:	e001      	b.n	80084a8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80084a4:	2302      	movs	r3, #2
 80084a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bc80      	pop	{r7}
 80084b2:	4770      	bx	lr

080084b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 fa77 	bl	80099b0 <USBD_LL_Start>

  return USBD_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	bc80      	pop	{r7}
 80084de:	4770      	bx	lr

080084e0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80084ec:	2302      	movs	r3, #2
 80084ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00c      	beq.n	8008514 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	78fa      	ldrb	r2, [r7, #3]
 8008504:	4611      	mov	r1, r2
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	4798      	blx	r3
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008514:	7bfb      	ldrb	r3, [r7, #15]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	460b      	mov	r3, r1
 8008528:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	78fa      	ldrb	r2, [r7, #3]
 8008534:	4611      	mov	r1, r2
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	4798      	blx	r3

  return USBD_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fed7 	bl	800930a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008578:	f003 031f 	and.w	r3, r3, #31
 800857c:	2b02      	cmp	r3, #2
 800857e:	d016      	beq.n	80085ae <USBD_LL_SetupStage+0x6a>
 8008580:	2b02      	cmp	r3, #2
 8008582:	d81c      	bhi.n	80085be <USBD_LL_SetupStage+0x7a>
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <USBD_LL_SetupStage+0x4a>
 8008588:	2b01      	cmp	r3, #1
 800858a:	d008      	beq.n	800859e <USBD_LL_SetupStage+0x5a>
 800858c:	e017      	b.n	80085be <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f9ca 	bl	8008930 <USBD_StdDevReq>
      break;
 800859c:	e01a      	b.n	80085d4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fa2c 	bl	8008a04 <USBD_StdItfReq>
      break;
 80085ac:	e012      	b.n	80085d4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fa6c 	bl	8008a94 <USBD_StdEPReq>
      break;
 80085bc:	e00a      	b.n	80085d4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80085c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 fa4f 	bl	8009a70 <USBD_LL_StallEP>
      break;
 80085d2:	bf00      	nop
  }

  return USBD_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b086      	sub	sp, #24
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	460b      	mov	r3, r1
 80085e8:	607a      	str	r2, [r7, #4]
 80085ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80085ec:	7afb      	ldrb	r3, [r7, #11]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d14b      	bne.n	800868a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80085f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008600:	2b03      	cmp	r3, #3
 8008602:	d134      	bne.n	800866e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	68da      	ldr	r2, [r3, #12]
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	429a      	cmp	r2, r3
 800860e:	d919      	bls.n	8008644 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	68da      	ldr	r2, [r3, #12]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	1ad2      	subs	r2, r2, r3
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008626:	429a      	cmp	r2, r3
 8008628:	d203      	bcs.n	8008632 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800862e:	b29b      	uxth	r3, r3
 8008630:	e002      	b.n	8008638 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008636:	b29b      	uxth	r3, r3
 8008638:	461a      	mov	r2, r3
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 ff38 	bl	80094b2 <USBD_CtlContinueRx>
 8008642:	e038      	b.n	80086b6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008656:	2b03      	cmp	r3, #3
 8008658:	d105      	bne.n	8008666 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 ff35 	bl	80094d6 <USBD_CtlSendStatus>
 800866c:	e023      	b.n	80086b6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008674:	2b05      	cmp	r3, #5
 8008676:	d11e      	bne.n	80086b6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008680:	2100      	movs	r1, #0
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f001 f9f4 	bl	8009a70 <USBD_LL_StallEP>
 8008688:	e015      	b.n	80086b6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00d      	beq.n	80086b2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800869c:	2b03      	cmp	r3, #3
 800869e:	d108      	bne.n	80086b2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	7afa      	ldrb	r2, [r7, #11]
 80086aa:	4611      	mov	r1, r2
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	4798      	blx	r3
 80086b0:	e001      	b.n	80086b6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086b2:	2302      	movs	r3, #2
 80086b4:	e000      	b.n	80086b8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3718      	adds	r7, #24
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	460b      	mov	r3, r1
 80086ca:	607a      	str	r2, [r7, #4]
 80086cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80086ce:	7afb      	ldrb	r3, [r7, #11]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d17f      	bne.n	80087d4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3314      	adds	r3, #20
 80086d8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d15c      	bne.n	800879e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	68da      	ldr	r2, [r3, #12]
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d915      	bls.n	800871c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	68da      	ldr	r2, [r3, #12]
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	1ad2      	subs	r2, r2, r3
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	b29b      	uxth	r3, r3
 8008704:	461a      	mov	r2, r3
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 fec0 	bl	800948e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800870e:	2300      	movs	r3, #0
 8008710:	2200      	movs	r2, #0
 8008712:	2100      	movs	r1, #0
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f001 fa57 	bl	8009bc8 <USBD_LL_PrepareReceive>
 800871a:	e04e      	b.n	80087ba <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	6912      	ldr	r2, [r2, #16]
 8008724:	fbb3 f1f2 	udiv	r1, r3, r2
 8008728:	fb02 f201 	mul.w	r2, r2, r1
 800872c:	1a9b      	subs	r3, r3, r2
 800872e:	2b00      	cmp	r3, #0
 8008730:	d11c      	bne.n	800876c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800873a:	429a      	cmp	r2, r3
 800873c:	d316      	bcc.n	800876c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	689a      	ldr	r2, [r3, #8]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008748:	429a      	cmp	r2, r3
 800874a:	d20f      	bcs.n	800876c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800874c:	2200      	movs	r2, #0
 800874e:	2100      	movs	r1, #0
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 fe9c 	bl	800948e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800875e:	2300      	movs	r3, #0
 8008760:	2200      	movs	r2, #0
 8008762:	2100      	movs	r1, #0
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f001 fa2f 	bl	8009bc8 <USBD_LL_PrepareReceive>
 800876a:	e026      	b.n	80087ba <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800877e:	2b03      	cmp	r3, #3
 8008780:	d105      	bne.n	800878e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800878e:	2180      	movs	r1, #128	; 0x80
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f001 f96d 	bl	8009a70 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 feb0 	bl	80094fc <USBD_CtlReceiveStatus>
 800879c:	e00d      	b.n	80087ba <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d004      	beq.n	80087b2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d103      	bne.n	80087ba <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80087b2:	2180      	movs	r1, #128	; 0x80
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f001 f95b 	bl	8009a70 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d11d      	bne.n	8008800 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f7ff fe81 	bl	80084cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80087d2:	e015      	b.n	8008800 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00d      	beq.n	80087fc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d108      	bne.n	80087fc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	7afa      	ldrb	r2, [r7, #11]
 80087f4:	4611      	mov	r1, r2
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	4798      	blx	r3
 80087fa:	e001      	b.n	8008800 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087fc:	2302      	movs	r3, #2
 80087fe:	e000      	b.n	8008802 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3718      	adds	r7, #24
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b082      	sub	sp, #8
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008812:	2340      	movs	r3, #64	; 0x40
 8008814:	2200      	movs	r2, #0
 8008816:	2100      	movs	r1, #0
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f001 f8e4 	bl	80099e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2240      	movs	r2, #64	; 0x40
 800882a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800882e:	2340      	movs	r3, #64	; 0x40
 8008830:	2200      	movs	r2, #0
 8008832:	2180      	movs	r1, #128	; 0x80
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f001 f8d6 	bl	80099e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2240      	movs	r2, #64	; 0x40
 8008844:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800886a:	2b00      	cmp	r3, #0
 800886c:	d009      	beq.n	8008882 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	6852      	ldr	r2, [r2, #4]
 800887a:	b2d2      	uxtb	r2, r2
 800887c:	4611      	mov	r1, r2
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	4798      	blx	r3
  }

  return USBD_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	78fa      	ldrb	r2, [r7, #3]
 800889c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bc80      	pop	{r7}
 80088a8:	4770      	bx	lr

080088aa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b083      	sub	sp, #12
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2204      	movs	r2, #4
 80088c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bc80      	pop	{r7}
 80088d0:	4770      	bx	lr

080088d2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e0:	2b04      	cmp	r3, #4
 80088e2:	d105      	bne.n	80088f0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bc80      	pop	{r7}
 80088fa:	4770      	bx	lr

080088fc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890a:	2b03      	cmp	r3, #3
 800890c:	d10b      	bne.n	8008926 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d005      	beq.n	8008926 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800893a:	2300      	movs	r3, #0
 800893c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008946:	2b40      	cmp	r3, #64	; 0x40
 8008948:	d005      	beq.n	8008956 <USBD_StdDevReq+0x26>
 800894a:	2b40      	cmp	r3, #64	; 0x40
 800894c:	d84f      	bhi.n	80089ee <USBD_StdDevReq+0xbe>
 800894e:	2b00      	cmp	r3, #0
 8008950:	d009      	beq.n	8008966 <USBD_StdDevReq+0x36>
 8008952:	2b20      	cmp	r3, #32
 8008954:	d14b      	bne.n	80089ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	4798      	blx	r3
      break;
 8008964:	e048      	b.n	80089f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	785b      	ldrb	r3, [r3, #1]
 800896a:	2b09      	cmp	r3, #9
 800896c:	d839      	bhi.n	80089e2 <USBD_StdDevReq+0xb2>
 800896e:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <USBD_StdDevReq+0x44>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	080089c5 	.word	0x080089c5
 8008978:	080089d9 	.word	0x080089d9
 800897c:	080089e3 	.word	0x080089e3
 8008980:	080089cf 	.word	0x080089cf
 8008984:	080089e3 	.word	0x080089e3
 8008988:	080089a7 	.word	0x080089a7
 800898c:	0800899d 	.word	0x0800899d
 8008990:	080089e3 	.word	0x080089e3
 8008994:	080089bb 	.word	0x080089bb
 8008998:	080089b1 	.word	0x080089b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f9dc 	bl	8008d5c <USBD_GetDescriptor>
          break;
 80089a4:	e022      	b.n	80089ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fb3f 	bl	800902c <USBD_SetAddress>
          break;
 80089ae:	e01d      	b.n	80089ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fb7e 	bl	80090b4 <USBD_SetConfig>
          break;
 80089b8:	e018      	b.n	80089ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fc07 	bl	80091d0 <USBD_GetConfig>
          break;
 80089c2:	e013      	b.n	80089ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fc37 	bl	800923a <USBD_GetStatus>
          break;
 80089cc:	e00e      	b.n	80089ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fc65 	bl	80092a0 <USBD_SetFeature>
          break;
 80089d6:	e009      	b.n	80089ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fc74 	bl	80092c8 <USBD_ClrFeature>
          break;
 80089e0:	e004      	b.n	80089ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fccc 	bl	8009382 <USBD_CtlError>
          break;
 80089ea:	bf00      	nop
      }
      break;
 80089ec:	e004      	b.n	80089f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fcc6 	bl	8009382 <USBD_CtlError>
      break;
 80089f6:	bf00      	nop
  }

  return ret;
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop

08008a04 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a1a:	2b40      	cmp	r3, #64	; 0x40
 8008a1c:	d005      	beq.n	8008a2a <USBD_StdItfReq+0x26>
 8008a1e:	2b40      	cmp	r3, #64	; 0x40
 8008a20:	d82e      	bhi.n	8008a80 <USBD_StdItfReq+0x7c>
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <USBD_StdItfReq+0x26>
 8008a26:	2b20      	cmp	r3, #32
 8008a28:	d12a      	bne.n	8008a80 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a30:	3b01      	subs	r3, #1
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d81d      	bhi.n	8008a72 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	889b      	ldrh	r3, [r3, #4]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d813      	bhi.n	8008a68 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	4798      	blx	r3
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	88db      	ldrh	r3, [r3, #6]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d110      	bne.n	8008a7c <USBD_StdItfReq+0x78>
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10d      	bne.n	8008a7c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fd38 	bl	80094d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a66:	e009      	b.n	8008a7c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fc89 	bl	8009382 <USBD_CtlError>
          break;
 8008a70:	e004      	b.n	8008a7c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fc84 	bl	8009382 <USBD_CtlError>
          break;
 8008a7a:	e000      	b.n	8008a7e <USBD_StdItfReq+0x7a>
          break;
 8008a7c:	bf00      	nop
      }
      break;
 8008a7e:	e004      	b.n	8008a8a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fc7d 	bl	8009382 <USBD_CtlError>
      break;
 8008a88:	bf00      	nop
  }

  return USBD_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	889b      	ldrh	r3, [r3, #4]
 8008aa6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ab0:	2b40      	cmp	r3, #64	; 0x40
 8008ab2:	d007      	beq.n	8008ac4 <USBD_StdEPReq+0x30>
 8008ab4:	2b40      	cmp	r3, #64	; 0x40
 8008ab6:	f200 8146 	bhi.w	8008d46 <USBD_StdEPReq+0x2b2>
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <USBD_StdEPReq+0x40>
 8008abe:	2b20      	cmp	r3, #32
 8008ac0:	f040 8141 	bne.w	8008d46 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	4798      	blx	r3
      break;
 8008ad2:	e13d      	b.n	8008d50 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	d10a      	bne.n	8008af6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	4798      	blx	r3
 8008aee:	4603      	mov	r3, r0
 8008af0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	e12d      	b.n	8008d52 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	785b      	ldrb	r3, [r3, #1]
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d007      	beq.n	8008b0e <USBD_StdEPReq+0x7a>
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	f300 811b 	bgt.w	8008d3a <USBD_StdEPReq+0x2a6>
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d072      	beq.n	8008bee <USBD_StdEPReq+0x15a>
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d03a      	beq.n	8008b82 <USBD_StdEPReq+0xee>
 8008b0c:	e115      	b.n	8008d3a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d002      	beq.n	8008b1e <USBD_StdEPReq+0x8a>
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	d015      	beq.n	8008b48 <USBD_StdEPReq+0xb4>
 8008b1c:	e02b      	b.n	8008b76 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00c      	beq.n	8008b3e <USBD_StdEPReq+0xaa>
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	2b80      	cmp	r3, #128	; 0x80
 8008b28:	d009      	beq.n	8008b3e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 ff9e 	bl	8009a70 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b34:	2180      	movs	r1, #128	; 0x80
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 ff9a 	bl	8009a70 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b3c:	e020      	b.n	8008b80 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fc1e 	bl	8009382 <USBD_CtlError>
              break;
 8008b46:	e01b      	b.n	8008b80 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	885b      	ldrh	r3, [r3, #2]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10e      	bne.n	8008b6e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00b      	beq.n	8008b6e <USBD_StdEPReq+0xda>
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
 8008b58:	2b80      	cmp	r3, #128	; 0x80
 8008b5a:	d008      	beq.n	8008b6e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	88db      	ldrh	r3, [r3, #6]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d104      	bne.n	8008b6e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 ff81 	bl	8009a70 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fcb1 	bl	80094d6 <USBD_CtlSendStatus>

              break;
 8008b74:	e004      	b.n	8008b80 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fc02 	bl	8009382 <USBD_CtlError>
              break;
 8008b7e:	bf00      	nop
          }
          break;
 8008b80:	e0e0      	b.n	8008d44 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d002      	beq.n	8008b92 <USBD_StdEPReq+0xfe>
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d015      	beq.n	8008bbc <USBD_StdEPReq+0x128>
 8008b90:	e026      	b.n	8008be0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00c      	beq.n	8008bb2 <USBD_StdEPReq+0x11e>
 8008b98:	7bbb      	ldrb	r3, [r7, #14]
 8008b9a:	2b80      	cmp	r3, #128	; 0x80
 8008b9c:	d009      	beq.n	8008bb2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 ff64 	bl	8009a70 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ba8:	2180      	movs	r1, #128	; 0x80
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 ff60 	bl	8009a70 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bb0:	e01c      	b.n	8008bec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fbe4 	bl	8009382 <USBD_CtlError>
              break;
 8008bba:	e017      	b.n	8008bec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	885b      	ldrh	r3, [r3, #2]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d112      	bne.n	8008bea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d004      	beq.n	8008bd8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 ff6b 	bl	8009aae <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fc7c 	bl	80094d6 <USBD_CtlSendStatus>
              }
              break;
 8008bde:	e004      	b.n	8008bea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fbcd 	bl	8009382 <USBD_CtlError>
              break;
 8008be8:	e000      	b.n	8008bec <USBD_StdEPReq+0x158>
              break;
 8008bea:	bf00      	nop
          }
          break;
 8008bec:	e0aa      	b.n	8008d44 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d002      	beq.n	8008bfe <USBD_StdEPReq+0x16a>
 8008bf8:	2b03      	cmp	r3, #3
 8008bfa:	d032      	beq.n	8008c62 <USBD_StdEPReq+0x1ce>
 8008bfc:	e097      	b.n	8008d2e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d007      	beq.n	8008c14 <USBD_StdEPReq+0x180>
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	2b80      	cmp	r3, #128	; 0x80
 8008c08:	d004      	beq.n	8008c14 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fbb8 	bl	8009382 <USBD_CtlError>
                break;
 8008c12:	e091      	b.n	8008d38 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	da0b      	bge.n	8008c34 <USBD_StdEPReq+0x1a0>
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c22:	4613      	mov	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	3310      	adds	r3, #16
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	4413      	add	r3, r2
 8008c30:	3304      	adds	r3, #4
 8008c32:	e00b      	b.n	8008c4c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	4413      	add	r3, r2
 8008c4a:	3304      	adds	r3, #4
 8008c4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2200      	movs	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2202      	movs	r2, #2
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fbfb 	bl	8009456 <USBD_CtlSendData>
              break;
 8008c60:	e06a      	b.n	8008d38 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	da11      	bge.n	8008c8e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	f003 020f 	and.w	r2, r3, #15
 8008c70:	6879      	ldr	r1, [r7, #4]
 8008c72:	4613      	mov	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	440b      	add	r3, r1
 8008c7c:	3318      	adds	r3, #24
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d117      	bne.n	8008cb4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fb7b 	bl	8009382 <USBD_CtlError>
                  break;
 8008c8c:	e054      	b.n	8008d38 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	f003 020f 	and.w	r2, r3, #15
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	4613      	mov	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	440b      	add	r3, r1
 8008ca0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d104      	bne.n	8008cb4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fb68 	bl	8009382 <USBD_CtlError>
                  break;
 8008cb2:	e041      	b.n	8008d38 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	da0b      	bge.n	8008cd4 <USBD_StdEPReq+0x240>
 8008cbc:	7bbb      	ldrb	r3, [r7, #14]
 8008cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	3310      	adds	r3, #16
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	4413      	add	r3, r2
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	e00b      	b.n	8008cec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
 8008cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cda:	4613      	mov	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	4413      	add	r3, r2
 8008cea:	3304      	adds	r3, #4
 8008cec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <USBD_StdEPReq+0x266>
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b80      	cmp	r3, #128	; 0x80
 8008cf8:	d103      	bne.n	8008d02 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	e00e      	b.n	8008d20 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008d02:	7bbb      	ldrb	r3, [r7, #14]
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fef0 	bl	8009aec <USBD_LL_IsStallEP>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2201      	movs	r2, #1
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	e002      	b.n	8008d20 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2202      	movs	r2, #2
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fb95 	bl	8009456 <USBD_CtlSendData>
              break;
 8008d2c:	e004      	b.n	8008d38 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fb26 	bl	8009382 <USBD_CtlError>
              break;
 8008d36:	bf00      	nop
          }
          break;
 8008d38:	e004      	b.n	8008d44 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fb20 	bl	8009382 <USBD_CtlError>
          break;
 8008d42:	bf00      	nop
      }
      break;
 8008d44:	e004      	b.n	8008d50 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fb1a 	bl	8009382 <USBD_CtlError>
      break;
 8008d4e:	bf00      	nop
  }

  return ret;
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
	...

08008d5c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	885b      	ldrh	r3, [r3, #2]
 8008d76:	0a1b      	lsrs	r3, r3, #8
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	2b06      	cmp	r3, #6
 8008d7e:	f200 8128 	bhi.w	8008fd2 <USBD_GetDescriptor+0x276>
 8008d82:	a201      	add	r2, pc, #4	; (adr r2, 8008d88 <USBD_GetDescriptor+0x2c>)
 8008d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d88:	08008da5 	.word	0x08008da5
 8008d8c:	08008dbd 	.word	0x08008dbd
 8008d90:	08008dfd 	.word	0x08008dfd
 8008d94:	08008fd3 	.word	0x08008fd3
 8008d98:	08008fd3 	.word	0x08008fd3
 8008d9c:	08008f73 	.word	0x08008f73
 8008da0:	08008f9f 	.word	0x08008f9f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	7c12      	ldrb	r2, [r2, #16]
 8008db0:	f107 0108 	add.w	r1, r7, #8
 8008db4:	4610      	mov	r0, r2
 8008db6:	4798      	blx	r3
 8008db8:	60f8      	str	r0, [r7, #12]
      break;
 8008dba:	e112      	b.n	8008fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	7c1b      	ldrb	r3, [r3, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10d      	bne.n	8008de0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dcc:	f107 0208 	add.w	r2, r7, #8
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	4798      	blx	r3
 8008dd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	2202      	movs	r2, #2
 8008ddc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008dde:	e100      	b.n	8008fe2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	f107 0208 	add.w	r2, r7, #8
 8008dec:	4610      	mov	r0, r2
 8008dee:	4798      	blx	r3
 8008df0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	3301      	adds	r3, #1
 8008df6:	2202      	movs	r2, #2
 8008df8:	701a      	strb	r2, [r3, #0]
      break;
 8008dfa:	e0f2      	b.n	8008fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	885b      	ldrh	r3, [r3, #2]
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b05      	cmp	r3, #5
 8008e04:	f200 80ac 	bhi.w	8008f60 <USBD_GetDescriptor+0x204>
 8008e08:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <USBD_GetDescriptor+0xb4>)
 8008e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0e:	bf00      	nop
 8008e10:	08008e29 	.word	0x08008e29
 8008e14:	08008e5d 	.word	0x08008e5d
 8008e18:	08008e91 	.word	0x08008e91
 8008e1c:	08008ec5 	.word	0x08008ec5
 8008e20:	08008ef9 	.word	0x08008ef9
 8008e24:	08008f2d 	.word	0x08008f2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00b      	beq.n	8008e4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	7c12      	ldrb	r2, [r2, #16]
 8008e40:	f107 0108 	add.w	r1, r7, #8
 8008e44:	4610      	mov	r0, r2
 8008e46:	4798      	blx	r3
 8008e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e4a:	e091      	b.n	8008f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fa97 	bl	8009382 <USBD_CtlError>
            err++;
 8008e54:	7afb      	ldrb	r3, [r7, #11]
 8008e56:	3301      	adds	r3, #1
 8008e58:	72fb      	strb	r3, [r7, #11]
          break;
 8008e5a:	e089      	b.n	8008f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00b      	beq.n	8008e80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	7c12      	ldrb	r2, [r2, #16]
 8008e74:	f107 0108 	add.w	r1, r7, #8
 8008e78:	4610      	mov	r0, r2
 8008e7a:	4798      	blx	r3
 8008e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e7e:	e077      	b.n	8008f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fa7d 	bl	8009382 <USBD_CtlError>
            err++;
 8008e88:	7afb      	ldrb	r3, [r7, #11]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e8e:	e06f      	b.n	8008f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00b      	beq.n	8008eb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	7c12      	ldrb	r2, [r2, #16]
 8008ea8:	f107 0108 	add.w	r1, r7, #8
 8008eac:	4610      	mov	r0, r2
 8008eae:	4798      	blx	r3
 8008eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eb2:	e05d      	b.n	8008f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fa63 	bl	8009382 <USBD_CtlError>
            err++;
 8008ebc:	7afb      	ldrb	r3, [r7, #11]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ec2:	e055      	b.n	8008f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	7c12      	ldrb	r2, [r2, #16]
 8008edc:	f107 0108 	add.w	r1, r7, #8
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	4798      	blx	r3
 8008ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ee6:	e043      	b.n	8008f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa49 	bl	8009382 <USBD_CtlError>
            err++;
 8008ef0:	7afb      	ldrb	r3, [r7, #11]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ef6:	e03b      	b.n	8008f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00b      	beq.n	8008f1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f0a:	695b      	ldr	r3, [r3, #20]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	7c12      	ldrb	r2, [r2, #16]
 8008f10:	f107 0108 	add.w	r1, r7, #8
 8008f14:	4610      	mov	r0, r2
 8008f16:	4798      	blx	r3
 8008f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f1a:	e029      	b.n	8008f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fa2f 	bl	8009382 <USBD_CtlError>
            err++;
 8008f24:	7afb      	ldrb	r3, [r7, #11]
 8008f26:	3301      	adds	r3, #1
 8008f28:	72fb      	strb	r3, [r7, #11]
          break;
 8008f2a:	e021      	b.n	8008f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00b      	beq.n	8008f50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	7c12      	ldrb	r2, [r2, #16]
 8008f44:	f107 0108 	add.w	r1, r7, #8
 8008f48:	4610      	mov	r0, r2
 8008f4a:	4798      	blx	r3
 8008f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f4e:	e00f      	b.n	8008f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fa15 	bl	8009382 <USBD_CtlError>
            err++;
 8008f58:	7afb      	ldrb	r3, [r7, #11]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f5e:	e007      	b.n	8008f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fa0d 	bl	8009382 <USBD_CtlError>
          err++;
 8008f68:	7afb      	ldrb	r3, [r7, #11]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f6e:	e038      	b.n	8008fe2 <USBD_GetDescriptor+0x286>
 8008f70:	e037      	b.n	8008fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	7c1b      	ldrb	r3, [r3, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d109      	bne.n	8008f8e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f82:	f107 0208 	add.w	r2, r7, #8
 8008f86:	4610      	mov	r0, r2
 8008f88:	4798      	blx	r3
 8008f8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f8c:	e029      	b.n	8008fe2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f9f6 	bl	8009382 <USBD_CtlError>
        err++;
 8008f96:	7afb      	ldrb	r3, [r7, #11]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	72fb      	strb	r3, [r7, #11]
      break;
 8008f9c:	e021      	b.n	8008fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	7c1b      	ldrb	r3, [r3, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10d      	bne.n	8008fc2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fae:	f107 0208 	add.w	r2, r7, #8
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	4798      	blx	r3
 8008fb6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	2207      	movs	r2, #7
 8008fbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fc0:	e00f      	b.n	8008fe2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fc2:	6839      	ldr	r1, [r7, #0]
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f9dc 	bl	8009382 <USBD_CtlError>
        err++;
 8008fca:	7afb      	ldrb	r3, [r7, #11]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	72fb      	strb	r3, [r7, #11]
      break;
 8008fd0:	e007      	b.n	8008fe2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f9d4 	bl	8009382 <USBD_CtlError>
      err++;
 8008fda:	7afb      	ldrb	r3, [r7, #11]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	72fb      	strb	r3, [r7, #11]
      break;
 8008fe0:	bf00      	nop
  }

  if (err != 0U)
 8008fe2:	7afb      	ldrb	r3, [r7, #11]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d11c      	bne.n	8009022 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008fe8:	893b      	ldrh	r3, [r7, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d011      	beq.n	8009012 <USBD_GetDescriptor+0x2b6>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	88db      	ldrh	r3, [r3, #6]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00d      	beq.n	8009012 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	88da      	ldrh	r2, [r3, #6]
 8008ffa:	893b      	ldrh	r3, [r7, #8]
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	bf28      	it	cs
 8009000:	4613      	movcs	r3, r2
 8009002:	b29b      	uxth	r3, r3
 8009004:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009006:	893b      	ldrh	r3, [r7, #8]
 8009008:	461a      	mov	r2, r3
 800900a:	68f9      	ldr	r1, [r7, #12]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fa22 	bl	8009456 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	88db      	ldrh	r3, [r3, #6]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d104      	bne.n	8009024 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fa5b 	bl	80094d6 <USBD_CtlSendStatus>
 8009020:	e000      	b.n	8009024 <USBD_GetDescriptor+0x2c8>
    return;
 8009022:	bf00      	nop
    }
  }
}
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop

0800902c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	889b      	ldrh	r3, [r3, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d130      	bne.n	80090a0 <USBD_SetAddress+0x74>
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	88db      	ldrh	r3, [r3, #6]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d12c      	bne.n	80090a0 <USBD_SetAddress+0x74>
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	885b      	ldrh	r3, [r3, #2]
 800904a:	2b7f      	cmp	r3, #127	; 0x7f
 800904c:	d828      	bhi.n	80090a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	885b      	ldrh	r3, [r3, #2]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009058:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009060:	2b03      	cmp	r3, #3
 8009062:	d104      	bne.n	800906e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f98b 	bl	8009382 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800906c:	e01d      	b.n	80090aa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	7bfa      	ldrb	r2, [r7, #15]
 8009072:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fd62 	bl	8009b44 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fa28 	bl	80094d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d004      	beq.n	8009096 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2202      	movs	r2, #2
 8009090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009094:	e009      	b.n	80090aa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800909e:	e004      	b.n	80090aa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f96d 	bl	8009382 <USBD_CtlError>
  }
}
 80090a8:	bf00      	nop
 80090aa:	bf00      	nop
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	885b      	ldrh	r3, [r3, #2]
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	4b41      	ldr	r3, [pc, #260]	; (80091cc <USBD_SetConfig+0x118>)
 80090c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090c8:	4b40      	ldr	r3, [pc, #256]	; (80091cc <USBD_SetConfig+0x118>)
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d904      	bls.n	80090da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f955 	bl	8009382 <USBD_CtlError>
 80090d8:	e075      	b.n	80091c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d002      	beq.n	80090ea <USBD_SetConfig+0x36>
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d023      	beq.n	8009130 <USBD_SetConfig+0x7c>
 80090e8:	e062      	b.n	80091b0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80090ea:	4b38      	ldr	r3, [pc, #224]	; (80091cc <USBD_SetConfig+0x118>)
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d01a      	beq.n	8009128 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80090f2:	4b36      	ldr	r3, [pc, #216]	; (80091cc <USBD_SetConfig+0x118>)
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2203      	movs	r2, #3
 8009100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009104:	4b31      	ldr	r3, [pc, #196]	; (80091cc <USBD_SetConfig+0x118>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7ff f9e8 	bl	80084e0 <USBD_SetClassConfig>
 8009110:	4603      	mov	r3, r0
 8009112:	2b02      	cmp	r3, #2
 8009114:	d104      	bne.n	8009120 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f932 	bl	8009382 <USBD_CtlError>
            return;
 800911e:	e052      	b.n	80091c6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f9d8 	bl	80094d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009126:	e04e      	b.n	80091c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f9d4 	bl	80094d6 <USBD_CtlSendStatus>
        break;
 800912e:	e04a      	b.n	80091c6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009130:	4b26      	ldr	r3, [pc, #152]	; (80091cc <USBD_SetConfig+0x118>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d112      	bne.n	800915e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2202      	movs	r2, #2
 800913c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009140:	4b22      	ldr	r3, [pc, #136]	; (80091cc <USBD_SetConfig+0x118>)
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	461a      	mov	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800914a:	4b20      	ldr	r3, [pc, #128]	; (80091cc <USBD_SetConfig+0x118>)
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7ff f9e4 	bl	800851e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f9bd 	bl	80094d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800915c:	e033      	b.n	80091c6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800915e:	4b1b      	ldr	r3, [pc, #108]	; (80091cc <USBD_SetConfig+0x118>)
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	429a      	cmp	r2, r3
 800916a:	d01d      	beq.n	80091a8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	b2db      	uxtb	r3, r3
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7ff f9d2 	bl	800851e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800917a:	4b14      	ldr	r3, [pc, #80]	; (80091cc <USBD_SetConfig+0x118>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	461a      	mov	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009184:	4b11      	ldr	r3, [pc, #68]	; (80091cc <USBD_SetConfig+0x118>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	4619      	mov	r1, r3
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff f9a8 	bl	80084e0 <USBD_SetClassConfig>
 8009190:	4603      	mov	r3, r0
 8009192:	2b02      	cmp	r3, #2
 8009194:	d104      	bne.n	80091a0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f8f2 	bl	8009382 <USBD_CtlError>
            return;
 800919e:	e012      	b.n	80091c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f998 	bl	80094d6 <USBD_CtlSendStatus>
        break;
 80091a6:	e00e      	b.n	80091c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f994 	bl	80094d6 <USBD_CtlSendStatus>
        break;
 80091ae:	e00a      	b.n	80091c6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f8e5 	bl	8009382 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80091b8:	4b04      	ldr	r3, [pc, #16]	; (80091cc <USBD_SetConfig+0x118>)
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f7ff f9ad 	bl	800851e <USBD_ClrClassConfig>
        break;
 80091c4:	bf00      	nop
    }
  }
}
 80091c6:	3708      	adds	r7, #8
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	200001f4 	.word	0x200001f4

080091d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	88db      	ldrh	r3, [r3, #6]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d004      	beq.n	80091ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f8cc 	bl	8009382 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80091ea:	e022      	b.n	8009232 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	dc02      	bgt.n	80091fc <USBD_GetConfig+0x2c>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	dc03      	bgt.n	8009202 <USBD_GetConfig+0x32>
 80091fa:	e015      	b.n	8009228 <USBD_GetConfig+0x58>
 80091fc:	2b03      	cmp	r3, #3
 80091fe:	d00b      	beq.n	8009218 <USBD_GetConfig+0x48>
 8009200:	e012      	b.n	8009228 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	3308      	adds	r3, #8
 800920c:	2201      	movs	r2, #1
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f920 	bl	8009456 <USBD_CtlSendData>
        break;
 8009216:	e00c      	b.n	8009232 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3304      	adds	r3, #4
 800921c:	2201      	movs	r2, #1
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f918 	bl	8009456 <USBD_CtlSendData>
        break;
 8009226:	e004      	b.n	8009232 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f8a9 	bl	8009382 <USBD_CtlError>
        break;
 8009230:	bf00      	nop
}
 8009232:	bf00      	nop
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b082      	sub	sp, #8
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800924a:	3b01      	subs	r3, #1
 800924c:	2b02      	cmp	r3, #2
 800924e:	d81e      	bhi.n	800928e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	88db      	ldrh	r3, [r3, #6]
 8009254:	2b02      	cmp	r3, #2
 8009256:	d004      	beq.n	8009262 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f891 	bl	8009382 <USBD_CtlError>
        break;
 8009260:	e01a      	b.n	8009298 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800926e:	2b00      	cmp	r3, #0
 8009270:	d005      	beq.n	800927e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	f043 0202 	orr.w	r2, r3, #2
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	330c      	adds	r3, #12
 8009282:	2202      	movs	r2, #2
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f8e5 	bl	8009456 <USBD_CtlSendData>
      break;
 800928c:	e004      	b.n	8009298 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f876 	bl	8009382 <USBD_CtlError>
      break;
 8009296:	bf00      	nop
  }
}
 8009298:	bf00      	nop
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	885b      	ldrh	r3, [r3, #2]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d106      	bne.n	80092c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f90b 	bl	80094d6 <USBD_CtlSendStatus>
  }
}
 80092c0:	bf00      	nop
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d8:	3b01      	subs	r3, #1
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d80b      	bhi.n	80092f6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	885b      	ldrh	r3, [r3, #2]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d10c      	bne.n	8009300 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f8f1 	bl	80094d6 <USBD_CtlSendStatus>
      }
      break;
 80092f4:	e004      	b.n	8009300 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f842 	bl	8009382 <USBD_CtlError>
      break;
 80092fe:	e000      	b.n	8009302 <USBD_ClrFeature+0x3a>
      break;
 8009300:	bf00      	nop
  }
}
 8009302:	bf00      	nop
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800930a:	b480      	push	{r7}
 800930c:	b083      	sub	sp, #12
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	781a      	ldrb	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	785a      	ldrb	r2, [r3, #1]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	3302      	adds	r3, #2
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	b29a      	uxth	r2, r3
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	3303      	adds	r3, #3
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	b29b      	uxth	r3, r3
 8009334:	021b      	lsls	r3, r3, #8
 8009336:	b29b      	uxth	r3, r3
 8009338:	4413      	add	r3, r2
 800933a:	b29a      	uxth	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	3304      	adds	r3, #4
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	b29a      	uxth	r2, r3
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	3305      	adds	r3, #5
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	b29b      	uxth	r3, r3
 8009350:	021b      	lsls	r3, r3, #8
 8009352:	b29b      	uxth	r3, r3
 8009354:	4413      	add	r3, r2
 8009356:	b29a      	uxth	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	3306      	adds	r3, #6
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	b29a      	uxth	r2, r3
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	3307      	adds	r3, #7
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	b29b      	uxth	r3, r3
 800936c:	021b      	lsls	r3, r3, #8
 800936e:	b29b      	uxth	r3, r3
 8009370:	4413      	add	r3, r2
 8009372:	b29a      	uxth	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	80da      	strh	r2, [r3, #6]

}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	bc80      	pop	{r7}
 8009380:	4770      	bx	lr

08009382 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800938c:	2180      	movs	r1, #128	; 0x80
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fb6e 	bl	8009a70 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009394:	2100      	movs	r1, #0
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fb6a 	bl	8009a70 <USBD_LL_StallEP>
}
 800939c:	bf00      	nop
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093b0:	2300      	movs	r3, #0
 80093b2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d032      	beq.n	8009420 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f000 f834 	bl	8009428 <USBD_GetLen>
 80093c0:	4603      	mov	r3, r0
 80093c2:	3301      	adds	r3, #1
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	005b      	lsls	r3, r3, #1
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80093ce:	7dfb      	ldrb	r3, [r7, #23]
 80093d0:	1c5a      	adds	r2, r3, #1
 80093d2:	75fa      	strb	r2, [r7, #23]
 80093d4:	461a      	mov	r2, r3
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	4413      	add	r3, r2
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	7812      	ldrb	r2, [r2, #0]
 80093de:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	1c5a      	adds	r2, r3, #1
 80093e4:	75fa      	strb	r2, [r7, #23]
 80093e6:	461a      	mov	r2, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	4413      	add	r3, r2
 80093ec:	2203      	movs	r2, #3
 80093ee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80093f0:	e012      	b.n	8009418 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	1c5a      	adds	r2, r3, #1
 80093f6:	60fa      	str	r2, [r7, #12]
 80093f8:	7dfa      	ldrb	r2, [r7, #23]
 80093fa:	1c51      	adds	r1, r2, #1
 80093fc:	75f9      	strb	r1, [r7, #23]
 80093fe:	4611      	mov	r1, r2
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	440a      	add	r2, r1
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	75fa      	strb	r2, [r7, #23]
 800940e:	461a      	mov	r2, r3
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	4413      	add	r3, r2
 8009414:	2200      	movs	r2, #0
 8009416:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1e8      	bne.n	80093f2 <USBD_GetString+0x4e>
    }
  }
}
 8009420:	bf00      	nop
 8009422:	3718      	adds	r7, #24
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009430:	2300      	movs	r3, #0
 8009432:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009434:	e005      	b.n	8009442 <USBD_GetLen+0x1a>
  {
    len++;
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	3301      	adds	r3, #1
 800943a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3301      	adds	r3, #1
 8009440:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1f5      	bne.n	8009436 <USBD_GetLen+0xe>
  }

  return len;
 800944a:	7bfb      	ldrb	r3, [r7, #15]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	bc80      	pop	{r7}
 8009454:	4770      	bx	lr

08009456 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	60f8      	str	r0, [r7, #12]
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	4613      	mov	r3, r2
 8009462:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2202      	movs	r2, #2
 8009468:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800946c:	88fa      	ldrh	r2, [r7, #6]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009472:	88fa      	ldrh	r2, [r7, #6]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009478:	88fb      	ldrh	r3, [r7, #6]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	2100      	movs	r1, #0
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 fb7f 	bl	8009b82 <USBD_LL_Transmit>

  return USBD_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	4613      	mov	r3, r2
 800949a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800949c:	88fb      	ldrh	r3, [r7, #6]
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	2100      	movs	r1, #0
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 fb6d 	bl	8009b82 <USBD_LL_Transmit>

  return USBD_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	4613      	mov	r3, r2
 80094be:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094c0:	88fb      	ldrh	r3, [r7, #6]
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	2100      	movs	r1, #0
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f000 fb7e 	bl	8009bc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2204      	movs	r2, #4
 80094e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094e6:	2300      	movs	r3, #0
 80094e8:	2200      	movs	r2, #0
 80094ea:	2100      	movs	r1, #0
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fb48 	bl	8009b82 <USBD_LL_Transmit>

  return USBD_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2205      	movs	r2, #5
 8009508:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800950c:	2300      	movs	r3, #0
 800950e:	2200      	movs	r2, #0
 8009510:	2100      	movs	r1, #0
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fb58 	bl	8009bc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
	...

08009524 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009528:	2200      	movs	r2, #0
 800952a:	490e      	ldr	r1, [pc, #56]	; (8009564 <MX_USB_DEVICE_Init+0x40>)
 800952c:	480e      	ldr	r0, [pc, #56]	; (8009568 <MX_USB_DEVICE_Init+0x44>)
 800952e:	f7fe ff7d 	bl	800842c <USBD_Init>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009538:	f7f8 f857 	bl	80015ea <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800953c:	490b      	ldr	r1, [pc, #44]	; (800956c <MX_USB_DEVICE_Init+0x48>)
 800953e:	480a      	ldr	r0, [pc, #40]	; (8009568 <MX_USB_DEVICE_Init+0x44>)
 8009540:	f7fe ff9f 	bl	8008482 <USBD_RegisterClass>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800954a:	f7f8 f84e 	bl	80015ea <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800954e:	4806      	ldr	r0, [pc, #24]	; (8009568 <MX_USB_DEVICE_Init+0x44>)
 8009550:	f7fe ffb0 	bl	80084b4 <USBD_Start>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800955a:	f7f8 f846 	bl	80015ea <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800955e:	bf00      	nop
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	20000120 	.word	0x20000120
 8009568:	2000047c 	.word	0x2000047c
 800956c:	20000018 	.word	0x20000018

08009570 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	4603      	mov	r3, r0
 8009578:	6039      	str	r1, [r7, #0]
 800957a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	2212      	movs	r2, #18
 8009580:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009582:	4b03      	ldr	r3, [pc, #12]	; (8009590 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	bc80      	pop	{r7}
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	2000013c 	.word	0x2000013c

08009594 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	4603      	mov	r3, r0
 800959c:	6039      	str	r1, [r7, #0]
 800959e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2204      	movs	r2, #4
 80095a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095a6:	4b03      	ldr	r3, [pc, #12]	; (80095b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bc80      	pop	{r7}
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	20000150 	.word	0x20000150

080095b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	6039      	str	r1, [r7, #0]
 80095c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095c4:	79fb      	ldrb	r3, [r7, #7]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d105      	bne.n	80095d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	4907      	ldr	r1, [pc, #28]	; (80095ec <USBD_FS_ProductStrDescriptor+0x34>)
 80095ce:	4808      	ldr	r0, [pc, #32]	; (80095f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80095d0:	f7ff fee8 	bl	80093a4 <USBD_GetString>
 80095d4:	e004      	b.n	80095e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	4904      	ldr	r1, [pc, #16]	; (80095ec <USBD_FS_ProductStrDescriptor+0x34>)
 80095da:	4805      	ldr	r0, [pc, #20]	; (80095f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80095dc:	f7ff fee2 	bl	80093a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095e0:	4b02      	ldr	r3, [pc, #8]	; (80095ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20000740 	.word	0x20000740
 80095f0:	0800a118 	.word	0x0800a118

080095f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	6039      	str	r1, [r7, #0]
 80095fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	4904      	ldr	r1, [pc, #16]	; (8009614 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009604:	4804      	ldr	r0, [pc, #16]	; (8009618 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009606:	f7ff fecd 	bl	80093a4 <USBD_GetString>
  return USBD_StrDesc;
 800960a:	4b02      	ldr	r3, [pc, #8]	; (8009614 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	20000740 	.word	0x20000740
 8009618:	0800a128 	.word	0x0800a128

0800961c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	4603      	mov	r3, r0
 8009624:	6039      	str	r1, [r7, #0]
 8009626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	221a      	movs	r2, #26
 800962c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800962e:	f000 f843 	bl	80096b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009632:	4b02      	ldr	r3, [pc, #8]	; (800963c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009634:	4618      	mov	r0, r3
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	20000154 	.word	0x20000154

08009640 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	4603      	mov	r3, r0
 8009648:	6039      	str	r1, [r7, #0]
 800964a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800964c:	79fb      	ldrb	r3, [r7, #7]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d105      	bne.n	800965e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	4907      	ldr	r1, [pc, #28]	; (8009674 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009656:	4808      	ldr	r0, [pc, #32]	; (8009678 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009658:	f7ff fea4 	bl	80093a4 <USBD_GetString>
 800965c:	e004      	b.n	8009668 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	4904      	ldr	r1, [pc, #16]	; (8009674 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009662:	4805      	ldr	r0, [pc, #20]	; (8009678 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009664:	f7ff fe9e 	bl	80093a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009668:	4b02      	ldr	r3, [pc, #8]	; (8009674 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800966a:	4618      	mov	r0, r3
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20000740 	.word	0x20000740
 8009678:	0800a13c 	.word	0x0800a13c

0800967c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	6039      	str	r1, [r7, #0]
 8009686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009688:	79fb      	ldrb	r3, [r7, #7]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d105      	bne.n	800969a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	4907      	ldr	r1, [pc, #28]	; (80096b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009692:	4808      	ldr	r0, [pc, #32]	; (80096b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009694:	f7ff fe86 	bl	80093a4 <USBD_GetString>
 8009698:	e004      	b.n	80096a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	4904      	ldr	r1, [pc, #16]	; (80096b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800969e:	4805      	ldr	r0, [pc, #20]	; (80096b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096a0:	f7ff fe80 	bl	80093a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096a4:	4b02      	ldr	r3, [pc, #8]	; (80096b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	20000740 	.word	0x20000740
 80096b4:	0800a148 	.word	0x0800a148

080096b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096be:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <Get_SerialNum+0x44>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096c4:	4b0e      	ldr	r3, [pc, #56]	; (8009700 <Get_SerialNum+0x48>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096ca:	4b0e      	ldr	r3, [pc, #56]	; (8009704 <Get_SerialNum+0x4c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4413      	add	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d009      	beq.n	80096f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096de:	2208      	movs	r2, #8
 80096e0:	4909      	ldr	r1, [pc, #36]	; (8009708 <Get_SerialNum+0x50>)
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f000 f814 	bl	8009710 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096e8:	2204      	movs	r2, #4
 80096ea:	4908      	ldr	r1, [pc, #32]	; (800970c <Get_SerialNum+0x54>)
 80096ec:	68b8      	ldr	r0, [r7, #8]
 80096ee:	f000 f80f 	bl	8009710 <IntToUnicode>
  }
}
 80096f2:	bf00      	nop
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	1ffff7e8 	.word	0x1ffff7e8
 8009700:	1ffff7ec 	.word	0x1ffff7ec
 8009704:	1ffff7f0 	.word	0x1ffff7f0
 8009708:	20000156 	.word	0x20000156
 800970c:	20000166 	.word	0x20000166

08009710 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009710:	b480      	push	{r7}
 8009712:	b087      	sub	sp, #28
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	4613      	mov	r3, r2
 800971c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800971e:	2300      	movs	r3, #0
 8009720:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009722:	2300      	movs	r3, #0
 8009724:	75fb      	strb	r3, [r7, #23]
 8009726:	e027      	b.n	8009778 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	0f1b      	lsrs	r3, r3, #28
 800972c:	2b09      	cmp	r3, #9
 800972e:	d80b      	bhi.n	8009748 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	0f1b      	lsrs	r3, r3, #28
 8009734:	b2da      	uxtb	r2, r3
 8009736:	7dfb      	ldrb	r3, [r7, #23]
 8009738:	005b      	lsls	r3, r3, #1
 800973a:	4619      	mov	r1, r3
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	440b      	add	r3, r1
 8009740:	3230      	adds	r2, #48	; 0x30
 8009742:	b2d2      	uxtb	r2, r2
 8009744:	701a      	strb	r2, [r3, #0]
 8009746:	e00a      	b.n	800975e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	0f1b      	lsrs	r3, r3, #28
 800974c:	b2da      	uxtb	r2, r3
 800974e:	7dfb      	ldrb	r3, [r7, #23]
 8009750:	005b      	lsls	r3, r3, #1
 8009752:	4619      	mov	r1, r3
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	440b      	add	r3, r1
 8009758:	3237      	adds	r2, #55	; 0x37
 800975a:	b2d2      	uxtb	r2, r2
 800975c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	011b      	lsls	r3, r3, #4
 8009762:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009764:	7dfb      	ldrb	r3, [r7, #23]
 8009766:	005b      	lsls	r3, r3, #1
 8009768:	3301      	adds	r3, #1
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	4413      	add	r3, r2
 800976e:	2200      	movs	r2, #0
 8009770:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	3301      	adds	r3, #1
 8009776:	75fb      	strb	r3, [r7, #23]
 8009778:	7dfa      	ldrb	r2, [r7, #23]
 800977a:	79fb      	ldrb	r3, [r7, #7]
 800977c:	429a      	cmp	r2, r3
 800977e:	d3d3      	bcc.n	8009728 <IntToUnicode+0x18>
  }
}
 8009780:	bf00      	nop
 8009782:	bf00      	nop
 8009784:	371c      	adds	r7, #28
 8009786:	46bd      	mov	sp, r7
 8009788:	bc80      	pop	{r7}
 800978a:	4770      	bx	lr

0800978c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a11      	ldr	r2, [pc, #68]	; (80097e0 <HAL_PCD_MspInit+0x54>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d11b      	bne.n	80097d6 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800979e:	4b11      	ldr	r3, [pc, #68]	; (80097e4 <HAL_PCD_MspInit+0x58>)
 80097a0:	69db      	ldr	r3, [r3, #28]
 80097a2:	4a10      	ldr	r2, [pc, #64]	; (80097e4 <HAL_PCD_MspInit+0x58>)
 80097a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80097a8:	61d3      	str	r3, [r2, #28]
 80097aa:	4b0e      	ldr	r3, [pc, #56]	; (80097e4 <HAL_PCD_MspInit+0x58>)
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80097b6:	2200      	movs	r2, #0
 80097b8:	2100      	movs	r1, #0
 80097ba:	2013      	movs	r0, #19
 80097bc:	f7f9 f867 	bl	800288e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80097c0:	2013      	movs	r0, #19
 80097c2:	f7f9 f880 	bl	80028c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80097c6:	2200      	movs	r2, #0
 80097c8:	2100      	movs	r1, #0
 80097ca:	2014      	movs	r0, #20
 80097cc:	f7f9 f85f 	bl	800288e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80097d0:	2014      	movs	r0, #20
 80097d2:	f7f9 f878 	bl	80028c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80097d6:	bf00      	nop
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	40005c00 	.word	0x40005c00
 80097e4:	40021000 	.word	0x40021000

080097e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80097fc:	4619      	mov	r1, r3
 80097fe:	4610      	mov	r0, r2
 8009800:	f7fe fea0 	bl	8008544 <USBD_LL_SetupStage>
}
 8009804:	bf00      	nop
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800981e:	78fa      	ldrb	r2, [r7, #3]
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	4613      	mov	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4413      	add	r3, r2
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	440b      	add	r3, r1
 800982c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	78fb      	ldrb	r3, [r7, #3]
 8009834:	4619      	mov	r1, r3
 8009836:	f7fe fed2 	bl	80085de <USBD_LL_DataOutStage>
}
 800983a:	bf00      	nop
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b082      	sub	sp, #8
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	460b      	mov	r3, r1
 800984c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009854:	78fa      	ldrb	r2, [r7, #3]
 8009856:	6879      	ldr	r1, [r7, #4]
 8009858:	4613      	mov	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	00db      	lsls	r3, r3, #3
 8009860:	440b      	add	r3, r1
 8009862:	333c      	adds	r3, #60	; 0x3c
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	78fb      	ldrb	r3, [r7, #3]
 8009868:	4619      	mov	r1, r3
 800986a:	f7fe ff29 	bl	80086c0 <USBD_LL_DataInStage>
}
 800986e:	bf00      	nop
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff f839 	bl	80088fc <USBD_LL_SOF>
}
 800988a:	bf00      	nop
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800989a:	2301      	movs	r3, #1
 800989c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d001      	beq.n	80098aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80098a6:	f7f7 fea0 	bl	80015ea <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80098b0:	7bfa      	ldrb	r2, [r7, #15]
 80098b2:	4611      	mov	r1, r2
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fe ffe9 	bl	800888c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fe ffa2 	bl	800880a <USBD_LL_Reset>
}
 80098c6:	bf00      	nop
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe ffe3 	bl	80088aa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d005      	beq.n	80098f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098ec:	4b04      	ldr	r3, [pc, #16]	; (8009900 <HAL_PCD_SuspendCallback+0x30>)
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	4a03      	ldr	r2, [pc, #12]	; (8009900 <HAL_PCD_SuspendCallback+0x30>)
 80098f2:	f043 0306 	orr.w	r3, r3, #6
 80098f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	e000ed00 	.word	0xe000ed00

08009904 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009912:	4618      	mov	r0, r3
 8009914:	f7fe ffdd 	bl	80088d2 <USBD_LL_Resume>
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009928:	4a1f      	ldr	r2, [pc, #124]	; (80099a8 <USBD_LL_Init+0x88>)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a1d      	ldr	r2, [pc, #116]	; (80099a8 <USBD_LL_Init+0x88>)
 8009934:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009938:	4b1b      	ldr	r3, [pc, #108]	; (80099a8 <USBD_LL_Init+0x88>)
 800993a:	4a1c      	ldr	r2, [pc, #112]	; (80099ac <USBD_LL_Init+0x8c>)
 800993c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800993e:	4b1a      	ldr	r3, [pc, #104]	; (80099a8 <USBD_LL_Init+0x88>)
 8009940:	2208      	movs	r2, #8
 8009942:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009944:	4b18      	ldr	r3, [pc, #96]	; (80099a8 <USBD_LL_Init+0x88>)
 8009946:	2202      	movs	r2, #2
 8009948:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800994a:	4b17      	ldr	r3, [pc, #92]	; (80099a8 <USBD_LL_Init+0x88>)
 800994c:	2200      	movs	r2, #0
 800994e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009950:	4b15      	ldr	r3, [pc, #84]	; (80099a8 <USBD_LL_Init+0x88>)
 8009952:	2200      	movs	r2, #0
 8009954:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009956:	4b14      	ldr	r3, [pc, #80]	; (80099a8 <USBD_LL_Init+0x88>)
 8009958:	2200      	movs	r2, #0
 800995a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800995c:	4812      	ldr	r0, [pc, #72]	; (80099a8 <USBD_LL_Init+0x88>)
 800995e:	f7fa fae3 	bl	8003f28 <HAL_PCD_Init>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009968:	f7f7 fe3f 	bl	80015ea <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009972:	2318      	movs	r3, #24
 8009974:	2200      	movs	r2, #0
 8009976:	2100      	movs	r1, #0
 8009978:	f7fb fe0e 	bl	8005598 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009982:	2358      	movs	r3, #88	; 0x58
 8009984:	2200      	movs	r2, #0
 8009986:	2180      	movs	r1, #128	; 0x80
 8009988:	f7fb fe06 	bl	8005598 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009996:	2200      	movs	r2, #0
 8009998:	2181      	movs	r1, #129	; 0x81
 800999a:	f7fb fdfd 	bl	8005598 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	20000940 	.word	0x20000940
 80099ac:	40005c00 	.word	0x40005c00

080099b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fa fbb9 	bl	800413e <HAL_PCD_Start>
 80099cc:	4603      	mov	r3, r0
 80099ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 f93c 	bl	8009c50 <USBD_Get_USB_Status>
 80099d8:	4603      	mov	r3, r0
 80099da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	4608      	mov	r0, r1
 80099f0:	4611      	mov	r1, r2
 80099f2:	461a      	mov	r2, r3
 80099f4:	4603      	mov	r3, r0
 80099f6:	70fb      	strb	r3, [r7, #3]
 80099f8:	460b      	mov	r3, r1
 80099fa:	70bb      	strb	r3, [r7, #2]
 80099fc:	4613      	mov	r3, r2
 80099fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a0e:	78bb      	ldrb	r3, [r7, #2]
 8009a10:	883a      	ldrh	r2, [r7, #0]
 8009a12:	78f9      	ldrb	r1, [r7, #3]
 8009a14:	f7fa fd33 	bl	800447e <HAL_PCD_EP_Open>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 f916 	bl	8009c50 <USBD_Get_USB_Status>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a4c:	78fa      	ldrb	r2, [r7, #3]
 8009a4e:	4611      	mov	r1, r2
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fa fd7a 	bl	800454a <HAL_PCD_EP_Close>
 8009a56:	4603      	mov	r3, r0
 8009a58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 f8f7 	bl	8009c50 <USBD_Get_USB_Status>
 8009a62:	4603      	mov	r3, r0
 8009a64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a8a:	78fa      	ldrb	r2, [r7, #3]
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fa fe23 	bl	80046da <HAL_PCD_EP_SetStall>
 8009a94:	4603      	mov	r3, r0
 8009a96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 f8d8 	bl	8009c50 <USBD_Get_USB_Status>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ac8:	78fa      	ldrb	r2, [r7, #3]
 8009aca:	4611      	mov	r1, r2
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7fa fe64 	bl	800479a <HAL_PCD_EP_ClrStall>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 f8b9 	bl	8009c50 <USBD_Get_USB_Status>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009afe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	da0c      	bge.n	8009b22 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b08:	78fb      	ldrb	r3, [r7, #3]
 8009b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b0e:	68f9      	ldr	r1, [r7, #12]
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	00db      	lsls	r3, r3, #3
 8009b1a:	440b      	add	r3, r1
 8009b1c:	3302      	adds	r3, #2
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	e00b      	b.n	8009b3a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b22:	78fb      	ldrb	r3, [r7, #3]
 8009b24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b28:	68f9      	ldr	r1, [r7, #12]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	00db      	lsls	r3, r3, #3
 8009b32:	440b      	add	r3, r1
 8009b34:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009b38:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3714      	adds	r7, #20
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bc80      	pop	{r7}
 8009b42:	4770      	bx	lr

08009b44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b5e:	78fa      	ldrb	r2, [r7, #3]
 8009b60:	4611      	mov	r1, r2
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fa fc66 	bl	8004434 <HAL_PCD_SetAddress>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 f86e 	bl	8009c50 <USBD_Get_USB_Status>
 8009b74:	4603      	mov	r3, r0
 8009b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b086      	sub	sp, #24
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	60f8      	str	r0, [r7, #12]
 8009b8a:	607a      	str	r2, [r7, #4]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	460b      	mov	r3, r1
 8009b90:	72fb      	strb	r3, [r7, #11]
 8009b92:	4613      	mov	r3, r2
 8009b94:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ba4:	893b      	ldrh	r3, [r7, #8]
 8009ba6:	7af9      	ldrb	r1, [r7, #11]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	f7fa fd53 	bl	8004654 <HAL_PCD_EP_Transmit>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 f84b 	bl	8009c50 <USBD_Get_USB_Status>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3718      	adds	r7, #24
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	607a      	str	r2, [r7, #4]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	72fb      	strb	r3, [r7, #11]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bea:	893b      	ldrh	r3, [r7, #8]
 8009bec:	7af9      	ldrb	r1, [r7, #11]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	f7fa fcf3 	bl	80045da <HAL_PCD_EP_Receive>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 f828 	bl	8009c50 <USBD_Get_USB_Status>
 8009c00:	4603      	mov	r3, r0
 8009c02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c04:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
	...

08009c10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c18:	4b02      	ldr	r3, [pc, #8]	; (8009c24 <USBD_static_malloc+0x14>)
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bc80      	pop	{r7}
 8009c22:	4770      	bx	lr
 8009c24:	200001f8 	.word	0x200001f8

08009c28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]

}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc80      	pop	{r7}
 8009c38:	4770      	bx	lr

08009c3a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	460b      	mov	r3, r1
 8009c44:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009c46:	bf00      	nop
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bc80      	pop	{r7}
 8009c4e:	4770      	bx	lr

08009c50 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	4603      	mov	r3, r0
 8009c58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c5e:	79fb      	ldrb	r3, [r7, #7]
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d817      	bhi.n	8009c94 <USBD_Get_USB_Status+0x44>
 8009c64:	a201      	add	r2, pc, #4	; (adr r2, 8009c6c <USBD_Get_USB_Status+0x1c>)
 8009c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6a:	bf00      	nop
 8009c6c:	08009c7d 	.word	0x08009c7d
 8009c70:	08009c83 	.word	0x08009c83
 8009c74:	08009c89 	.word	0x08009c89
 8009c78:	08009c8f 	.word	0x08009c8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c80:	e00b      	b.n	8009c9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c82:	2302      	movs	r3, #2
 8009c84:	73fb      	strb	r3, [r7, #15]
    break;
 8009c86:	e008      	b.n	8009c9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c8c:	e005      	b.n	8009c9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c8e:	2302      	movs	r3, #2
 8009c90:	73fb      	strb	r3, [r7, #15]
    break;
 8009c92:	e002      	b.n	8009c9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c94:	2302      	movs	r3, #2
 8009c96:	73fb      	strb	r3, [r7, #15]
    break;
 8009c98:	bf00      	nop
  }
  return usb_status;
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bc80      	pop	{r7}
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop

08009ca8 <__errno>:
 8009ca8:	4b01      	ldr	r3, [pc, #4]	; (8009cb0 <__errno+0x8>)
 8009caa:	6818      	ldr	r0, [r3, #0]
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	20000170 	.word	0x20000170

08009cb4 <__libc_init_array>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	2600      	movs	r6, #0
 8009cb8:	4d0c      	ldr	r5, [pc, #48]	; (8009cec <__libc_init_array+0x38>)
 8009cba:	4c0d      	ldr	r4, [pc, #52]	; (8009cf0 <__libc_init_array+0x3c>)
 8009cbc:	1b64      	subs	r4, r4, r5
 8009cbe:	10a4      	asrs	r4, r4, #2
 8009cc0:	42a6      	cmp	r6, r4
 8009cc2:	d109      	bne.n	8009cd8 <__libc_init_array+0x24>
 8009cc4:	f000 fa14 	bl	800a0f0 <_init>
 8009cc8:	2600      	movs	r6, #0
 8009cca:	4d0a      	ldr	r5, [pc, #40]	; (8009cf4 <__libc_init_array+0x40>)
 8009ccc:	4c0a      	ldr	r4, [pc, #40]	; (8009cf8 <__libc_init_array+0x44>)
 8009cce:	1b64      	subs	r4, r4, r5
 8009cd0:	10a4      	asrs	r4, r4, #2
 8009cd2:	42a6      	cmp	r6, r4
 8009cd4:	d105      	bne.n	8009ce2 <__libc_init_array+0x2e>
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}
 8009cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cdc:	4798      	blx	r3
 8009cde:	3601      	adds	r6, #1
 8009ce0:	e7ee      	b.n	8009cc0 <__libc_init_array+0xc>
 8009ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce6:	4798      	blx	r3
 8009ce8:	3601      	adds	r6, #1
 8009cea:	e7f2      	b.n	8009cd2 <__libc_init_array+0x1e>
 8009cec:	0800a1bc 	.word	0x0800a1bc
 8009cf0:	0800a1bc 	.word	0x0800a1bc
 8009cf4:	0800a1bc 	.word	0x0800a1bc
 8009cf8:	0800a1c0 	.word	0x0800a1c0

08009cfc <memset>:
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	4402      	add	r2, r0
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d100      	bne.n	8009d06 <memset+0xa>
 8009d04:	4770      	bx	lr
 8009d06:	f803 1b01 	strb.w	r1, [r3], #1
 8009d0a:	e7f9      	b.n	8009d00 <memset+0x4>

08009d0c <log>:
 8009d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0e:	4604      	mov	r4, r0
 8009d10:	460d      	mov	r5, r1
 8009d12:	f000 f835 	bl	8009d80 <__ieee754_log>
 8009d16:	4b17      	ldr	r3, [pc, #92]	; (8009d74 <log+0x68>)
 8009d18:	4606      	mov	r6, r0
 8009d1a:	f993 3000 	ldrsb.w	r3, [r3]
 8009d1e:	460f      	mov	r7, r1
 8009d20:	3301      	adds	r3, #1
 8009d22:	d01a      	beq.n	8009d5a <log+0x4e>
 8009d24:	4622      	mov	r2, r4
 8009d26:	462b      	mov	r3, r5
 8009d28:	4620      	mov	r0, r4
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	f7f6 fe6e 	bl	8000a0c <__aeabi_dcmpun>
 8009d30:	b998      	cbnz	r0, 8009d5a <log+0x4e>
 8009d32:	2200      	movs	r2, #0
 8009d34:	2300      	movs	r3, #0
 8009d36:	4620      	mov	r0, r4
 8009d38:	4629      	mov	r1, r5
 8009d3a:	f7f6 fe5d 	bl	80009f8 <__aeabi_dcmpgt>
 8009d3e:	b960      	cbnz	r0, 8009d5a <log+0x4e>
 8009d40:	2200      	movs	r2, #0
 8009d42:	2300      	movs	r3, #0
 8009d44:	4620      	mov	r0, r4
 8009d46:	4629      	mov	r1, r5
 8009d48:	f7f6 fe2e 	bl	80009a8 <__aeabi_dcmpeq>
 8009d4c:	b140      	cbz	r0, 8009d60 <log+0x54>
 8009d4e:	f7ff ffab 	bl	8009ca8 <__errno>
 8009d52:	2322      	movs	r3, #34	; 0x22
 8009d54:	2600      	movs	r6, #0
 8009d56:	4f08      	ldr	r7, [pc, #32]	; (8009d78 <log+0x6c>)
 8009d58:	6003      	str	r3, [r0, #0]
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d60:	f7ff ffa2 	bl	8009ca8 <__errno>
 8009d64:	2321      	movs	r3, #33	; 0x21
 8009d66:	6003      	str	r3, [r0, #0]
 8009d68:	4804      	ldr	r0, [pc, #16]	; (8009d7c <log+0x70>)
 8009d6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d6e:	f000 b9b9 	b.w	800a0e4 <nan>
 8009d72:	bf00      	nop
 8009d74:	200001d4 	.word	0x200001d4
 8009d78:	fff00000 	.word	0xfff00000
 8009d7c:	0800a1b8 	.word	0x0800a1b8

08009d80 <__ieee754_log>:
 8009d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d84:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	460d      	mov	r5, r1
 8009d8e:	b087      	sub	sp, #28
 8009d90:	da24      	bge.n	8009ddc <__ieee754_log+0x5c>
 8009d92:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8009d96:	4304      	orrs	r4, r0
 8009d98:	d108      	bne.n	8009dac <__ieee754_log+0x2c>
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	2000      	movs	r0, #0
 8009da0:	49cb      	ldr	r1, [pc, #812]	; (800a0d0 <__ieee754_log+0x350>)
 8009da2:	f7f6 fcc3 	bl	800072c <__aeabi_ddiv>
 8009da6:	b007      	add	sp, #28
 8009da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dac:	2900      	cmp	r1, #0
 8009dae:	da04      	bge.n	8009dba <__ieee754_log+0x3a>
 8009db0:	f7f6 f9da 	bl	8000168 <__aeabi_dsub>
 8009db4:	2200      	movs	r2, #0
 8009db6:	2300      	movs	r3, #0
 8009db8:	e7f3      	b.n	8009da2 <__ieee754_log+0x22>
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4bc5      	ldr	r3, [pc, #788]	; (800a0d4 <__ieee754_log+0x354>)
 8009dbe:	f7f6 fb8b 	bl	80004d8 <__aeabi_dmul>
 8009dc2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	460d      	mov	r5, r1
 8009dcc:	49c2      	ldr	r1, [pc, #776]	; (800a0d8 <__ieee754_log+0x358>)
 8009dce:	428d      	cmp	r5, r1
 8009dd0:	dd06      	ble.n	8009de0 <__ieee754_log+0x60>
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	f7f6 f9c9 	bl	800016c <__adddf3>
 8009dda:	e7e4      	b.n	8009da6 <__ieee754_log+0x26>
 8009ddc:	2600      	movs	r6, #0
 8009dde:	e7f5      	b.n	8009dcc <__ieee754_log+0x4c>
 8009de0:	152c      	asrs	r4, r5, #20
 8009de2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009de6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8009dea:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009dee:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8009df2:	4426      	add	r6, r4
 8009df4:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8009df8:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8009dfc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8009e00:	ea41 0305 	orr.w	r3, r1, r5
 8009e04:	4610      	mov	r0, r2
 8009e06:	4619      	mov	r1, r3
 8009e08:	2200      	movs	r2, #0
 8009e0a:	4bb4      	ldr	r3, [pc, #720]	; (800a0dc <__ieee754_log+0x35c>)
 8009e0c:	f7f6 f9ac 	bl	8000168 <__aeabi_dsub>
 8009e10:	1cab      	adds	r3, r5, #2
 8009e12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	4682      	mov	sl, r0
 8009e1a:	468b      	mov	fp, r1
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8009e24:	dc53      	bgt.n	8009ece <__ieee754_log+0x14e>
 8009e26:	2300      	movs	r3, #0
 8009e28:	f7f6 fdbe 	bl	80009a8 <__aeabi_dcmpeq>
 8009e2c:	b1d0      	cbz	r0, 8009e64 <__ieee754_log+0xe4>
 8009e2e:	2c00      	cmp	r4, #0
 8009e30:	f000 8122 	beq.w	800a078 <__ieee754_log+0x2f8>
 8009e34:	4620      	mov	r0, r4
 8009e36:	f7f6 fae5 	bl	8000404 <__aeabi_i2d>
 8009e3a:	a391      	add	r3, pc, #580	; (adr r3, 800a080 <__ieee754_log+0x300>)
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	4606      	mov	r6, r0
 8009e42:	460f      	mov	r7, r1
 8009e44:	f7f6 fb48 	bl	80004d8 <__aeabi_dmul>
 8009e48:	a38f      	add	r3, pc, #572	; (adr r3, 800a088 <__ieee754_log+0x308>)
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	4604      	mov	r4, r0
 8009e50:	460d      	mov	r5, r1
 8009e52:	4630      	mov	r0, r6
 8009e54:	4639      	mov	r1, r7
 8009e56:	f7f6 fb3f 	bl	80004d8 <__aeabi_dmul>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4620      	mov	r0, r4
 8009e60:	4629      	mov	r1, r5
 8009e62:	e7b8      	b.n	8009dd6 <__ieee754_log+0x56>
 8009e64:	a38a      	add	r3, pc, #552	; (adr r3, 800a090 <__ieee754_log+0x310>)
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	4650      	mov	r0, sl
 8009e6c:	4659      	mov	r1, fp
 8009e6e:	f7f6 fb33 	bl	80004d8 <__aeabi_dmul>
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	2000      	movs	r0, #0
 8009e78:	4999      	ldr	r1, [pc, #612]	; (800a0e0 <__ieee754_log+0x360>)
 8009e7a:	f7f6 f975 	bl	8000168 <__aeabi_dsub>
 8009e7e:	4652      	mov	r2, sl
 8009e80:	4606      	mov	r6, r0
 8009e82:	460f      	mov	r7, r1
 8009e84:	465b      	mov	r3, fp
 8009e86:	4650      	mov	r0, sl
 8009e88:	4659      	mov	r1, fp
 8009e8a:	f7f6 fb25 	bl	80004d8 <__aeabi_dmul>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	4630      	mov	r0, r6
 8009e94:	4639      	mov	r1, r7
 8009e96:	f7f6 fb1f 	bl	80004d8 <__aeabi_dmul>
 8009e9a:	4606      	mov	r6, r0
 8009e9c:	460f      	mov	r7, r1
 8009e9e:	b914      	cbnz	r4, 8009ea6 <__ieee754_log+0x126>
 8009ea0:	4632      	mov	r2, r6
 8009ea2:	463b      	mov	r3, r7
 8009ea4:	e0a2      	b.n	8009fec <__ieee754_log+0x26c>
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f7f6 faac 	bl	8000404 <__aeabi_i2d>
 8009eac:	a374      	add	r3, pc, #464	; (adr r3, 800a080 <__ieee754_log+0x300>)
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	4680      	mov	r8, r0
 8009eb4:	4689      	mov	r9, r1
 8009eb6:	f7f6 fb0f 	bl	80004d8 <__aeabi_dmul>
 8009eba:	a373      	add	r3, pc, #460	; (adr r3, 800a088 <__ieee754_log+0x308>)
 8009ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	460d      	mov	r5, r1
 8009ec4:	4640      	mov	r0, r8
 8009ec6:	4649      	mov	r1, r9
 8009ec8:	f7f6 fb06 	bl	80004d8 <__aeabi_dmul>
 8009ecc:	e0a7      	b.n	800a01e <__ieee754_log+0x29e>
 8009ece:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ed2:	f7f6 f94b 	bl	800016c <__adddf3>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4650      	mov	r0, sl
 8009edc:	4659      	mov	r1, fp
 8009ede:	f7f6 fc25 	bl	800072c <__aeabi_ddiv>
 8009ee2:	e9cd 0100 	strd	r0, r1, [sp]
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f7f6 fa8c 	bl	8000404 <__aeabi_i2d>
 8009eec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	f7f6 faee 	bl	80004d8 <__aeabi_dmul>
 8009efc:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8009f00:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8009f04:	4602      	mov	r2, r0
 8009f06:	9305      	str	r3, [sp, #20]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	460f      	mov	r7, r1
 8009f0e:	f7f6 fae3 	bl	80004d8 <__aeabi_dmul>
 8009f12:	a361      	add	r3, pc, #388	; (adr r3, 800a098 <__ieee754_log+0x318>)
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	4680      	mov	r8, r0
 8009f1a:	4689      	mov	r9, r1
 8009f1c:	f7f6 fadc 	bl	80004d8 <__aeabi_dmul>
 8009f20:	a35f      	add	r3, pc, #380	; (adr r3, 800a0a0 <__ieee754_log+0x320>)
 8009f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f26:	f7f6 f921 	bl	800016c <__adddf3>
 8009f2a:	4642      	mov	r2, r8
 8009f2c:	464b      	mov	r3, r9
 8009f2e:	f7f6 fad3 	bl	80004d8 <__aeabi_dmul>
 8009f32:	a35d      	add	r3, pc, #372	; (adr r3, 800a0a8 <__ieee754_log+0x328>)
 8009f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f38:	f7f6 f918 	bl	800016c <__adddf3>
 8009f3c:	4642      	mov	r2, r8
 8009f3e:	464b      	mov	r3, r9
 8009f40:	f7f6 faca 	bl	80004d8 <__aeabi_dmul>
 8009f44:	a35a      	add	r3, pc, #360	; (adr r3, 800a0b0 <__ieee754_log+0x330>)
 8009f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4a:	f7f6 f90f 	bl	800016c <__adddf3>
 8009f4e:	4632      	mov	r2, r6
 8009f50:	463b      	mov	r3, r7
 8009f52:	f7f6 fac1 	bl	80004d8 <__aeabi_dmul>
 8009f56:	a358      	add	r3, pc, #352	; (adr r3, 800a0b8 <__ieee754_log+0x338>)
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	460f      	mov	r7, r1
 8009f60:	4640      	mov	r0, r8
 8009f62:	4649      	mov	r1, r9
 8009f64:	f7f6 fab8 	bl	80004d8 <__aeabi_dmul>
 8009f68:	a355      	add	r3, pc, #340	; (adr r3, 800a0c0 <__ieee754_log+0x340>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	f7f6 f8fd 	bl	800016c <__adddf3>
 8009f72:	4642      	mov	r2, r8
 8009f74:	464b      	mov	r3, r9
 8009f76:	f7f6 faaf 	bl	80004d8 <__aeabi_dmul>
 8009f7a:	a353      	add	r3, pc, #332	; (adr r3, 800a0c8 <__ieee754_log+0x348>)
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f7f6 f8f4 	bl	800016c <__adddf3>
 8009f84:	4642      	mov	r2, r8
 8009f86:	464b      	mov	r3, r9
 8009f88:	f7f6 faa6 	bl	80004d8 <__aeabi_dmul>
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4602      	mov	r2, r0
 8009f90:	4639      	mov	r1, r7
 8009f92:	4630      	mov	r0, r6
 8009f94:	f7f6 f8ea 	bl	800016c <__adddf3>
 8009f98:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009f9c:	9b05      	ldr	r3, [sp, #20]
 8009f9e:	3551      	adds	r5, #81	; 0x51
 8009fa0:	431d      	orrs	r5, r3
 8009fa2:	2d00      	cmp	r5, #0
 8009fa4:	4680      	mov	r8, r0
 8009fa6:	4689      	mov	r9, r1
 8009fa8:	dd48      	ble.n	800a03c <__ieee754_log+0x2bc>
 8009faa:	2200      	movs	r2, #0
 8009fac:	4b4c      	ldr	r3, [pc, #304]	; (800a0e0 <__ieee754_log+0x360>)
 8009fae:	4650      	mov	r0, sl
 8009fb0:	4659      	mov	r1, fp
 8009fb2:	f7f6 fa91 	bl	80004d8 <__aeabi_dmul>
 8009fb6:	4652      	mov	r2, sl
 8009fb8:	465b      	mov	r3, fp
 8009fba:	f7f6 fa8d 	bl	80004d8 <__aeabi_dmul>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	460f      	mov	r7, r1
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	4649      	mov	r1, r9
 8009fca:	f7f6 f8cf 	bl	800016c <__adddf3>
 8009fce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fd2:	f7f6 fa81 	bl	80004d8 <__aeabi_dmul>
 8009fd6:	4680      	mov	r8, r0
 8009fd8:	4689      	mov	r9, r1
 8009fda:	b964      	cbnz	r4, 8009ff6 <__ieee754_log+0x276>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	f7f6 f8c0 	bl	8000168 <__aeabi_dsub>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	4650      	mov	r0, sl
 8009fee:	4659      	mov	r1, fp
 8009ff0:	f7f6 f8ba 	bl	8000168 <__aeabi_dsub>
 8009ff4:	e6d7      	b.n	8009da6 <__ieee754_log+0x26>
 8009ff6:	a322      	add	r3, pc, #136	; (adr r3, 800a080 <__ieee754_log+0x300>)
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a000:	f7f6 fa6a 	bl	80004d8 <__aeabi_dmul>
 800a004:	a320      	add	r3, pc, #128	; (adr r3, 800a088 <__ieee754_log+0x308>)
 800a006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00a:	4604      	mov	r4, r0
 800a00c:	460d      	mov	r5, r1
 800a00e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a012:	f7f6 fa61 	bl	80004d8 <__aeabi_dmul>
 800a016:	4642      	mov	r2, r8
 800a018:	464b      	mov	r3, r9
 800a01a:	f7f6 f8a7 	bl	800016c <__adddf3>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	4630      	mov	r0, r6
 800a024:	4639      	mov	r1, r7
 800a026:	f7f6 f89f 	bl	8000168 <__aeabi_dsub>
 800a02a:	4652      	mov	r2, sl
 800a02c:	465b      	mov	r3, fp
 800a02e:	f7f6 f89b 	bl	8000168 <__aeabi_dsub>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	4620      	mov	r0, r4
 800a038:	4629      	mov	r1, r5
 800a03a:	e7d9      	b.n	8009ff0 <__ieee754_log+0x270>
 800a03c:	4602      	mov	r2, r0
 800a03e:	460b      	mov	r3, r1
 800a040:	4650      	mov	r0, sl
 800a042:	4659      	mov	r1, fp
 800a044:	f7f6 f890 	bl	8000168 <__aeabi_dsub>
 800a048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a04c:	f7f6 fa44 	bl	80004d8 <__aeabi_dmul>
 800a050:	4606      	mov	r6, r0
 800a052:	460f      	mov	r7, r1
 800a054:	2c00      	cmp	r4, #0
 800a056:	f43f af23 	beq.w	8009ea0 <__ieee754_log+0x120>
 800a05a:	a309      	add	r3, pc, #36	; (adr r3, 800a080 <__ieee754_log+0x300>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a064:	f7f6 fa38 	bl	80004d8 <__aeabi_dmul>
 800a068:	a307      	add	r3, pc, #28	; (adr r3, 800a088 <__ieee754_log+0x308>)
 800a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06e:	4604      	mov	r4, r0
 800a070:	460d      	mov	r5, r1
 800a072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a076:	e727      	b.n	8009ec8 <__ieee754_log+0x148>
 800a078:	2000      	movs	r0, #0
 800a07a:	2100      	movs	r1, #0
 800a07c:	e693      	b.n	8009da6 <__ieee754_log+0x26>
 800a07e:	bf00      	nop
 800a080:	fee00000 	.word	0xfee00000
 800a084:	3fe62e42 	.word	0x3fe62e42
 800a088:	35793c76 	.word	0x35793c76
 800a08c:	3dea39ef 	.word	0x3dea39ef
 800a090:	55555555 	.word	0x55555555
 800a094:	3fd55555 	.word	0x3fd55555
 800a098:	df3e5244 	.word	0xdf3e5244
 800a09c:	3fc2f112 	.word	0x3fc2f112
 800a0a0:	96cb03de 	.word	0x96cb03de
 800a0a4:	3fc74664 	.word	0x3fc74664
 800a0a8:	94229359 	.word	0x94229359
 800a0ac:	3fd24924 	.word	0x3fd24924
 800a0b0:	55555593 	.word	0x55555593
 800a0b4:	3fe55555 	.word	0x3fe55555
 800a0b8:	d078c69f 	.word	0xd078c69f
 800a0bc:	3fc39a09 	.word	0x3fc39a09
 800a0c0:	1d8e78af 	.word	0x1d8e78af
 800a0c4:	3fcc71c5 	.word	0x3fcc71c5
 800a0c8:	9997fa04 	.word	0x9997fa04
 800a0cc:	3fd99999 	.word	0x3fd99999
 800a0d0:	c3500000 	.word	0xc3500000
 800a0d4:	43500000 	.word	0x43500000
 800a0d8:	7fefffff 	.word	0x7fefffff
 800a0dc:	3ff00000 	.word	0x3ff00000
 800a0e0:	3fe00000 	.word	0x3fe00000

0800a0e4 <nan>:
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	4901      	ldr	r1, [pc, #4]	; (800a0ec <nan+0x8>)
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	7ff80000 	.word	0x7ff80000

0800a0f0 <_init>:
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f2:	bf00      	nop
 800a0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0f6:	bc08      	pop	{r3}
 800a0f8:	469e      	mov	lr, r3
 800a0fa:	4770      	bx	lr

0800a0fc <_fini>:
 800a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fe:	bf00      	nop
 800a100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a102:	bc08      	pop	{r3}
 800a104:	469e      	mov	lr, r3
 800a106:	4770      	bx	lr
